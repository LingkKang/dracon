(function() {var type_impls = {
"rpc":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Service%3CReq,+Res%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rpc/lib.rs.html#104-171\">source</a><a href=\"#impl-Service%3CReq,+Res%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Req, Res&gt; <a class=\"struct\" href=\"rpc/struct.Service.html\" title=\"struct rpc::Service\">Service</a>&lt;Req, Res&gt;<div class=\"where\">where\n    Req: <a class=\"trait\" href=\"rpc/trait.RpcRequest.html\" title=\"trait rpc::RpcRequest\">RpcRequest</a>,\n    Res: <a class=\"trait\" href=\"rpc/trait.RpcResponse.html\" title=\"trait rpc::RpcResponse\">RpcResponse</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/rpc/lib.rs.html#110-112\">source</a><h4 class=\"code-header\">pub fn <a href=\"rpc/struct.Service.html#tymethod.new\" class=\"fn\">new</a>(socket: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>, request: Req, response: Res) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new service.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send_request\" class=\"method\"><a class=\"src rightside\" href=\"src/rpc/lib.rs.html#118-142\">source</a><h4 class=\"code-header\">pub async fn <a href=\"rpc/struct.Service.html#tymethod.send_request\" class=\"fn\">send_request</a>(&amp;self, target: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/net/socket_addr/enum.SocketAddr.html\" title=\"enum core::net::socket_addr::SocketAddr\">SocketAddr</a>) -&gt; <a class=\"type\" href=\"rpc/type.Result.html\" title=\"type rpc::Result\">Result</a>&lt;Res&gt;</h4></section></summary><div class=\"docblock\"><p>Send a request to the service.\nAs sending a request is the main purpose,\nlog output of sending is at <a href=\"https://docs.rs/log/0.4.21/log/macro.info.html\" title=\"macro log::info\"><code>log::info!</code></a> level,\nwhereas receiving is at <a href=\"https://docs.rs/log/0.4.21/log/macro.debug.html\" title=\"macro log::debug\"><code>log::debug!</code></a> level.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.handle_request\" class=\"method\"><a class=\"src rightside\" href=\"src/rpc/lib.rs.html#148-170\">source</a><h4 class=\"code-header\">pub async fn <a href=\"rpc/struct.Service.html#tymethod.handle_request\" class=\"fn\">handle_request</a>(&amp;self) -&gt; <a class=\"type\" href=\"rpc/type.Result.html\" title=\"type rpc::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Handle all the requests to the service.\nAs handling requests is the main purpose,\nlog output of receiving is at <a href=\"https://docs.rs/log/0.4.21/log/macro.info.html\" title=\"macro log::info\"><code>log::info!</code></a> level,\nwhereas sending is at <a href=\"https://docs.rs/log/0.4.21/log/macro.debug.html\" title=\"macro log::debug\"><code>log::debug!</code></a> level.</p>\n</div></details></div></details>",0,"rpc::PingService"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Service%3CReq,+Res%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/rpc/lib.rs.html#88\">source</a><a href=\"#impl-Clone-for-Service%3CReq,+Res%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Req, Res&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"rpc/struct.Service.html\" title=\"struct rpc::Service\">Service</a>&lt;Req, Res&gt;<div class=\"where\">where\n    Req: <a class=\"trait\" href=\"rpc/trait.RpcRequest.html\" title=\"trait rpc::RpcRequest\">RpcRequest</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    Res: <a class=\"trait\" href=\"rpc/trait.RpcResponse.html\" title=\"trait rpc::RpcResponse\">RpcResponse</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rpc/lib.rs.html#88\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"rpc/struct.Service.html\" title=\"struct rpc::Service\">Service</a>&lt;Req, Res&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","rpc::PingService"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()