var searchIndex = new Map(JSON.parse('[\
["logger",{"doc":"Custom logger module.","t":"FNNHNONNNNNNNNNNONNCNNNOH","n":["Logger","borrow","borrow_mut","colorize_level_string","default","default_level","enabled","flush","from","get_level","get_prefix","init","into","is_using_prefix","log","new","prefix","set_level","set_prefix","time","try_from","try_into","type_id","with_prefix","get_formatted_time"],"q":[[0,"logger"],[24,"logger::time"],[25,"alloc::string"],[26,"colored"],[27,"log"],[28,"log"],[29,"core::any"]],"d":["A custom logger struct that uses stdout to print logs.","","","","","The default level of the logger.","Check if current message level is enabled for logging.","Flush the logger. As stdout is used, no need to flush, so …","Returns the argument unchanged.","Get the current level of the logger.","Get the current prefix of the logger. If no prefix is set, …","Static method to initialize the logger with an optional …","Calls <code>U::from(self)</code>.","Get the current status of the prefix. If no prefix is set, …","Log the message.","Create a new global logger with default level set to …","The prefix to be used for the logger.","Set the default level of the logger.","Enable the logger with a prefix after the time.","Time utility for the logger.","","","","Whether to use a prefix for the logger.","Get the current time in a formatted string. Here <code>Z</code> means …"],"i":[0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0],"f":"`{ce{}{}}0{bd}{{}f}`{{fh}j}{fl}{cc{}}{fn}{fb}37{fj}{{fA`}l}7`{{fn}f}{{fb}f}`{c{{Ab{e}}}{}{}}0{cAd{}}`{{}b}","c":[],"p":[[5,"String",25],[5,"ColoredString",26],[5,"Logger",0],[5,"Metadata",27],[1,"bool"],[1,"unit"],[6,"LevelFilter",27],[5,"Record",27],[6,"Result",28],[5,"TypeId",29]],"b":[]}],\
["raft",{"doc":"The Raft consensus algorithm implementation.","t":"CPPPFGNNNNNOONNNNNNNNNNONONNNNNNNNN","n":["node","Candidate","Follower","Leader","Node","Status","borrow","borrow","borrow_mut","borrow_mut","current_term","current_term","election_timeout","eq","fmt","from","from","into","into","is_leader","is_leader","new","socket_addr","socket_addr","status","status","timeout","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"raft"],[1,"raft::node"],[35,"core::fmt"],[36,"core::fmt"],[37,"core::result"],[38,"core::any"]],"d":["In Raft, each server is represented as a node <code>Node</code>.","Candidate status.","Follower status. The default status of a new node.","Leader status.","A Raft node that represents a server in the cluster.","All possible status (states) of a Raft node.","","","","","Get the current term of the node.","The current term of the node. Initialized to <code>0</code> on first …","Election timeout in milliseconds. Typically 150 - 300 ms.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the node is a leader.","","Create a new node with <code>Status::Follower</code> status.","Get the IP address of the node.","A socket address is the composition of","Get the current status of the node.","The current status of the node.","","","","","","","","",""],"i":[0,3,3,3,0,0,1,3,1,3,1,1,1,3,3,1,3,1,3,1,3,1,1,1,1,1,1,1,3,1,3,1,3,1,3],"f":"``````{ce{}{}}000{bd}``{{ff}h}{{fj}l}{cc{}}044{bh}{fh}{nb}{bn}`{bf}`{bA`}{c{{Ab{e}}}{}{}}000{cAd{}}0<<","c":[],"p":[[5,"Node",1],[1,"u128"],[6,"Status",1],[1,"bool"],[5,"Formatter",35],[8,"Result",35],[6,"SocketAddr",36],[1,"unit"],[6,"Result",37],[5,"TypeId",38]],"b":[]}],\
["rpc",{"doc":"RPC (Remote Procedure Call)","t":"IIPPFFIIKKFNNNNNNONNNNNNOOMMNNNNNNNNNONNNOOOONMMNNOONNNMMNNNNNNNNNNN","n":["Byte","Bytes","Err","Ok","PingRequest","PingResponse","PingService","Result","RpcRequest","RpcResponse","Service","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buf","clone","clone","clone","clone_into","clone_into","clone_into","data","data","deserialize","deserialize","deserialize","deserialize","from","from","from","handle_request","into","into","into","len","new","new","new","request","request","response","response","send_request","serialize","serialize","serialize","serialize","socket","socket","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"rpc"],[68,"core::clone"],[69,"core::net::socket_addr"],[70,"alloc::string"],[71,"core::result"],[72,"core::any"]],"d":["","","Contains the error value","Contains the success value","","","","","Trait for RPC request.","Trait for RPC response.","RPC service.","","","","","","","","","","","","","","","","Deserialize the request from <code>Bytes</code>.","Deserialize the response from <code>Bytes</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Handle all the requests to the service. As handling …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new service.","","","Request type.","Request type.","Response type.","Response type.","Send a request to the service. As sending a request is the …","Serialize the request into <code>Bytes</code>.","Serialize the response into <code>Bytes</code>.","","","Socket address of the service.","Socket address of the service.","","","","Convert the request into a <code>String</code>.","Convert the response into a <code>String</code>.","","","","","","","","","","",""],"i":[0,0,9,9,0,0,0,0,0,0,0,1,5,6,1,5,6,8,1,5,6,1,5,6,5,6,2,4,5,6,1,5,6,1,1,5,6,8,1,5,6,14,1,14,1,1,2,4,5,6,14,1,1,5,6,2,4,5,6,1,5,6,1,5,6,1,5,6],"f":"```````````{ce{}{}}00000`{{{b{ce}}}{{b{ce}}}{df}{hf}}{jj}{ll}{{ce}n{}{}}00``{A`d}{A`h}{A`j}{A`l}{cc{}}00{{{b{ce}}}{{Ab{n}}}dh}:::`{{Adce}{{b{ce}}}dh}{Afj}{Afl}````{{{b{ce}}Ad}{{Ab{e}}}dh}{dA`}{hA`}{jA`}{lA`}``{ce{}{}}00{dAf}{hAf}{jAf}{lAf}{c{{Ah{e}}}{}{}}00000{cAj{}}00","c":[],"p":[[5,"Service",0],[10,"RpcRequest",0],[10,"Clone",68],[10,"RpcResponse",0],[5,"PingRequest",0],[5,"PingResponse",0],[1,"unit"],[8,"Bytes",0],[8,"Result",0],[6,"SocketAddr",69],[5,"String",70],[6,"Result",71],[5,"TypeId",72],[8,"PingService",0]],"b":[]}],\
["server",{"doc":"The binary target of dracon.","t":"HH","n":["main","read_config"],"q":[[0,"server"],[2,"core::net::socket_addr"],[3,"alloc::vec"],[4,"std::io::error"],[5,"std::path"],[6,"core::convert"]],"d":["","Read the configuration file and return a set of sockets."],"i":[0,0],"f":"{{}b}{c{{h{{f{d}}}}}{{l{j}}}}","c":[],"p":[[1,"unit"],[6,"SocketAddr",2],[5,"Vec",3],[8,"Result",4],[5,"Path",5],[10,"AsRef",6]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
