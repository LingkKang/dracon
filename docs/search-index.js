var searchIndex = new Map(JSON.parse('[\
["bytes",{"doc":"Provides abstractions for working with bytes.","t":"EEFFNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKFFFFFFFMNNMNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Buf","BufMut","Bytes","BytesMut","advance","advance","advance_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buf","capacity","chunk","chunk","chunk_mut","clear","clear","clone","clone","clone_into","clone_into","cmp","cmp","copy_from_slice","copy_to_bytes","copy_to_bytes","default","default","deref","deref","deref_mut","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend_from_slice","fmt","fmt","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_static","hash","hash","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","len","len","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","put","put_bytes","put_slice","remaining","remaining","remaining_mut","reserve","resize","set_len","slice","slice_ref","spare_capacity_mut","split","split_off","split_off","split_to","split_to","to_owned","to_owned","truncate","truncate","try_from","try_from","try_into","try_into","type_id","type_id","unsplit","with_capacity","write_fmt","write_str","zeroed","Buf","BufMut","Chain","IntoIter","Limit","Reader","Take","UninitSlice","Writer","advance","advance","advance","advance_mut","advance_mut","advance_mut","as_mut_ptr","as_uninit_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chain","chain_mut","chain_mut","chunk","chunk","chunk","chunk_mut","chunk_mut","chunk_mut","chunks_vectored","chunks_vectored","chunks_vectored","consume","copy_from_slice","copy_to_bytes","copy_to_bytes","copy_to_bytes","copy_to_bytes","copy_to_slice","copy_to_slice","fill_buf","first_mut","first_ref","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw_parts_mut","get_f32","get_f32","get_f32_le","get_f32_le","get_f32_ne","get_f32_ne","get_f64","get_f64","get_f64_le","get_f64_le","get_f64_ne","get_f64_ne","get_i128","get_i128","get_i128_le","get_i128_le","get_i128_ne","get_i128_ne","get_i16","get_i16","get_i16_le","get_i16_le","get_i16_ne","get_i16_ne","get_i32","get_i32","get_i32_le","get_i32_le","get_i32_ne","get_i32_ne","get_i64","get_i64","get_i64_le","get_i64_le","get_i64_ne","get_i64_ne","get_i8","get_i8","get_int","get_int","get_int_le","get_int_le","get_int_ne","get_int_ne","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_u128","get_u128","get_u128_le","get_u128_le","get_u128_ne","get_u128_ne","get_u16","get_u16","get_u16_le","get_u16_le","get_u16_ne","get_u16_ne","get_u32","get_u32","get_u32_le","get_u32_le","get_u32_ne","get_u32_ne","get_u64","get_u64","get_u64_le","get_u64_le","get_u64_ne","get_u64_ne","get_u8","get_u8","get_uint","get_uint","get_uint_le","get_uint_le","get_uint_ne","get_uint_ne","has_remaining","has_remaining","has_remaining_mut","has_remaining_mut","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","last_mut","last_ref","len","limit","limit","limit","limit","new","new","next","put","put","put_bytes","put_bytes","put_f32","put_f32","put_f32_le","put_f32_le","put_f32_ne","put_f32_ne","put_f64","put_f64","put_f64_le","put_f64_le","put_f64_ne","put_f64_ne","put_i128","put_i128","put_i128_le","put_i128_le","put_i128_ne","put_i128_ne","put_i16","put_i16","put_i16_le","put_i16_le","put_i16_ne","put_i16_ne","put_i32","put_i32","put_i32_le","put_i32_le","put_i32_ne","put_i32_ne","put_i64","put_i64","put_i64_le","put_i64_le","put_i64_ne","put_i64_ne","put_i8","put_i8","put_int","put_int","put_int_le","put_int_le","put_int_ne","put_int_ne","put_slice","put_slice","put_u128","put_u128","put_u128_le","put_u128_le","put_u128_ne","put_u128_ne","put_u16","put_u16","put_u16_le","put_u16_le","put_u16_ne","put_u16_ne","put_u32","put_u32","put_u32_le","put_u32_le","put_u32_ne","put_u32_ne","put_u64","put_u64","put_u64_le","put_u64_le","put_u64_ne","put_u64_ne","put_u8","put_u8","put_uint","put_uint","put_uint_le","put_uint_le","put_uint_ne","put_uint_ne","read","reader","reader","remaining","remaining","remaining","remaining_mut","remaining_mut","remaining_mut","set_limit","set_limit","size_hint","take","take","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uninit","write","write_byte","writer","writer"],"q":[[0,"bytes"],[137,"bytes::buf"],[455,"core::cmp"],[456,"alloc::string"],[457,"core::marker"],[458,"alloc::vec"],[459,"core::iter::traits::collect"],[460,"core::fmt"],[461,"core::fmt"],[462,"core::hash"],[463,"core::option"],[464,"core::ops::range"],[465,"core::mem::maybe_uninit"],[466,"core::result"],[467,"core::any"],[468,"core::fmt"],[469,"std::io::error"],[470,"core::fmt"]],"d":["","","A cheaply cloneable and sliceable chunk of contiguous …","A unique reference to a contiguous slice of memory.","","","","","","","","","","","","","","Utilities for working with buffers.","Returns the number of bytes the <code>BytesMut</code> can hold without …","","","","Clears the buffer, removing all data.","Clears the buffer, removing all data. Existing capacity is …","","","","","","","Creates <code>Bytes</code> instance from slice, by copying it.","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends given bytes to this <code>BytesMut</code>.","","","","","","","Converts <code>self</code> into an immutable <code>Bytes</code>.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Creates a new <code>Bytes</code> from a static slice.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns true if the <code>Bytes</code> has a length of 0.","Returns true if the <code>BytesMut</code> has a length of 0.","Returns the number of bytes contained in this <code>Bytes</code>.","Returns the number of bytes contained in this <code>BytesMut</code>.","Creates a new empty <code>Bytes</code>.","Creates a new <code>BytesMut</code> with default capacity.","","","","","","","","","","","","","","","","","","","Reserves capacity for at least <code>additional</code> more bytes to be …","Resizes the buffer so that <code>len</code> is equal to <code>new_len</code>.","Sets the length of the buffer.","Returns a slice of self for the provided range.","Returns a slice of self that is equivalent to the given …","Returns the remaining spare capacity of the buffer as a …","Removes the bytes from the current view, returning them in …","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Splits the buffer into two at the given index.","","","Shortens the buffer, keeping the first <code>len</code> bytes and …","Shortens the buffer, keeping the first <code>len</code> bytes and …","","","","","","","Absorbs a <code>BytesMut</code> that was previously split off.","Creates a new <code>BytesMut</code> with the specified capacity.","","","Creates a new <code>BytesMut</code>, which is initialized with zero.","Read bytes from a buffer.","A trait for values that provide sequential write access to …","A <code>Chain</code> sequences two buffers.","Iterator over the bytes contained by the buffer.","A <code>BufMut</code> adapter which limits the amount of bytes that can …","A <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …","A <code>Buf</code> adapter which limits the bytes read from an …","Uninitialized byte slice.","A <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …","Advance the internal cursor of the Buf","","","Advance the internal cursor of the BufMut","","","Return a raw pointer to the slice’s buffer.","Return a <code>&amp;mut [MaybeUninit&lt;u8&gt;]</code> to this slice’s buffer.","","","","","","","","","","","","","","","Creates an adaptor which will chain this buffer with …","Creates an adaptor which will chain this buffer with …","Creates an adapter which will chain this buffer with …","Creates an adapter which will chain this buffer with …","Returns a slice starting at the current position and of …","","","Returns a mutable slice starting at the current BufMut …","","","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","","","Copies bytes  from <code>src</code> into <code>self</code>.","Consumes <code>len</code> bytes inside self and returns new instance of …","Consumes <code>len</code> bytes inside self and returns new instance of …","","","Copies bytes from <code>self</code> into <code>dst</code>.","Copies bytes from <code>self</code> into <code>dst</code>.","","Gets a mutable reference to the first underlying <code>Buf</code>.","Gets a reference to the first underlying <code>Buf</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>&amp;mut UninitSlice</code> from a pointer and a length.","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets a signed 128 bit integer from <code>self</code> in big-endian byte …","Gets a signed 128 bit integer from <code>self</code> in big-endian byte …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets a signed 128 bit integer from <code>self</code> in little-endian …","Gets a signed 128 bit integer from <code>self</code> in native-endian …","Gets a signed 128 bit integer from <code>self</code> in native-endian …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 16 bit integer from <code>self</code> in native-endian …","Gets a signed 16 bit integer from <code>self</code> in native-endian …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in native-endian …","Gets a signed 32 bit integer from <code>self</code> in native-endian …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in native-endian …","Gets a signed 64 bit integer from <code>self</code> in native-endian …","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a signed n-byte integer from <code>self</code> in native-endian …","Gets a signed n-byte integer from <code>self</code> in native-endian …","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>BufMut</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>BufMut</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>BufMut</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>BufMut</code>.","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in big-endian …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 128 bit integer from <code>self</code> in …","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 16 bit integer from <code>self</code> in native-endian …","Gets an unsigned 16 bit integer from <code>self</code> in native-endian …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in native-endian …","Gets an unsigned 32 bit integer from <code>self</code> in native-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in native-endian …","Gets an unsigned 64 bit integer from <code>self</code> in native-endian …","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in native-endian …","Gets an unsigned n-byte integer from <code>self</code> in native-endian …","Returns true if there are any more bytes to consume","Returns true if there are any more bytes to consume","Returns true if there is space in <code>self</code> for more bytes.","Returns true if there is space in <code>self</code> for more bytes.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>Chain</code>, returning the underlying values.","Consumes this <code>IntoIter</code>, returning the underlying value.","Consumes this <code>Limit</code>, returning the underlying value.","Consumes this <code>Reader</code>, returning the underlying value.","Consumes this <code>Take</code>, returning the underlying value.","Consumes this <code>Writer</code>, returning the underlying value.","","","Gets a mutable reference to the last underlying <code>Buf</code>.","Gets a reference to the last underlying <code>Buf</code>.","Returns the number of bytes in the slice.","Creates an adaptor which can write at most <code>limit</code> bytes to …","Creates an adaptor which can write at most <code>limit</code> bytes to …","Returns the maximum number of bytes that can be written","Returns the maximum number of bytes that can be read.","Creates a <code>&amp;mut UninitSlice</code> wrapping a slice of initialised …","Creates an iterator over the bytes contained by the buffer.","","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Put <code>cnt</code> bytes <code>val</code> into <code>self</code>.","Put <code>cnt</code> bytes <code>val</code> into <code>self</code>.","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes an IEEE754 single-precision (4 bytes) floating …","Writes an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes a signed 128 bit integer to <code>self</code> in the big-endian …","Writes a signed 128 bit integer to <code>self</code> in the big-endian …","Writes a signed 128 bit integer to <code>self</code> in little-endian …","Writes a signed 128 bit integer to <code>self</code> in little-endian …","Writes a signed 128 bit integer to <code>self</code> in native-endian …","Writes a signed 128 bit integer to <code>self</code> in native-endian …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes a signed 16 bit integer to <code>self</code> in native-endian …","Writes a signed 16 bit integer to <code>self</code> in native-endian …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes a signed 32 bit integer to <code>self</code> in native-endian …","Writes a signed 32 bit integer to <code>self</code> in native-endian …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes a signed 64 bit integer to <code>self</code> in native-endian …","Writes a signed 64 bit integer to <code>self</code> in native-endian …","Writes a signed 8 bit integer to <code>self</code>.","Writes a signed 8 bit integer to <code>self</code>.","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Writes low <code>nbytes</code> of a signed integer to <code>self</code> in …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Writes an unsigned 128 bit integer to <code>self</code> in the …","Writes an unsigned 128 bit integer to <code>self</code> in the …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 128 bit integer to <code>self</code> in …","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 16 bit integer to <code>self</code> in native-endian …","Writes an unsigned 16 bit integer to <code>self</code> in native-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in native-endian …","Writes an unsigned 32 bit integer to <code>self</code> in native-endian …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in native-endian …","Writes an unsigned 64 bit integer to <code>self</code> in native-endian …","Writes an unsigned 8 bit integer to <code>self</code>.","Writes an unsigned 8 bit integer to <code>self</code>.","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Returns the number of bytes between the current position …","","","Returns the number of bytes that can be written from the …","","","Sets the maximum number of bytes that can be written.","Sets the maximum number of bytes that can be read.","","Creates an adaptor which will read at most <code>limit</code> bytes …","Creates an adaptor which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","","","","Creates a <code>&amp;mut UninitSlice</code> wrapping a slice of …","","Write a single byte at the specified offset.","Creates an adaptor which implements the <code>Write</code> trait for …","Creates an adaptor which implements the <code>Write</code> trait for …"],"i":[0,0,0,0,1,4,4,4,1,4,1,1,4,4,1,4,4,0,4,1,4,4,1,4,1,4,1,4,1,4,1,1,4,1,4,1,4,4,1,4,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,1,1,1,4,4,4,4,1,1,1,1,1,1,1,4,4,4,1,4,4,1,1,4,1,4,1,1,4,4,1,4,1,4,1,4,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,1,4,4,4,4,4,1,1,4,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,21,27,28,29,27,30,7,7,7,27,36,30,32,28,34,7,27,36,30,32,28,34,21,21,29,29,21,27,28,29,27,30,21,21,27,32,7,21,21,27,28,21,21,32,27,27,34,7,27,36,30,32,28,34,7,7,27,36,30,32,28,34,7,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,36,30,32,28,34,36,30,32,28,34,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,29,29,7,7,7,7,7,7,7,7,7,7,7,7,27,36,30,32,28,34,27,36,30,32,28,34,27,36,27,27,7,29,29,30,28,7,36,36,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,32,21,21,21,27,28,29,27,30,30,28,36,21,21,27,36,30,32,28,34,27,36,30,32,28,34,7,27,36,30,32,28,34,7,34,7,29,29],"f":[0,0,0,0,[[1,2],3],[[4,2],3],[[4,2],3],[4,[[6,[5]]]],[1,[[6,[5]]]],[4,[[6,[5]]]],[-1,-2,[],[]],[1,[[6,[5]]]],[4,[[6,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[4,[[6,[5]]]],[-1,-2,[],[]],0,[4,2],[1,[[6,[5]]]],[4,[[6,[5]]]],[4,7],[1,3],[4,3],[1,1],[4,4],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,1],8],[[4,4],8],[[[6,[5]]],1],[[1,2],1],[[4,2],1],[[],1],[[],4],[1,[[6,[5]]]],[4,[[6,[5]]]],[4,[[6,[5]]]],[1,3],[4,3],[[1,1],9],[[1,10],9],[[1,[6,[5]]],9],[[1,-1],9,11],[[1,12],9],[[1,[13,[5]]],9],[[1,4],9],[[4,-1],9,11],[[4,10],9],[[4,4],9],[[4,[6,[5]]],9],[[4,1],9],[[4,[13,[5]]],9],[[4,12],9],[[4,-1],3,[[15,[],[[14,[5]]]]]],[[4,-1],3,[[15,[],[[14,[5]]]]]],[[4,-1],3,[[15,[],[[14,[1]]]]]],[[4,[6,[5]]],3],[[1,16],17],[[1,16],17],[[1,16],17],[[4,16],17],[[4,16],17],[[4,16],17],[4,1],[[[18,[[6,[5]]]]],1],[[[13,[5]]],1],[4,1],[10,1],[12,1],[[[6,[5]]],1],[-1,-1,[]],[[[6,[5]]],4],[-1,-1,[]],[12,4],[-1,1,[[15,[],[[14,[5]]]]]],[-1,4,[[15,[],[[14,[5]]]]]],[-1,4,[[15,[],[[14,[5]]]]]],[[[6,[5]]],1],[[1,-1],3,19],[[4,-1],3,19],[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[4,-1,[]],[4,-1,[]],[1,9],[4,9],[1,2],[4,2],[[],1],[[],4],[[1,[6,[5]]],[[20,[8]]]],[[1,1],[[20,[8]]]],[[1,10],[[20,[8]]]],[[1,[13,[5]]],[[20,[8]]]],[[1,12],[[20,[8]]]],[[1,-1],[[20,[8]]],11],[[4,4],[[20,[8]]]],[[4,[6,[5]]],[[20,[8]]]],[[4,10],[[20,[8]]]],[[4,[13,[5]]],[[20,[8]]]],[[4,-1],[[20,[8]]],11],[[4,12],[[20,[8]]]],[[4,-1],3,21],[[4,5,2],3],[[4,[6,[5]]],3],[1,2],[4,2],[4,2],[[4,2],3],[[4,2,5],3],[[4,2],3],[[1,-1],1,[[22,[2]]]],[[1,[6,[5]]],1],[4,[[6,[[23,[5]]]]]],[4,4],[[1,2],1],[[4,2],4],[[1,2],1],[[4,2],4],[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],3],[[4,2],3],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[[4,4],3],[2,4],[[4,26],17],[[4,12],17],[2,4],0,0,0,0,0,0,0,0,0,[[21,2],3],[[[27,[-1,-2]],2],3,21,21],[[[28,[-1]],2],3,21],[[29,2],3],[[[27,[-1,-2]],2],3,29,29],[[[30,[-1]],2],3,29],[7,5],[7,[[6,[[23,[5]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[21,-1],[[27,[21,-1]]],21],[[21,-1],[[27,[21,-1]]],21],[[29,-1],[[27,[29,-1]]],29],[[29,-1],[[27,[29,-1]]],29],[21,[[6,[5]]]],[[[27,[-1,-2]]],[[6,[5]]],21,21],[[[28,[-1]]],[[6,[5]]],21],[29,7],[[[27,[-1,-2]]],7,29,29],[[[30,[-1]]],7,29],[[21,[6,[31]]],2],[[21,[6,[31]]],2],[[[27,[-1,-2]],[6,[31]]],2,21,21],[[[32,[-1]],2],3,[21,11]],[[7,[6,[5]]],3],[[21,2],1],[[21,2],1],[[[27,[-1,-2]],2],1,21,21],[[[28,[-1]],2],1,21],[[21,[6,[5]]],3],[[21,[6,[5]]],3],[[[32,[-1]]],[[33,[[6,[5]]]]],[21,11]],[[[27,[-1,-2]]],-1,[],[]],[[[27,[-1,-2]]],-1,[],[]],[[[34,[-1]]],[[33,[3]]],[29,11]],[[7,16],17],[[[27,[-1,-2]],16],17,35,35],[[[36,[-1]],16],17,35],[[[30,[-1]],16],17,35],[[[32,[-1]],16],17,35],[[[28,[-1]],16],17,35],[[[34,[-1]],16],17,35],[[[6,[[23,[5]]]]],7],[[[6,[5]]],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[5,2],7],[21,37],[21,37],[21,37],[21,37],[21,37],[21,37],[21,38],[21,38],[21,38],[21,38],[21,38],[21,38],[21,39],[21,39],[21,39],[21,39],[21,39],[21,39],[21,40],[21,40],[21,40],[21,40],[21,40],[21,40],[21,41],[21,41],[21,41],[21,41],[21,41],[21,41],[21,42],[21,42],[21,42],[21,42],[21,42],[21,42],[21,43],[21,43],[[21,2],42],[[21,2],42],[[21,2],42],[[21,2],42],[[21,2],42],[[21,2],42],[[[36,[-1]]],-1,[]],[[[30,[-1]]],-1,[]],[[[32,[-1]]],-1,21],[[[28,[-1]]],-1,[]],[[[34,[-1]]],-1,29],[[[36,[-1]]],-1,[]],[[[30,[-1]]],-1,[]],[[[32,[-1]]],-1,21],[[[28,[-1]]],-1,[]],[[[34,[-1]]],-1,29],[21,44],[21,44],[21,44],[21,44],[21,44],[21,44],[21,45],[21,45],[21,45],[21,45],[21,45],[21,45],[21,46],[21,46],[21,46],[21,46],[21,46],[21,46],[21,47],[21,47],[21,47],[21,47],[21,47],[21,47],[21,5],[21,5],[[21,2],47],[[21,2],47],[[21,2],47],[[21,2],47],[[21,2],47],[[21,2],47],[21,9],[21,9],[29,9],[29,9],[[7,48],7],[[7,[49,[2]]],7],[[7,[50,[2]]],7],[[7,[51,[2]]],7],[[7,[52,[2]]],7],[[7,[53,[2]]],7],[[7,[49,[2]]],7],[[7,[52,[2]]],7],[[7,[50,[2]]],7],[[7,[51,[2]]],7],[[7,48],7],[[7,[53,[2]]],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[27,[-1,-2]]],[[3,[-1,-2]]],[],[]],[[[36,[-1]]],-1,[]],[[[30,[-1]]],-1,[]],[[[32,[-1]]],-1,21],[[[28,[-1]]],-1,[]],[[[34,[-1]]],-1,29],[[[27,[-1,-2]]],-3,21,21,[]],[-1,-2,[],[]],[[[27,[-1,-2]]],-2,[],[]],[[[27,[-1,-2]]],-2,[],[]],[7,2],[[29,2],[[30,[29]]]],[[29,2],[[30,[29]]]],[[[30,[-1]]],2,[]],[[[28,[-1]]],2,[]],[[[6,[5]]],7],[-1,[[36,[-1]]],[]],[[[36,[-1]]],[[20,[5]]],21],[[29,-1],3,21],[[29,-1],3,21],[[29,5,2],3],[[29,5,2],3],[[29,37],3],[[29,37],3],[[29,37],3],[[29,37],3],[[29,37],3],[[29,37],3],[[29,38],3],[[29,38],3],[[29,38],3],[[29,38],3],[[29,38],3],[[29,38],3],[[29,39],3],[[29,39],3],[[29,39],3],[[29,39],3],[[29,39],3],[[29,39],3],[[29,40],3],[[29,40],3],[[29,40],3],[[29,40],3],[[29,40],3],[[29,40],3],[[29,41],3],[[29,41],3],[[29,41],3],[[29,41],3],[[29,41],3],[[29,41],3],[[29,42],3],[[29,42],3],[[29,42],3],[[29,42],3],[[29,42],3],[[29,42],3],[[29,43],3],[[29,43],3],[[29,42,2],3],[[29,42,2],3],[[29,42,2],3],[[29,42,2],3],[[29,42,2],3],[[29,42,2],3],[[29,[6,[5]]],3],[[29,[6,[5]]],3],[[29,44],3],[[29,44],3],[[29,44],3],[[29,44],3],[[29,44],3],[[29,44],3],[[29,45],3],[[29,45],3],[[29,45],3],[[29,45],3],[[29,45],3],[[29,45],3],[[29,46],3],[[29,46],3],[[29,46],3],[[29,46],3],[[29,46],3],[[29,46],3],[[29,47],3],[[29,47],3],[[29,47],3],[[29,47],3],[[29,47],3],[[29,47],3],[[29,5],3],[[29,5],3],[[29,47,2],3],[[29,47,2],3],[[29,47,2],3],[[29,47,2],3],[[29,47,2],3],[[29,47,2],3],[[[32,[-1]],[6,[5]]],[[33,[2]]],[21,11]],[21,[[32,[21]]]],[21,[[32,[21]]]],[21,2],[[[27,[-1,-2]]],2,21,21],[[[28,[-1]]],2,21],[29,2],[[[27,[-1,-2]]],2,29,29],[[[30,[-1]]],2,29],[[[30,[-1]],2],3,[]],[[[28,[-1]],2],3,[]],[[[36,[-1]]],[[3,[2,[20,[2]]]]],21],[[21,2],[[28,[21]]]],[[21,2],[[28,[21]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[[[6,[[23,[5]]]]],7],[[[34,[-1]],[6,[5]]],[[33,[2]]],[29,11]],[[7,2,5],3],[29,[[34,[29]]]],[29,[[34,[29]]]]],"c":[],"p":[[5,"Bytes",0],[1,"usize"],[1,"tuple"],[5,"BytesMut",0],[1,"u8"],[1,"slice"],[5,"UninitSlice",137],[6,"Ordering",455],[1,"bool"],[5,"String",456],[10,"Sized",457],[1,"str"],[5,"Vec",458],[17,"Item"],[10,"IntoIterator",459],[5,"Formatter",460],[8,"Result",460],[5,"Box",461],[10,"Hasher",462],[6,"Option",463],[10,"Buf",137],[10,"RangeBounds",464],[20,"MaybeUninit",465],[6,"Result",466],[5,"TypeId",467],[5,"Arguments",460],[5,"Chain",137],[5,"Take",137],[10,"BufMut",137],[5,"Limit",137],[5,"IoSlice",468],[5,"Reader",137],[8,"Result",469],[5,"Writer",137],[10,"Debug",460],[5,"IntoIter",137],[1,"f32"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"],[5,"RangeFull",464],[5,"RangeFrom",464],[5,"RangeToInclusive",464],[5,"RangeTo",464],[5,"Range",464],[5,"RangeInclusive",464]],"b":[[40,"impl-PartialEq-for-Bytes"],[41,"impl-PartialEq%3CString%3E-for-Bytes"],[42,"impl-PartialEq%3C%5Bu8%5D%3E-for-Bytes"],[43,"impl-PartialEq%3C%26T%3E-for-Bytes"],[44,"impl-PartialEq%3Cstr%3E-for-Bytes"],[45,"impl-PartialEq%3CVec%3Cu8%3E%3E-for-Bytes"],[46,"impl-PartialEq%3CBytesMut%3E-for-Bytes"],[47,"impl-PartialEq%3C%26T%3E-for-BytesMut"],[48,"impl-PartialEq%3CString%3E-for-BytesMut"],[49,"impl-PartialEq-for-BytesMut"],[50,"impl-PartialEq%3C%5Bu8%5D%3E-for-BytesMut"],[51,"impl-PartialEq%3CBytes%3E-for-BytesMut"],[52,"impl-PartialEq%3CVec%3Cu8%3E%3E-for-BytesMut"],[53,"impl-PartialEq%3Cstr%3E-for-BytesMut"],[54,"impl-Extend%3C%26u8%3E-for-BytesMut"],[55,"impl-Extend%3Cu8%3E-for-BytesMut"],[56,"impl-Extend%3CBytes%3E-for-BytesMut"],[58,"impl-LowerHex-for-Bytes"],[59,"impl-Debug-for-Bytes"],[60,"impl-UpperHex-for-Bytes"],[61,"impl-UpperHex-for-BytesMut"],[62,"impl-Debug-for-BytesMut"],[63,"impl-LowerHex-for-BytesMut"],[65,"impl-From%3CBox%3C%5Bu8%5D%3E%3E-for-Bytes"],[66,"impl-From%3CVec%3Cu8%3E%3E-for-Bytes"],[67,"impl-From%3CBytesMut%3E-for-Bytes"],[68,"impl-From%3CString%3E-for-Bytes"],[69,"impl-From%3C%26str%3E-for-Bytes"],[70,"impl-From%3C%26%5Bu8%5D%3E-for-Bytes"],[72,"impl-From%3C%26%5Bu8%5D%3E-for-BytesMut"],[74,"impl-From%3C%26str%3E-for-BytesMut"],[76,"impl-FromIterator%3C%26u8%3E-for-BytesMut"],[77,"impl-FromIterator%3Cu8%3E-for-BytesMut"],[83,"impl-IntoIterator-for-%26Bytes"],[84,"impl-IntoIterator-for-Bytes"],[85,"impl-IntoIterator-for-%26BytesMut"],[86,"impl-IntoIterator-for-BytesMut"],[93,"impl-PartialOrd%3C%5Bu8%5D%3E-for-Bytes"],[94,"impl-PartialOrd-for-Bytes"],[95,"impl-PartialOrd%3CString%3E-for-Bytes"],[96,"impl-PartialOrd%3CVec%3Cu8%3E%3E-for-Bytes"],[97,"impl-PartialOrd%3Cstr%3E-for-Bytes"],[98,"impl-PartialOrd%3C%26T%3E-for-Bytes"],[99,"impl-PartialOrd-for-BytesMut"],[100,"impl-PartialOrd%3C%5Bu8%5D%3E-for-BytesMut"],[101,"impl-PartialOrd%3CString%3E-for-BytesMut"],[102,"impl-PartialOrd%3CVec%3Cu8%3E%3E-for-BytesMut"],[103,"impl-PartialOrd%3C%26T%3E-for-BytesMut"],[104,"impl-PartialOrd%3Cstr%3E-for-BytesMut"],[200,"impl-From%3C%26mut+%5BMaybeUninit%3Cu8%3E%5D%3E-for-%26mut+UninitSlice"],[201,"impl-From%3C%26mut+%5Bu8%5D%3E-for-%26mut+UninitSlice"],[299,"impl-Index%3CRangeFull%3E-for-UninitSlice"],[300,"impl-Index%3CRangeFrom%3Cusize%3E%3E-for-UninitSlice"],[301,"impl-Index%3CRangeToInclusive%3Cusize%3E%3E-for-UninitSlice"],[302,"impl-Index%3CRangeTo%3Cusize%3E%3E-for-UninitSlice"],[303,"impl-Index%3CRange%3Cusize%3E%3E-for-UninitSlice"],[304,"impl-Index%3CRangeInclusive%3Cusize%3E%3E-for-UninitSlice"],[305,"impl-IndexMut%3CRangeFrom%3Cusize%3E%3E-for-UninitSlice"],[306,"impl-IndexMut%3CRange%3Cusize%3E%3E-for-UninitSlice"],[307,"impl-IndexMut%3CRangeToInclusive%3Cusize%3E%3E-for-UninitSlice"],[308,"impl-IndexMut%3CRangeTo%3Cusize%3E%3E-for-UninitSlice"],[309,"impl-IndexMut%3CRangeFull%3E-for-UninitSlice"],[310,"impl-IndexMut%3CRangeInclusive%3Cusize%3E%3E-for-UninitSlice"]]}],\
["cfg_if",{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"Q","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]}],\
["chrono",{"doc":"Chrono: Date and Time for Rust","t":"PPFFKFPIEPFPEPPPFEEETTEETTPPPGFFFFEPPKRFEEEEEEPEPEPPFKKPTFPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNMNNNNNNNNMNNMNNMNNNCNNNNNMNNNNNNNNNNNNNNNNNNNNNNCNNMMMMMNNMNNNNNNNNNNNNNNNCCNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNMNNMNMNMNNMNNMNMNNMNNMNNNMNNNMNNNNNNNNNNNPPPGPFPPGPPPPPPPFFPPPPPGPPPPPPPPPPPPPPPPPPPPGPFGPPPPPPPPGFGIFPPPPGPPPPPEPPPPPPPPPPPPPPPPPPONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNOOOONOOONNNOOOHHOONNNNNNNNNNNNNNNNNNNNNCONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOFNNNNNNNNNNNNNNNNFFTTSSTTTSSFFFFFFTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFFGPKRPKFNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNMNNNMNNNMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEEEEEEEEEEEEEEEEPPKRGKPNNNNNMMNNNNNMNNMNNN","n":["April","August","Date","DateTime","Datelike","Days","December","Duration","DurationRound","February","FixedOffset","Fri","IsoWeek","January","July","June","Local","LocalResult","MAX_DATE","MAX_DATETIME","MAX_UTC","MAX_UTC","MIN_DATE","MIN_DATETIME","MIN_UTC","MIN_UTC","March","May","Mon","Month","Months","NaiveDate","NaiveDateTime","NaiveTime","NaiveWeek","November","October","Offset","Offset","OutOfRange","OutOfRangeError","ParseError","ParseMonthError","ParseResult","ParseWeekdayError","RoundingError","Sat","SecondsFormat","September","SubsecRound","Sun","Thu","TimeDelta","TimeZone","Timelike","Tue","UNIX_EPOCH","Utc","Wed","Weekday","abs","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","and_hms","and_hms_micro","and_hms_micro_opt","and_hms_milli","and_hms_milli_opt","and_hms_nano","and_hms_nano_opt","and_hms_opt","and_time","as_u32","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add_days","checked_add_months","checked_add_signed","checked_add_signed","checked_sub","checked_sub_days","checked_sub_months","checked_sub_signed","checked_sub_signed","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","date","date_naive","datetime_from_str","day","day","day","day0","day0","day0","days","default","default","default","default","div","duration_round","duration_trunc","eq","eq","eq","eq","eq","eq","eq","fix","fixed_offset","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format_with_items","format_with_items","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_i64","from_local","from_local_date","from_local_datetime","from_naive_utc_and_offset","from_offset","from_std","from_str","from_str","from_str","from_str","from_str","from_timestamp","from_timestamp_millis","from_u32","from_u64","from_u64","from_utc","from_utc","from_utc_date","from_utc_datetime","hash","hash","hash","hash","hash","hash","hash","hour","hour","hour12","hour12","hours","into","into","into","into","into","into","into","is_zero","iso_week","iso_week","iso_week","isoywd","isoywd_opt","max_value","microseconds","milliseconds","min_value","minute","minute","minutes","month","month","month","month0","month0","month0","mul","naive","naive_local","naive_local","naive_utc","naive_utc","name","nanosecond","nanosecond","nanoseconds","neg","new","new","num_days","num_days_from_ce","num_days_from_ce","num_days_from_monday","num_days_from_sunday","num_hours","num_microseconds","num_milliseconds","num_minutes","num_nanoseconds","num_seconds","num_seconds_from_midnight","num_seconds_from_midnight","num_weeks","number_from_monday","number_from_month","number_from_sunday","offset","offset","offset","offset_from_local_date","offset_from_local_datetime","offset_from_utc_date","offset_from_utc_datetime","ordinal","ordinal","ordinal","ordinal0","ordinal0","ordinal0","parse_and_remainder","parse_from_rfc2822","parse_from_rfc3339","parse_from_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pred","pred","pred","pred_opt","prelude","round","round_subsecs","second","second","seconds","signed_duration_since","signed_duration_since","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","subsec_nanos","succ","succ","succ","succ_opt","sum","sum","time","timestamp","timestamp","timestamp_micros","timestamp_micros","timestamp_millis","timestamp_millis","timestamp_millis_opt","timestamp_nanos","timestamp_nanos","timestamp_nanos_opt","timestamp_opt","timestamp_subsec_micros","timestamp_subsec_millis","timestamp_subsec_nanos","timezone","timezone","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rfc2822","to_rfc3339","to_rfc3339_opts","to_std","to_string","to_string","to_string","to_string","to_string","to_utc","trunc_subsecs","try_days","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_hours","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_milliseconds","try_minutes","try_seconds","try_weeks","type_id","type_id","type_id","type_id","type_id","type_id","type_id","weekday","weekday","weekday","weeks","with_day","with_day","with_day","with_day0","with_day0","with_day0","with_hour","with_hour","with_minute","with_minute","with_month","with_month","with_month","with_month0","with_month0","with_month0","with_nanosecond","with_nanosecond","with_ordinal","with_ordinal","with_ordinal","with_ordinal0","with_ordinal0","with_ordinal0","with_second","with_second","with_timezone","with_timezone","with_year","with_year","with_year","with_ymd_and_hms","year","year","year","year_ce","year_ce","years_since","years_since","ymd","ymd_opt","yo","yo_opt","zero","AutoSi","BadFormat","Colon","Colons","Day","DelayedFormat","Err","Error","Fixed","Fixed","Hour","Hour12","Hours","Impossible","Internal","Internal","InternalFixed","InternalNumeric","Invalid","IsoWeek","IsoYear","IsoYearDiv100","IsoYearMod100","Item","Literal","LongMonthName","LongWeekdayName","LowerAmPm","Maybe","Micros","Millis","Minute","Minutes","Month","Nanos","Nanosecond","Nanosecond","Nanosecond3","Nanosecond6","Nanosecond9","None","None","NotEnough","NumDaysFromSun","Numeric","Numeric","OffsetFormat","OffsetPrecision","Ok","OptionalMinutes","OptionalMinutesAndSeconds","OptionalSeconds","Ordinal","OutOfRange","OwnedLiteral","OwnedSpace","Pad","ParseError","ParseErrorKind","ParseResult","Parsed","RFC2822","RFC3339","Second","Seconds","SecondsFormat","Secs","ShortMonthName","ShortWeekdayName","Space","Space","StrftimeItems","Timestamp","TimezoneName","TimezoneOffset","TimezoneOffsetColon","TimezoneOffsetColonZ","TimezoneOffsetDoubleColon","TimezoneOffsetTripleColon","TimezoneOffsetZ","TooLong","TooShort","UpperAmPm","WeekFromMon","WeekFromSun","WeekdayFromMon","Year","YearDiv100","YearMod100","Zero","allow_zulu","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","colons","day","default","description","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format_item","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hour_div_12","hour_mod_12","into","into","into","into","into","into","into","into","into","into","into","into","into","into","isoweek","isoyear","isoyear_div_100","isoyear_mod_100","kind","minute","month","nanosecond","new","new","new_with_offset","offset","ordinal","padding","parse","parse_and_remainder","precision","second","set_ampm","set_day","set_hour","set_hour12","set_isoweek","set_isoyear","set_isoyear_div_100","set_isoyear_mod_100","set_minute","set_month","set_nanosecond","set_offset","set_ordinal","set_second","set_timestamp","set_week_from_mon","set_week_from_sun","set_weekday","set_year","set_year_div_100","set_year_mod_100","strftime","timestamp","to_datetime","to_datetime_with_timezone","to_fixed_offset","to_naive_date","to_naive_datetime_with_offset","to_naive_time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","week_from_mon","week_from_sun","weekday","year","year_div_100","year_mod_100","StrftimeItems","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","new","next","parse","parse_to_owned","to_owned","try_from","try_into","type_id","Days","IsoWeek","MAX","MAX","MAX_DATE","MAX_DATETIME","MIN","MIN","MIN","MIN_DATE","MIN_DATETIME","NaiveDate","NaiveDateDaysIterator","NaiveDateTime","NaiveDateWeeksIterator","NaiveTime","NaiveWeek","UNIX_EPOCH","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","and_hms","and_hms_micro","and_hms_micro_opt","and_hms_milli","and_hms_milli_opt","and_hms_nano","and_hms_nano_opt","and_hms_opt","and_local_timezone","and_time","and_utc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add_days","checked_add_days","checked_add_months","checked_add_months","checked_add_offset","checked_add_signed","checked_add_signed","checked_sub_days","checked_sub_days","checked_sub_months","checked_sub_months","checked_sub_offset","checked_sub_signed","checked_sub_signed","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","date","day","day","day0","day0","days","default","default","default","duration_round","duration_trunc","eq","eq","eq","eq","eq","eq","eq","first_day","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format_with_items","format_with_items","format_with_items","from","from","from","from","from","from","from","from","from","from","from_hms","from_hms_micro","from_hms_micro_opt","from_hms_milli","from_hms_milli_opt","from_hms_nano","from_hms_nano_opt","from_hms_opt","from_isoywd","from_isoywd_opt","from_num_days_from_ce","from_num_days_from_ce_opt","from_num_seconds_from_midnight","from_num_seconds_from_midnight_opt","from_str","from_str","from_str","from_timestamp","from_timestamp_micros","from_timestamp_millis","from_timestamp_nanos","from_timestamp_opt","from_weekday_of_month","from_weekday_of_month_opt","from_ymd","from_ymd_opt","from_yo","from_yo_opt","hash","hash","hash","hash","hash","hash","hash","hour","hour","into","into","into","into","into","into","into","into","into_iter","into_iter","iso_week","iso_week","iter_days","iter_weeks","last_day","leap_year","minute","minute","month","month","month0","month0","nanosecond","nanosecond","new","new","next","next","next_back","next_back","num_seconds_from_midnight","ordinal","ordinal","ordinal0","ordinal0","overflowing_add_signed","overflowing_sub_signed","parse_and_remainder","parse_and_remainder","parse_and_remainder","parse_from_str","parse_from_str","parse_from_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pred","pred_opt","round_subsecs","round_subsecs","second","second","signed_duration_since","signed_duration_since","signed_duration_since","size_hint","size_hint","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","succ","succ_opt","time","timestamp","timestamp_micros","timestamp_millis","timestamp_nanos","timestamp_nanos_opt","timestamp_subsec_micros","timestamp_subsec_millis","timestamp_subsec_nanos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","trunc_subsecs","trunc_subsecs","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","week","week","week0","weekday","weekday","with_day","with_day","with_day0","with_day0","with_hour","with_hour","with_minute","with_minute","with_month","with_month","with_month0","with_month0","with_nanosecond","with_nanosecond","with_ordinal","with_ordinal","with_ordinal0","with_ordinal0","with_second","with_second","with_year","with_year","year","year","year","years_since","Ambiguous","FixedOffset","Local","LocalResult","None","Offset","Offset","Single","TimeZone","Utc","and_hms_micro_opt","and_hms_milli_opt","and_hms_nano_opt","and_hms_opt","and_time","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","datetime_from_str","earliest","east","east_opt","eq","eq","eq","fix","fix","fix","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_local_date","from_local_datetime","from_offset","from_offset","from_offset","from_offset","from_str","from_utc_date","from_utc_datetime","hash","hash","hash","into","into","into","into","isoywd","isoywd_opt","latest","local_minus_utc","map","now","now","offset_from_local_date","offset_from_local_date","offset_from_local_date","offset_from_local_date","offset_from_local_datetime","offset_from_local_datetime","offset_from_local_datetime","offset_from_local_datetime","offset_from_utc_date","offset_from_utc_date","offset_from_utc_date","offset_from_utc_date","offset_from_utc_datetime","offset_from_utc_datetime","offset_from_utc_datetime","offset_from_utc_datetime","single","timestamp","timestamp_micros","timestamp_millis","timestamp_millis_opt","timestamp_nanos","timestamp_opt","to_owned","to_owned","to_owned","to_owned","to_string","to_string","today","today","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","utc_minus_local","west","west_opt","with_ymd_and_hms","ymd","ymd_opt","yo","yo_opt","Date","DateTime","Datelike","FixedOffset","Local","Month","NaiveDate","NaiveDateTime","NaiveTime","Offset","SecondsFormat","SubsecRound","TimeZone","Timelike","Utc","Weekday","DurationExceedsLimit","DurationExceedsTimestamp","DurationRound","Err","RoundingError","SubsecRound","TimestampExceedsLimit","borrow","borrow_mut","clone","clone_into","description","duration_round","duration_trunc","eq","fmt","fmt","from","into","round_subsecs","to_owned","to_string","trunc_subsecs","try_from","try_into","type_id"],"q":[[0,"chrono"],[440,"chrono::format"],[774,"chrono::format::strftime"],[791,"chrono::naive"],[1128,"chrono::offset"],[1254,"chrono::prelude"],[1270,"chrono::round"],[1296,"core::time"],[1297,"core::option"],[1298,"core::clone"],[1299,"core::cmp"],[1300,"core::result"],[1301,"core::fmt"],[1302,"core::fmt"],[1303,"core::iter::traits::iterator"],[1304,"std::time"],[1305,"core::hash"],[1306,"alloc::string"],[1307,"core::any"],[1308,"core::fmt"],[1309,"core::ops::range"],[1310,"core::cmp"],[1311,"core::error"]],"d":["April","August","ISO 8601 calendar date with time zone.","ISO 8601 combined date and time with time zone.","The common set of methods for date component.","A duration in calendar days.","December","Alias of <code>TimeDelta</code>.","","February","The time zone with fixed offset, from UTC-23:59:59 to …","Friday.","","January","July","June","The local timescale.","","","","The maximum possible <code>Date</code>.","The maximum possible <code>DateTime&lt;Utc&gt;</code>.","","","The minimum possible <code>Date</code>.","The minimum possible <code>DateTime&lt;Utc&gt;</code>.","March","May","Monday.","The month of the year.","A duration in calendar months","ISO 8601 calendar date without timezone. Allows for every …","ISO 8601 combined date and time without timezone.","ISO 8601 time without timezone. Allows for the nanosecond …","","November","October","The offset from the local time to UTC.","An associated offset type. This type is used to store the …","Out of range error type used in various converting APIs","","","","","","","Saturday.","","September","","Sunday.","Thursday.","Time duration with nanosecond precision.","The time zone.","The common set of methods for time component.","Tuesday.","The Unix Epoch, 1970-01-01 00:00:00 UTC.","The UTC time zone. This is the most efficient time zone …","Wednesday.","The day of week.","Returns the <code>TimeDelta</code> as an absolute (non-negative) value.","","","","","","","","","","","","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date and given …","Returns the total number of months in the <code>Months</code> instance.","","","","","","","","","","","","","","","Add two <code>TimeDelta</code>s, returning <code>None</code> if overflow occurred.","Add a duration in <code>Days</code> to the date part of the <code>DateTime</code>.","Adds given <code>Months</code> to the current date and time.","Adds given <code>TimeDelta</code> to the current date.","Adds given <code>TimeDelta</code> to the current date and time.","Subtract two <code>TimeDelta</code>s, returning <code>None</code> if overflow …","Subtract a duration in <code>Days</code> from the date part of the …","Subtracts given <code>Months</code> from the current date and time.","Subtracts given <code>TimeDelta</code> from the current date.","Subtracts given <code>TimeDelta</code> from the current date and time.","","","","","","","","","","","","","","","","","","","","Retrieves the date component with an associated timezone.","Retrieves the date component.","Parses a string with the specified format string and …","Returns the day of month starting from 1.","","","Returns the day of month starting from 0.","","","Makes a new <code>TimeDelta</code> with the given number of days.","","","","","","","","","","","","","","","Returns the fixed offset from UTC to the local time stored.","Fix the offset from UTC to its current value, dropping the …","","Format a <code>TimeDelta</code> using the ISO 8601 format","","","","","","","","","","","Formatting (and parsing) utilities for date and time.","Formats the date with the specified format string. See the …","Formats the combined date and time per the specified …","Formats the date with the specified formatting items.","Formats the combined date and time with the specified …","Returns the argument unchanged.","Returns the argument unchanged.","Convert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …","Convert this <code>DateTime&lt;Local&gt;</code> instance into a …","Returns the argument unchanged.","","Convert this <code>DateTime&lt;Local&gt;</code> instance into a <code>DateTime&lt;Utc&gt;</code> …","Convert this <code>DateTime&lt;Utc&gt;</code> instance into a <code>DateTime&lt;Local&gt;</code> …","","Convert this <code>DateTime&lt;Utc&gt;</code> instance into a …","Convert this <code>DateTime&lt;FixedOffset&gt;</code> instance into a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Makes a new <code>DateTime</code> from a <code>NaiveDateTime</code> in <em>local</em> time …","Converts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …","Converts the local <code>NaiveDateTime</code> to the timezone-aware …","Makes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …","Reconstructs the time zone from the offset.","Creates a <code>TimeDelta</code> object from <code>std::time::Duration</code>","","","","","","Makes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …","Makes a new <code>DateTime&lt;Utc&gt;</code> from the number of non-leap …","","","Returns an <code>Option&lt;Month&gt;</code> from a i64, assuming a 1-index, …","Makes a new <code>Date</code> with given <em>UTC</em> date and offset. The local …","Makes a new <code>DateTime</code> from its components: a <code>NaiveDateTime</code> …","Converts the UTC <code>NaiveDate</code> to the local time. The UTC is …","Converts the UTC <code>NaiveDateTime</code> to the local time. The UTC …","","","","","","","","Returns the hour number from 0 to 23.","","Returns the hour number from 1 to 12 with a boolean flag, …","Returns the hour number from 1 to 12 with a boolean flag, …","Makes a new <code>TimeDelta</code> with the given number of hours.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the <code>TimeDelta</code> equals <code>TimeDelta::zero()</code>.","Returns the ISO week.","","","Makes a new <code>Date</code> from ISO week date (year and week …","Makes a new <code>Date</code> from ISO week date (year and week …","The maximum possible <code>TimeDelta</code>: <code>i64::MAX</code> milliseconds.","Makes a new <code>TimeDelta</code> with the given number of …","Makes a new <code>TimeDelta</code> with the given number of …","The minimum possible <code>TimeDelta</code>: <code>-i64::MAX</code> milliseconds.","Returns the minute number from 0 to 59.","","Makes a new <code>TimeDelta</code> with the given number of minutes.","Returns the month number starting from 1.","","","Returns the month number starting from 0.","","","","Date and time types unconcerned with timezones.","Returns a view to the naive local date.","Returns a view to the naive local datetime.","Returns a view to the naive UTC date.","Returns a view to the naive UTC datetime.","Get the name of the month","Returns the number of nanoseconds since the whole non-leap …","","Makes a new <code>TimeDelta</code> with the given number of nanoseconds.","","Makes a new <code>TimeDelta</code> with given number of seconds and …","Construct a new <code>Months</code> from a number of months","Returns the total number of whole days in the <code>TimeDelta</code>.","Counts the days in the proleptic Gregorian calendar, with …","Counts the days in the proleptic Gregorian calendar, with …","Returns a day-of-week number starting from Monday = 0.","Returns a day-of-week number starting from Sunday = 0.","Returns the total number of whole hours in the <code>TimeDelta</code>.","Returns the total number of whole microseconds in the …","Returns the total number of whole milliseconds in the …","Returns the total number of whole minutes in the <code>TimeDelta</code>.","Returns the total number of whole nanoseconds in the …","Returns the total number of whole seconds in the <code>TimeDelta</code>.","Returns the number of non-leap seconds past the last …","Returns the number of non-leap seconds past the last …","Returns the total number of whole weeks in the <code>TimeDelta</code>.","Returns a day-of-week number starting from Monday = 1. …","Returns a month-of-year number starting from January = 1.","Returns a day-of-week number starting from Sunday = 1.","The time zone, which calculates offsets from the local …","Retrieves an associated offset from UTC.","Retrieves an associated offset from UTC.","Creates the offset(s) for given local <code>NaiveDate</code> if …","Creates the offset(s) for given local <code>NaiveDateTime</code> if …","Creates the offset for given UTC <code>NaiveDate</code>. This cannot …","Creates the offset for given UTC <code>NaiveDateTime</code>. This …","Returns the day of year starting from 1.","","","Returns the day of year starting from 0.","","","Parses a string from a user-specified format into a …","Parses an RFC 2822 date-and-time string into a …","Parses an RFC 3339 date-and-time string into a …","Parses a string from a user-specified format into a …","","","Compare two DateTimes based on their true time, ignoring …","","","Makes a new <code>Date</code> for the prior date.","The previous day in the week.","The previous month.","Makes a new <code>Date</code> for the prior date.","A convenience module appropriate for glob imports (…","Functionality for rounding or truncating a <code>DateTime</code> by a …","","Returns the second number from 0 to 59.","","Makes a new <code>TimeDelta</code> with the given number of seconds.","Subtracts another <code>Date</code> from the current date. Returns a …","Subtracts another <code>DateTime</code> from the current date and time. …","","","","","","","","","","","","","","","Returns the number of nanoseconds such that …","Makes a new <code>Date</code> for the next date.","The next day in the week.","The next month.","Makes a new <code>Date</code> for the next date.","","","Retrieves the time component.","Makes a new <code>DateTime</code> from the number of non-leap seconds …","Returns the number of non-leap seconds since January 1, …","Makes a new <code>DateTime</code> from the number of non-leap …","Returns the number of non-leap-microseconds since January …","Makes a new <code>DateTime</code> from the number of non-leap …","Returns the number of non-leap-milliseconds since January …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Returns the number of non-leap-nanoseconds since January …","Returns the number of non-leap-nanoseconds since January …","Makes a new <code>DateTime</code> from the number of non-leap seconds …","Returns the number of microseconds since the last second …","Returns the number of milliseconds since the last second …","Returns the number of nanoseconds since the last second …","Retrieves an associated time zone.","Retrieves an associated time zone.","","","","","","","","Returns an RFC 2822 date and time string such as …","Returns an RFC 3339 and ISO 8601 date and time string such …","Return an RFC 3339 and ISO 8601 date and time string with …","Creates a <code>std::time::Duration</code> object from a <code>TimeDelta</code>.","","","","","","Turn this <code>DateTime</code> into a <code>DateTime&lt;Utc&gt;</code>, dropping the …","","Makes a new <code>TimeDelta</code> with the given number of days.","","","","","","","","","","Makes a new <code>TimeDelta</code> with the given number of hours.","","","","","","","","Makes a new <code>TimeDelta</code> with the given number of …","Makes a new <code>TimeDelta</code> with the given number of minutes.","Makes a new <code>TimeDelta</code> with the given number of seconds.","Makes a new <code>TimeDelta</code> with the given number of weeks.","","","","","","","","Returns the day of week.","","","Makes a new <code>TimeDelta</code> with the given number of weeks.","Makes a new value with the day of month (starting from 1) …","","Makes a new <code>DateTime</code> with the day of month (starting from …","Makes a new value with the day of month (starting from 0) …","","Makes a new <code>DateTime</code> with the day of month (starting from …","Makes a new value with the hour number changed.","Makes a new <code>DateTime</code> with the hour number changed.","Makes a new value with the minute number changed.","Makes a new <code>DateTime</code> with the minute number changed.","Makes a new value with the month number (starting from 1) …","","Makes a new <code>DateTime</code> with the month number (starting from …","Makes a new value with the month number (starting from 0) …","","Makes a new <code>DateTime</code> with the month number (starting from …","Makes a new value with nanoseconds since the whole …","Makes a new <code>DateTime</code> with nanoseconds since the whole …","Makes a new value with the day of year (starting from 1) …","","Makes a new <code>DateTime</code> with the day of year (starting from …","Makes a new value with the day of year (starting from 0) …","","Makes a new <code>DateTime</code> with the day of year (starting from …","Makes a new value with the second number changed.","Makes a new <code>DateTime</code> with the second number changed.","Changes the associated time zone. This does not change the …","Changes the associated time zone. The returned <code>DateTime</code> …","Makes a new value with the year number changed, while …","","Makes a new <code>DateTime</code> with the year number changed, while …","Make a new <code>DateTime</code> from year, month, day, time components …","Returns the year number in the calendar date.","","","Returns the absolute year number starting from 1 with a …","Returns the absolute year number starting from 1 with a …","Returns the number of whole years from the given <code>base</code> …","Retrieve the elapsed years from now to the given <code>DateTime</code>.","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","A <code>TimeDelta</code> where the stored seconds and nanoseconds are …","Automatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code> …","There was an error on the formatting string, or there were …","Colon (<code>:</code>) as separator","The separator between hours and minutes in an offset.","Day of the month (FW=PW=2).","A <em>temporary</em> object which can be used as an argument to …","Contains the error value","Issues a formatting error. Used to signal an invalid …","Fixed-format item types.","Fixed-format item.","Hour number in the 24-hour clocks (FW=PW=2).","Hour number in the 12-hour clocks (FW=PW=2).","Format offset from UTC as only hours. Not recommended, it …","There is no possible date and time value with given set of …","Internal uses only.","Internal uses only.","An opaque type representing fixed-format item types for …","An opaque type representing numeric item types for …","The input string has some invalid character sequence for …","Week number in the ISO week date (FW=PW=2).","Year in the ISO week date (FW=4, PW=∞). May accept years …","Year in the ISO week date, divided by 100 (FW=PW=2). …","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be …","A single formatting item. This is used for both formatting …","A literally printed and parsed text.","Full month names.","Full day of the week names.","AM/PM.","No separator when formatting, colon allowed when parsing.","Use fixed 6 subsecond digits. This corresponds to …","Use fixed 3 subsecond digits. This corresponds to …","The number of minutes since the last whole hour (FW=PW=2).","Format offset from UTC as hours and minutes. Any seconds …","Month (FW=PW=2).","Use fixed 9 subsecond digits. This corresponds to …","The number of nanoseconds since the last whole second …","An optional dot plus one or more digits for left-aligned …","Same as <code>Nanosecond</code> but the accuracy is fixed to 3.","Same as <code>Nanosecond</code> but the accuracy is fixed to 6.","Same as <code>Nanosecond</code> but the accuracy is fixed to 9.","No padding.","No separator","Given set of fields is not enough to make a requested date …","Day of the week, where Sunday = 0 and Saturday = 6 …","Numeric item types. They have associated formatting width …","Numeric item. Can be optionally padded to the maximal …","Type for specifying the format of UTC offsets.","The precision of an offset from UTC formatting item.","Contains the success value","Format offset from UTC as hours, and optionally with …","Format offset from UTC as hours and optionally minutes and …","Format offset from UTC as hours and minutes, and …","Day of the year (FW=PW=3).","Given field is out of permitted range.","Same as <code>Literal</code> but with the string owned by the item.","Same as <code>Space</code> but with the string owned by the item.","Padding characters for numeric items.","An error from the <code>parse</code> function.","The category of parse error","Same as <code>Result&lt;T, ParseError&gt;</code>.","Parsed parts of date and time. There are two classes of …","RFC 2822 date and time syntax. Commonly used for email and …","RFC 3339 &amp; ISO 8601 date and time syntax.","The number of seconds since the last whole minute …","Format offset from UTC as hours, minutes and seconds.","Specific formatting options for seconds. This may be …","Format whole seconds only, with no decimal point nor …","Abbreviated month names.","Abbreviated day of the week names.","Space padding.","Whitespace. Prints literally but reads zero or more …","","The number of non-leap seconds since the midnight UTC on …","Timezone name.","Same as <code>TimezoneOffsetColon</code> but prints no colon. Parsing …","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or …","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or <code>Z</code>).","Offset from the local time to UTC with seconds (<code>+09:00:00</code> …","Offset from the local time to UTC without minutes (<code>+09</code> or …","Same as <code>TimezoneOffsetColonZ</code> but prints no colon. Parsing …","All formatting items have been read but there is a …","The input string has been prematurely ended.","AM/PM.","Week number, where the week 1 starts at the first Monday …","Week number, where the week 1 starts at the first Sunday …","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","Full Gregorian year (FW=4, PW=∞). May accept years …","Gregorian year divided by 100 (century number; FW=PW=2). …","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","Zero (<code>0</code>) padding.","Represent <code>+00:00</code> as <code>Z</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Separator between hours, minutes and seconds.","Day of the month (1–28, 1–29, 1–30 or 1–31 …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to format given arguments with given formatting …","Formats single formatting item","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Hour number divided by 12 (0–1). 0 indicates AM and 1 …","Hour number modulo 12 (0–11).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ISO week number (1–52 or 1–53 depending on the year).","Year in the ISO week date.","Year in the ISO week date, divided by 100. Implies that …","Year in the ISO week date, modulo 100. Implies that the …","The category of parse error","Minute number (0–59).","Month (1–12).","The number of nanoseconds since the whole second (0–…","Makes a new <code>DelayedFormat</code> value out of local date and time.","Returns the initial value of parsed parts.","Makes a new <code>DelayedFormat</code> value out of local date and time …","Offset from the local time to UTC, in seconds.","Day of the year (1–365 or 1–366 depending on the year).","Pad the hour value to two digits.","Tries to parse given string into <code>parsed</code> with given …","Tries to parse given string into <code>parsed</code> with given …","See <code>OffsetPrecision</code>.","Second number (0–60, accounting for leap seconds).","Tries to set the <code>hour_div_12</code> field from given value. (<code>false</code>…","Tries to set the <code>day</code> field from given value.","Tries to set both <code>hour_div_12</code> and <code>hour_mod_12</code> fields from …","Tries to set the <code>hour_mod_12</code> field from given hour number …","Tries to set the <code>isoweek</code> field from given value.","Tries to set the <code>isoyear</code> field from given value.","Tries to set the <code>isoyear_div_100</code> field from given value.","Tries to set the <code>isoyear_mod_100</code> field from given value.","Tries to set the <code>minute</code> field from given value.","Tries to set the <code>month</code> field from given value.","Tries to set the <code>nanosecond</code> field from given value.","Tries to set the <code>offset</code> field from given value.","Tries to set the <code>ordinal</code> field from given value.","Tries to set the <code>second</code> field from given value.","Tries to set the <code>timestamp</code> field from given value.","Tries to set the <code>week_from_mon</code> field from given value.","Tries to set the <code>week_from_sun</code> field from given value.","Tries to set the <code>weekday</code> field from given value.","Tries to set the <code>year</code> field from given value.","Tries to set the <code>year_div_100</code> field from given value.","Tries to set the <code>year_mod_100</code> field from given value.","<code>strftime</code>/<code>strptime</code>-inspired date and time formatting syntax.","The number of non-leap seconds since the midnight UTC on …","Returns a parsed timezone-aware date and time out of given …","Returns a parsed timezone-aware date and time out of given …","Returns a parsed fixed time zone offset out of given …","Returns a parsed naive date out of given fields.","Returns a parsed naive date and time out of given fields, …","Returns a parsed naive time out of given fields.","","","","","","","","","","","","Convert items that contain a reference to the format …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Week number, where the week 1 starts at the first Monday …","Week number, where the week 1 starts at the first Sunday …","Day of the week.","Year.","Year divided by 100. Implies that the year is &gt;= 1 BCE …","Year modulo 100. Implies that the year is &gt;= 1 BCE when …","Parsing iterator for <code>strftime</code>-like format strings.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new parsing iterator from a <code>strftime</code>-like format …","","Parse format string into a <code>Vec</code> of formatting <code>Item</code>’s.","Parse format string into a <code>Vec</code> of <code>Item</code>’s that contain no …","","","","","A duration in calendar days.","ISO 8601 week.","The maximum possible <code>NaiveDate</code> (December 31, 262142 CE).","The maximum possible <code>NaiveDateTime</code>.","The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).","The maximum possible <code>NaiveDateTime</code>.","The minimum possible <code>NaiveDate</code> (January 1, 262144 BCE).","The minimum possible <code>NaiveDateTime</code>.","The earliest possible <code>NaiveTime</code>","The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).","The minimum possible <code>NaiveDateTime</code>.","ISO 8601 calendar date without timezone. Allows for every …","Iterator over <code>NaiveDate</code> with a step size of one day.","ISO 8601 combined date and time without timezone.","Iterator over <code>NaiveDate</code> with a step size of one week.","ISO 8601 time without timezone. Allows for the nanosecond …","A week represented by a <code>NaiveDate</code> and a <code>Weekday</code> which is …","The Unix Epoch, 1970-01-01 00:00:00.","","","","","","","","","","","","","","","","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Converts the <code>NaiveDateTime</code> into the timezone-aware …","Makes a new <code>NaiveDateTime</code> from the current date and given …","Converts the <code>NaiveDateTime</code> into the timezone-aware …","","","","","","","","","","","","","","","","","Add a duration in <code>Days</code> to the date","Add a duration in <code>Days</code> to the date part of the …","Add a duration in <code>Months</code> to the date","Adds given <code>Months</code> to the current date and time.","Adds given <code>FixedOffset</code> to the current datetime. Returns …","Adds the number of whole days in the given <code>TimeDelta</code> to …","Adds given <code>TimeDelta</code> to the current date and time.","Subtract a duration in <code>Days</code> from the date","Subtract a duration in <code>Days</code> from the date part of the …","Subtract a duration in <code>Months</code> from the date","Subtracts given <code>Months</code> from the current date and time.","Subtracts given <code>FixedOffset</code> from the current datetime. …","Subtracts the number of whole days in the given <code>TimeDelta</code> …","Subtracts given <code>TimeDelta</code> from the current date and time.","","","","","","","","","","","","","","","","","","","","","","Retrieves a date component.","Returns the day of month starting from 1.","Returns the day of month starting from 1.","Returns the day of month starting from 0.","Returns the day of month starting from 0.","Returns a <code>RangeInclusive&lt;T&gt;</code> representing the whole week …","","","","","","","","","","","","","Returns a date representing the first day of the week.","","","","","","","","","","","","Formats the date with the specified format string. See the …","Formats the combined date and time with the specified …","Formats the time with the specified format string. See the …","Formats the date with the specified formatting items. …","Formats the combined date and time with the specified …","Formats the time with the specified formatting items. …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>NaiveDate</code> to a <code>NaiveDateTime</code> of the same date …","Returns the argument unchanged.","Returns the argument unchanged.","Makes a new <code>NaiveTime</code> from hour, minute and second.","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute and second.","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …","Makes a new <code>NaiveDate</code> from a day’s number in the …","Makes a new <code>NaiveDate</code> from a day’s number in the …","Makes a new <code>NaiveTime</code> from the number of seconds since …","Makes a new <code>NaiveTime</code> from the number of seconds since …","","","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …","Creates a new NaiveDateTime from microseconds since the …","Creates a new NaiveDateTime from milliseconds since the …","Creates a new NaiveDateTime from nanoseconds since the …","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …","Makes a new <code>NaiveDate</code> by counting the number of …","Makes a new <code>NaiveDate</code> by counting the number of …","Makes a new <code>NaiveDate</code> from the calendar date (year, month …","Makes a new <code>NaiveDate</code> from the calendar date (year, month …","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …","","","","","","","","Returns the hour number from 0 to 23.","Returns the hour number from 0 to 23.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns an iterator that steps by days across all …","Returns an iterator that steps by weeks across all …","Returns a date representing the last day of the week.","Returns <code>true</code> if this is a leap year.","Returns the minute number from 0 to 59.","Returns the minute number from 0 to 59.","Returns the month number starting from 1.","Returns the month number starting from 1.","Returns the month number starting from 0.","Returns the month number starting from 0.","Returns the number of nanoseconds since the whole non-leap …","Returns the number of nanoseconds since the whole non-leap …","Construct a new <code>Days</code> from a number of days","Makes a new <code>NaiveDateTime</code> from date and time components. …","","","","","Returns the number of non-leap seconds past the last …","Returns the day of year starting from 1.","Returns the day of year starting from 1.","Returns the day of year starting from 0.","Returns the day of year starting from 0.","Adds given <code>TimeDelta</code> to the current time, and also returns …","Subtracts given <code>TimeDelta</code> from the current time, and also …","Parses a string from a user-specified format into a new …","Parses a string with the specified format string and …","Parses a string from a user-specified format into a new …","Parses a string with the specified format string and …","Parses a string with the specified format string and …","Parses a string with the specified format string and …","","","","","","","","Makes a new <code>NaiveDate</code> for the previous calendar date.","Makes a new <code>NaiveDate</code> for the previous calendar date.","","","Returns the second number from 0 to 59.","Returns the second number from 0 to 59.","Subtracts another <code>NaiveDate</code> from the current date. Returns …","Subtracts another <code>NaiveDateTime</code> from the current date and …","Subtracts another <code>NaiveTime</code> from the current time. Returns …","","","","","","","","","","","","","","","","","","","","","","Makes a new <code>NaiveDate</code> for the next calendar date.","Makes a new <code>NaiveDate</code> for the next calendar date.","Retrieves a time component.","Returns the number of non-leap seconds since the midnight …","Returns the number of non-leap <em>microseconds</em> since midnight …","Returns the number of non-leap <em>milliseconds</em> since midnight …","Returns the number of non-leap <em>nanoseconds</em> since midnight …","Returns the number of non-leap <em>nanoseconds</em> since midnight …","Returns the number of microseconds since the last whole …","Returns the number of milliseconds since the last whole …","Returns the number of nanoseconds since the last whole …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NaiveWeek</code> that the date belongs to, starting …","Returns the ISO week number starting from 1.","Returns the ISO week number starting from 0.","Returns the day of week.","Returns the day of week.","Makes a new <code>NaiveDate</code> with the day of month (starting from …","Makes a new <code>NaiveDateTime</code> with the day of month (starting …","Makes a new <code>NaiveDate</code> with the day of month (starting from …","Makes a new <code>NaiveDateTime</code> with the day of month (starting …","Makes a new <code>NaiveDateTime</code> with the hour number changed.","Makes a new <code>NaiveTime</code> with the hour number changed.","Makes a new <code>NaiveDateTime</code> with the minute number changed.","Makes a new <code>NaiveTime</code> with the minute number changed.","Makes a new <code>NaiveDate</code> with the month number (starting from …","Makes a new <code>NaiveDateTime</code> with the month number (starting …","Makes a new <code>NaiveDate</code> with the month number (starting from …","Makes a new <code>NaiveDateTime</code> with the month number (starting …","Makes a new <code>NaiveDateTime</code> with nanoseconds since the whole …","Makes a new <code>NaiveTime</code> with nanoseconds since the whole …","Makes a new <code>NaiveDate</code> with the day of year (starting from …","Makes a new <code>NaiveDateTime</code> with the day of year (starting …","Makes a new <code>NaiveDate</code> with the day of year (starting from …","Makes a new <code>NaiveDateTime</code> with the day of year (starting …","Makes a new <code>NaiveDateTime</code> with the second number changed.","Makes a new <code>NaiveTime</code> with the second number changed.","Makes a new <code>NaiveDate</code> with the year number changed, while …","Makes a new <code>NaiveDateTime</code> with the year number changed, …","Returns the year number in the calendar date.","Returns the year number in the calendar date.","Returns the year number for this ISO week.","Returns the number of whole years from the given <code>base</code> …","Given local time representation has multiple results and …","The time zone with fixed offset, from UTC-23:59:59 to …","The local timescale.","The conversion result from the local time to the …","Given local time representation is invalid. This can occur …","The offset from the local time to UTC.","An associated offset type. This type is used to store the …","Given local time representation has a single unique result.","The time zone.","The UTC time zone. This is the most efficient time zone …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date and given …","","","","","","","","","","","","","","","","","Parses a string with the specified format string and …","Returns <code>Some</code> for the earliest possible conversion result, …","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …","","","","Returns the fixed offset from UTC to the local time stored.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …","Converts the local <code>NaiveDateTime</code> to the timezone-aware …","Reconstructs the time zone from the offset.","","","","","Converts the UTC <code>NaiveDate</code> to the local time. The UTC is …","Converts the UTC <code>NaiveDateTime</code> to the local time. The UTC …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Makes a new <code>Date</code> from ISO week date (year and week …","Makes a new <code>Date</code> from ISO week date (year and week …","Returns <code>Some</code> for the latest possible conversion result, or …","Returns the number of seconds to add to convert from UTC …","Maps a <code>LocalResult&lt;T&gt;</code> into <code>LocalResult&lt;U&gt;</code> with given …","Returns a <code>DateTime&lt;Local&gt;</code> which corresponds to the current …","Returns a <code>DateTime&lt;Utc&gt;</code> which corresponds to the current …","Creates the offset(s) for given local <code>NaiveDate</code> if …","","","","Creates the offset(s) for given local <code>NaiveDateTime</code> if …","","","","Creates the offset for given UTC <code>NaiveDate</code>. This cannot …","","","","Creates the offset for given UTC <code>NaiveDateTime</code>. This …","","","","Returns <code>Some</code> only when the conversion result is unique, or …","Makes a new <code>DateTime</code> from the number of non-leap seconds …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap seconds …","","","","","","","Returns a <code>Date</code> which corresponds to the current date.","Returns a <code>Date</code> which corresponds to the current date.","","","","","","","","","","","","","Returns the single unique conversion result, or panics …","Returns the number of seconds to add to convert from the …","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …","Make a new <code>DateTime</code> from year, month, day, time components …","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","","","","","","","","","","","","","","","","","Error when <code>TimeDelta.num_nanoseconds</code> exceeds the limit.","Error when the TimeDelta exceeds the TimeDelta from or …","Extension trait for rounding or truncating a DateTime by a …","Error that can occur in rounding or truncating","An error from rounding by <code>TimeDelta</code>","Extension trait for subsecond rounding or truncation to a …","Error when <code>DateTime.timestamp_nanos</code> exceeds the limit.","","","","","","Return a copy rounded by TimeDelta.","Return a copy truncated by TimeDelta.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return a copy rounded to the specified number of subsecond …","","","Return a copy truncated to the specified number of …","","",""],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],[[[2,[-1]],1],[[2,[-1]]],3],[[[4,[-1]],5],-2,3,[]],[[[4,[-1]],6],[[4,[-1]]],3],[[[4,[-1]],7],[[4,[-1]]],3],[[[4,[-1]],8],-2,3,[]],[[[4,[-1]],1],[[4,[-1]]],3],[[1,1],9],[[[2,[-1]],1],9,3],[[[4,[-1]],6],9,3],[[[4,[-1]],1],9,3],[[[2,[-1]],10,10,10],[[4,[-1]]],3],[[[2,[-1]],10,10,10,10],[[4,[-1]]],3],[[[2,[-1]],10,10,10,10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],10,10,10,10],[[4,[-1]]],3],[[[2,[-1]],10,10,10,10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],10,10,10,10],[[4,[-1]]],3],[[[2,[-1]],10,10,10,10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],10,10,10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],12],[[11,[[4,[-1]]]]],3],[5,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],[[11,[1]]]],[[[4,[-1]],8],[[11,[[4,[-1]]]]],3],[[[4,[-1]],5],[[11,[[4,[-1]]]]],3],[[[2,[-1]],1],[[11,[[2,[-1]]]]],3],[[[4,[-1]],1],[[11,[[4,[-1]]]]],3],[[1,1],[[11,[1]]]],[[[4,[-1]],8],[[11,[[4,[-1]]]]],3],[[[4,[-1]],5],[[11,[[4,[-1]]]]],3],[[[2,[-1]],1],[[11,[[2,[-1]]]]],3],[[[4,[-1]],1],[[11,[[4,[-1]]]]],3],[1,1],[[[2,[-1]]],[[2,[-1]]],[13,3]],[[[4,[-1]]],[[4,[-1]]],[13,3]],[14,14],[15,15],[5,5],[16,16],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[1,1],17],[[[2,[-1]],[2,[-1]]],17,3],[[[4,[-1]],[4,[-1]]],17,3],[[15,15],17],[[5,5],17],[[[4,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],18,3],[[[3,[],[[19,[-1]]]],20,20],[[21,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[23,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[23,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[24,1],[[],1],[[],[[4,[25]]]],[[],[[4,[26]]]],[[],[[4,[7]]]],[[1,27],1],[[[4,[-1]],1],[[28,[[4,[-1]],-2]]],3,[]],[[[4,[-1]],1],[[28,[[4,[-1]],-2]]],3,[]],[[1,1],29],[[[2,[-1]],[2,[-2]]],29,3,3],[[[4,[-1]],[4,[-2]]],29,3,3],[[14,14],29],[[15,15],29],[[5,5],29],[[16,16],29],[22,7],[[[4,[-1]]],[[4,[7]]],3],[[1,30],31],[[1,30],31],[[[2,[-1]],30],31,3],[[[2,[-1]],30],31,3],[[[4,[-1]],30],31,3],[[[4,[-1]],30],31,3],[[14,30],31],[[14,30],31],[[15,30],31],[[5,30],31],[[16,30],31],[[16,30],31],0,[[[2,[-1]],20],[[33,[32]]],3],[[[4,[-1]],20],[[33,[32]]],3],[[[2,[-1]],-3],[[33,[-3]]],3,[[35,[34]]],[[37,[],[[36,[-2]]]],13]],[[[4,[-1]],-3],[[33,[-3]]],3,[[35,[34]]],[[37,[],[[36,[-2]]]],13]],[-1,-1,[]],[-1,-1,[]],[[[4,[7]]],[[4,[26]]]],[[[4,[26]]],[[4,[7]]]],[-1,-1,[]],[38,[[4,[25]]]],[[[4,[26]]],[[4,[25]]]],[[[4,[25]]],[[4,[26]]]],[38,[[4,[26]]]],[[[4,[25]]],[[4,[7]]]],[[[4,[7]]],[[4,[25]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[24,[[11,[14]]]],[24,[[11,[15]]]],[39,[[4,[-1]]],3],[[[3,[],[[19,[-1]]]],18],[[40,[[2,[[3,[],[[19,[-1]]]]]]]]],22],[[[3,[],[[19,[-1]]]],39],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[39,[[4,[-1]]],3],[-1,[[3,[],[[19,[-1]]]]],22],[6,[[28,[1,0]]]],[20,[[21,[[4,[26]]]]]],[20,[[21,[[4,[7]]]]]],[20,[[21,[[4,[25]]]]]],[20,[[28,[14,-1]]],[]],[20,[[28,[15,-1]]],[]],[[24,10],[[11,[[4,[25]]]]]],[24,[[11,[[4,[25]]]]]],[10,[[11,[15]]]],[41,[[11,[14]]]],[41,[[11,[15]]]],[18,[[2,[-1]]],3],[39,[[4,[-1]]],3],[[[3,[],[[19,[-1]]]],18],[[2,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],39],[[4,[[3,[],[[19,[-1]]]]]]],22],[[1,-1],9,42],[[[2,[-1]],-2],9,3,42],[[[4,[-1]],-2],9,3,42],[[14,-1],9,42],[[15,-1],9,42],[[5,-1],9,42],[[16,-1],9,42],[43,10],[[[4,[-1]]],10,3],[43,[[9,[29,10]]]],[43,[[9,[29,10]]]],[24,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,29],[23,44],[[[2,[-1]]],44,3],[[[4,[-1]]],44,3],[[[3,[],[[19,[-1]]]],27,10,14],[[2,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],27,10,14],[[40,[[2,[[3,[],[[19,[-1]]]]]]]]],22],[[],1],[24,1],[24,1],[[],1],[43,10],[[[4,[-1]]],10,3],[24,1],[23,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[23,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[[1,27],1],0,[[[2,[-1]]],18,3],[[[4,[-1]]],39,3],[[[2,[-1]]],18,3],[[[4,[-1]]],39,3],[15,20],[43,10],[[[4,[-1]]],10,3],[24,1],[1,1],[[24,10],[[11,[1]]]],[10,5],[1,24],[23,27],[23,27],[14,10],[14,10],[1,24],[1,[[11,[24]]]],[1,24],[1,24],[1,[[11,[24]]]],[1,24],[43,10],[43,10],[1,24],[14,10],[15,10],[14,10],0,[[[2,[-1]]],[],3],[[[4,[-1]]],[],3],[[[3,[],[[19,[-1]]]],18],[[40,[-1]]],22],[[[3,[],[[19,[-1]]]],39],[[40,[-1]]],22],[[[3,[],[[19,[-1]]]],18],-1,22],[[[3,[],[[19,[-1]]]],39],-1,22],[23,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[23,10],[[[2,[-1]]],10,3],[[[4,[-1]]],10,3],[[20,20],[[21,[[9,[[4,[7]],20]]]]]],[20,[[21,[[4,[7]]]]]],[20,[[21,[[4,[7]]]]]],[[20,20],[[21,[[4,[7]]]]]],[[1,1],[[11,[17]]]],[[[2,[-1]],[2,[-1]]],[[11,[17]]],3],[[[4,[-1]],[4,[-2]]],[[11,[17]]],3,3],[[15,15],[[11,[17]]]],[[5,5],[[11,[17]]]],[[[2,[-1]]],[[2,[-1]]],3],[14,14],[15,15],[[[2,[-1]]],[[11,[[2,[-1]]]]],3],0,0,[[-1,45],-2,[],[]],[43,10],[[[4,[-1]]],10,3],[24,1],[[[2,[-1]],[2,[-2]]],1,3,3],[[[4,[-1]],-3],1,3,3,[[35,[[4,[-2]]]]]],[[1,1],1],[[[2,[-1]],1],[[2,[-1]]],3],[[[2,[-1]],[2,[-1]]],1,3],[[[4,[-1]],[4,[-1]]],1,3],[[[4,[-1]],7],[[4,[-1]]],3],[[[4,[-1]],1],[[4,[-1]]],3],[[[4,[-1]],8],-2,3,[]],[[[4,[-1]],[4,[-1]]],1,3],[[[4,[-1]],5],-2,3,[]],[[[4,[-1]],6],[[4,[-1]]],3],[[1,1],9],[[[2,[-1]],1],9,3],[[[4,[-1]],6],9,3],[[[4,[-1]],1],9,3],[1,27],[[[2,[-1]]],[[2,[-1]]],3],[14,14],[15,15],[[[2,[-1]]],[[11,[[2,[-1]]]]],3],[-1,1,[[37,[],[[36,[1]]]]]],[-1,1,[[37,[],[[36,[1]]]]]],[[[4,[-1]]],12,3],[[[3,[],[[19,[-1]]]],24,10],[[4,[[3,[],[[19,[-1]]]]]]],22],[[[4,[-1]]],24,3],[[[3,[],[[19,[-1]]]],24],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[[[4,[-1]]],24,3],[[[3,[],[[19,[-1]]]],24],[[4,[[3,[],[[19,[-1]]]]]]],22],[[[4,[-1]]],24,3],[[[3,[],[[19,[-1]]]],24],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[[[3,[],[[19,[-1]]]],24],[[4,[[3,[],[[19,[-1]]]]]]],22],[[[4,[-1]]],24,3],[[[4,[-1]]],[[11,[24]]],3],[[[3,[],[[19,[-1]]]],24,10],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[[[4,[-1]]],10,3],[[[4,[-1]]],10,3],[[[4,[-1]]],10,3],[[[2,[-1]]],-1,3],[[[4,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],46,3],[[[4,[-1]]],46,3],[[[4,[-1]],47,29],46,3],[1,[[28,[6,0]]]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[[4,[-1]]],[[4,[25]]],3],[[-1,45],-2,[],[]],[24,[[11,[1]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[48,[[28,[14,-1]]],[]],[-1,[[28,[-2]]],[],[]],[48,[[28,[15,-1]]],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[24,[[11,[1]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[24,[[11,[1]]]],[24,[[11,[1]]]],[24,[[11,[1]]]],[24,[[11,[1]]]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[23,14],[[[2,[-1]]],14,3],[[[4,[-1]]],14,3],[24,1],[[23,10],[[11,[23]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[23,10],[[11,[23]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[43,10],[[11,[43]]]],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[43,10],[[11,[43]]]],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[23,10],[[11,[23]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[23,10],[[11,[23]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[43,10],[[11,[43]]]],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[23,10],[[11,[23]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[23,10],[[11,[23]]]],[[[2,[-1]],10],[[11,[[2,[-1]]]]],3],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[43,10],[[11,[43]]]],[[[4,[-1]],10],[[11,[[4,[-1]]]]],3],[[[2,[-1]],-2],[[2,[-2]]],3,3],[[[4,[-1]],-2],[[4,[-2]]],3,3],[[23,27],[[11,[23]]]],[[[2,[-1]],27],[[11,[[2,[-1]]]]],3],[[[4,[-1]],27],[[11,[[4,[-1]]]]],3],[[[3,[],[[19,[-1]]]],27,10,10,10,10,10],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[23,27],[[[2,[-1]]],27,3],[[[4,[-1]]],27,3],[23,[[9,[29,10]]]],[23,[[9,[29,10]]]],[[[2,[-1]],[2,[-1]]],[[11,[10]]],3],[[[4,[-1]],[4,[-1]]],[[11,[10]]],3],[[[3,[],[[19,[-1]]]],27,10,10],[[2,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],27,10,10],[[40,[[2,[[3,[],[[19,[-1]]]]]]]]],22],[[[3,[],[[19,[-1]]]],27,10],[[2,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],27,10],[[40,[[2,[[3,[],[[19,[-1]]]]]]]]],22],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[47,47],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[34,34],[59,59],[60,60],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[],50],[59,20],[[47,47],29],[[50,50],29],[[51,51],29],[[52,52],29],[[53,53],29],[[54,54],29],[[55,55],29],[[56,56],29],[[57,57],29],[[58,58],29],[[34,34],29],[[59,59],29],[[60,60],29],[[[33,[-2]],30],31,[[35,[34]]],[[37,[],[[36,[-1]]]],13]],[[[33,[-1]],30],31,61],[[47,30],31],[[50,30],31],[[51,30],31],[[52,30],31],[[53,30],31],[[54,30],31],[[55,30],31],[[56,30],31],[[57,30],31],[[58,30],31],[[34,30],31],[[59,30],31],[[59,30],31],[[60,30],31],[[30,[11,[18]],[11,[12]],[11,[[9,[46,7]]]],-2],31,[[35,[34]]],[[37,[],[[36,[-1]]]],13]],[[30,[11,[18]],[11,[12]],[11,[[9,[46,7]]]],34],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[47,-1],9,42],[[50,-1],9,42],[[51,-1],9,42],[[52,-1],9,42],[[53,-1],9,42],[[54,-1],9,42],[[55,-1],9,42],[[56,-1],9,42],[[57,-1],9,42],[[58,-1],9,42],[[34,-1],9,42],[[59,-1],9,42],[[60,-1],9,42],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[59,60],0,0,0,[[[11,[18]],[11,[12]],-2],[[33,[-2]]],[[35,[34]]],[[37,[],[[36,[-1]]]],13]],[[],50],[[[11,[18]],[11,[12]],-1,-3],[[33,[-3]]],[22,62],[[35,[34]]],[[37,[],[[36,[-2]]]],13]],0,0,0,[[50,20,-2],[[21,[9]]],[[35,[34]]],[[37,[],[[36,[-1]]]]]],[[50,20,-2],[[21,[20]]],[[35,[34]]],[[37,[],[[36,[-1]]]]]],0,0,[[50,29],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,14],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],[[50,24],[[21,[9]]]],0,0,[50,[[21,[[4,[7]]]]]],[[50,-1],[[21,[[4,[-1]]]]],3],[50,[[21,[7]]]],[50,[[21,[18]]]],[[50,27],[[21,[39]]]],[50,[[21,[12]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[34,34],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[[-1,-2],9,[],[]],[[32,30],31],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,32],[32,[[11,[34]]]],[32,[[28,[[63,[34]],59]]]],[32,[[28,[[63,[34]],59]]]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,49,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[18,5],-1,[]],[[18,8],-1,[]],[[18,1],18],[[39,1],39],[[39,6],39],[[39,7],39],[[39,5],-1,[]],[[39,8],-1,[]],[[12,7],12],[[12,1],12],[[12,6],12],[[18,1],9],[[39,1],9],[[39,6],9],[[12,6],9],[[12,1],9],[[18,10,10,10],39],[[18,10,10,10,10],39],[[18,10,10,10,10],[[11,[39]]]],[[18,10,10,10,10],39],[[18,10,10,10,10],[[11,[39]]]],[[18,10,10,10,10],39],[[18,10,10,10,10],[[11,[39]]]],[[18,10,10,10],[[11,[39]]]],[[39,-1],[[40,[[4,[-1]]]]],3],[[18,12],39],[39,[[4,[25]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[18,8],[[11,[18]]]],[[39,8],[[11,[39]]]],[[18,5],[[11,[18]]]],[[39,5],[[11,[39]]]],[[39,7],[[11,[39]]]],[[18,1],[[11,[18]]]],[[39,1],[[11,[39]]]],[[18,8],[[11,[18]]]],[[39,8],[[11,[39]]]],[[18,5],[[11,[18]]]],[[39,5],[[11,[39]]]],[[39,7],[[11,[39]]]],[[18,1],[[11,[18]]]],[[39,1],[[11,[39]]]],[8,8],[18,18],[64,64],[65,65],[39,39],[44,44],[12,12],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[8,8],17],[[18,18],17],[[64,64],17],[[65,65],17],[[39,39],17],[[44,44],17],[[12,12],17],[39,18],[18,10],[39,10],[18,10],[39,10],[66,[[67,[18]]]],[[],18],[[],39],[[],12],[[39,1],[[28,[39,-1]]],[]],[[39,1],[[28,[39,-1]]],[]],[[8,8],29],[[18,18],29],[[64,64],29],[[65,65],29],[[39,39],29],[[44,44],29],[[12,12],29],[66,18],[[66,30],31],[[8,30],31],[[18,30],31],[[18,30],31],[[64,30],31],[[65,30],31],[[39,30],31],[[39,30],31],[[44,30],31],[[12,30],31],[[12,30],31],[[18,20],[[33,[32]]]],[[39,20],[[33,[32]]]],[[12,20],[[33,[32]]]],[[18,-2],[[33,[-2]]],[[35,[34]]],[[37,[],[[36,[-1]]]],13]],[[39,-2],[[33,[-2]]],[[35,[34]]],[[37,[],[[36,[-1]]]],13]],[[12,-2],[[33,[-2]]],[[35,[34]]],[[37,[],[[36,[-1]]]],13]],[-1,-1,[]],[-1,-1,[]],[39,18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[18,39],[-1,-1,[]],[-1,-1,[]],[[10,10,10],12],[[10,10,10,10],12],[[10,10,10,10],[[11,[12]]]],[[10,10,10,10],12],[[10,10,10,10],[[11,[12]]]],[[10,10,10,10],12],[[10,10,10,10],[[11,[12]]]],[[10,10,10],[[11,[12]]]],[[27,10,14],18],[[27,10,14],[[11,[18]]]],[27,18],[27,[[11,[18]]]],[[10,10],12],[[10,10],[[11,[12]]]],[20,[[21,[18]]]],[20,[[21,[39]]]],[20,[[21,[12]]]],[[24,10],39],[24,[[11,[39]]]],[24,[[11,[39]]]],[24,[[11,[39]]]],[[24,10],[[11,[39]]]],[[27,10,14,48],18],[[27,10,14,48],[[11,[18]]]],[[27,10,10],18],[[27,10,10],[[11,[18]]]],[[27,10],18],[[27,10],[[11,[18]]]],[[8,-1],9,42],[[18,-1],9,42],[[64,-1],9,42],[[65,-1],9,42],[[39,-1],9,42],[[44,-1],9,42],[[12,-1],9,42],[39,10],[12,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,44],[39,44],[18,64],[18,65],[66,18],[18,29],[39,10],[12,10],[18,10],[39,10],[18,10],[39,10],[39,10],[12,10],[41,8],[[18,12],39],[64,[[11,[-1]]],[]],[65,[[11,[-1]]],[]],[64,[[11,[-1]]],[]],[65,[[11,[-1]]],[]],[12,10],[18,10],[39,10],[18,10],[39,10],[[12,1],[[9,[12,24]]]],[[12,1],[[9,[12,24]]]],[[20,20],[[21,[[9,[18,20]]]]]],[[20,20],[[21,[[9,[39,20]]]]]],[[20,20],[[21,[[9,[12,20]]]]]],[[20,20],[[21,[18]]]],[[20,20],[[21,[39]]]],[[20,20],[[21,[12]]]],[[8,8],[[11,[17]]]],[[18,18],[[11,[17]]]],[[64,64],[[11,[17]]]],[[65,65],[[11,[17]]]],[[39,39],[[11,[17]]]],[[44,44],[[11,[17]]]],[[12,12],[[11,[17]]]],[18,18],[18,[[11,[18]]]],[[-1,45],-2,[],[]],[[-1,45],-2,[],[]],[39,10],[12,10],[[18,18],1],[[39,39],1],[[12,12],1],[64,[[9,[68,[11,[68]]]]]],[65,[[9,[68,[11,[68]]]]]],[[18,5],-1,[]],[[18,18],1],[[18,1],18],[[18,8],-1,[]],[[39,8],-1,[]],[[39,6],39],[[39,5],-1,[]],[[39,39],1],[[39,7],39],[[39,1],39],[[12,1],12],[[12,12],1],[[12,6],12],[[12,7],12],[[18,1],9],[[39,6],9],[[39,1],9],[[12,6],9],[[12,1],9],[18,18],[18,[[11,[18]]]],[39,12],[39,24],[39,24],[39,24],[39,24],[39,[[11,[24]]]],[39,10],[39,10],[39,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[[-1,45],-2,[],[]],[[-1,45],-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[[18,14],66],[44,10],[44,10],[18,14],[39,14],[[18,10],[[11,[18]]]],[[39,10],[[11,[39]]]],[[18,10],[[11,[18]]]],[[39,10],[[11,[39]]]],[[39,10],[[11,[39]]]],[[12,10],[[11,[12]]]],[[39,10],[[11,[39]]]],[[12,10],[[11,[12]]]],[[18,10],[[11,[18]]]],[[39,10],[[11,[39]]]],[[18,10],[[11,[18]]]],[[39,10],[[11,[39]]]],[[39,10],[[11,[39]]]],[[12,10],[[11,[12]]]],[[18,10],[[11,[18]]]],[[39,10],[[11,[39]]]],[[18,10],[[11,[18]]]],[[39,10],[[11,[39]]]],[[39,10],[[11,[39]]]],[[12,10],[[11,[12]]]],[[18,27],[[11,[18]]]],[[39,27],[[11,[39]]]],[18,27],[39,27],[44,27],[[18,18],[[11,[10]]]],0,0,0,0,0,0,0,0,0,0,[[[40,[[2,[-1]]]],10,10,10,10],[[40,[[4,[-1]]]]],3],[[[40,[[2,[-1]]]],10,10,10,10],[[40,[[4,[-1]]]]],3],[[[40,[[2,[-1]]]],10,10,10,10],[[40,[[4,[-1]]]]],3],[[[40,[[2,[-1]]]],10,10,10],[[40,[[4,[-1]]]]],3],[[[40,[[2,[-1]]]],12],[[40,[[4,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[26,26],[25,25],[[[40,[-1]]],[[40,[-1]]],13],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[3,[],[[19,[-1]]]],20,20],[[21,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[[[40,[-1]]],[[11,[-1]]],[]],[27,7],[27,[[11,[7]]]],[[7,7],29],[[25,25],29],[[[40,[-1]],[40,[-1]]],29,69],[22,7],[7,7],[25,7],[[7,30],31],[[7,30],31],[[26,30],31],[[25,30],31],[[25,30],31],[[[40,[-1]],30],31,61],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[3,[],[[19,[-1]]]],18],[[40,[[2,[[3,[],[[19,[-1]]]]]]]]],22],[[[3,[],[[19,[-1]]]],39],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[-1,[[3,[],[[19,[-1]]]]],22],[7,7],[7,26],[25,25],[20,[[28,[7,-1]]],[]],[[[3,[],[[19,[-1]]]],18],[[2,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],39],[[4,[[3,[],[[19,[-1]]]]]]],22],[[7,-1],9,42],[[25,-1],9,42],[[[40,[-1]],-2],9,70,42],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[3,[],[[19,[-1]]]],27,10,14],[[2,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],27,10,14],[[40,[[2,[[3,[],[[19,[-1]]]]]]]]],22],[[[40,[-1]]],[[11,[-1]]],[]],[7,27],[[[40,[-1]],-3],[[40,[-2]]],[],[],[[72,[-1],[[71,[-2]]]]]],[[],[[4,[26]]]],[[],[[4,[25]]]],[[[3,[],[[19,[-1]]]],18],[[40,[-1]]],22],[[7,18],[[40,[7]]]],[[26,18],[[40,[7]]]],[[25,18],[[40,[25]]]],[[[3,[],[[19,[-1]]]],39],[[40,[-1]]],22],[[7,39],[[40,[7]]]],[[26,39],[[40,[7]]]],[[25,39],[[40,[25]]]],[[[3,[],[[19,[-1]]]],18],-1,22],[[7,18],7],[[26,18],7],[[25,18],25],[[[3,[],[[19,[-1]]]],39],-1,22],[[7,39],7],[[26,39],7],[[25,39],25],[[[40,[-1]]],[[11,[-1]]],[]],[[[3,[],[[19,[-1]]]],24,10],[[4,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],24],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[[[3,[],[[19,[-1]]]],24],[[4,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],24],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[[[3,[],[[19,[-1]]]],24],[[4,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],24,10],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[[],[[2,[26]]]],[[],[[2,[25]]]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[[[40,[-1]]],-1,61],[7,27],[27,7],[27,[[11,[7]]]],[[[3,[],[[19,[-1]]]],27,10,10,10,10,10],[[40,[[4,[[3,[],[[19,[-1]]]]]]]]],22],[[[3,[],[[19,[-1]]]],27,10,10],[[2,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],27,10,10],[[40,[[2,[[3,[],[[19,[-1]]]]]]]]],22],[[[3,[],[[19,[-1]]]],27,10],[[2,[[3,[],[[19,[-1]]]]]]],22],[[[3,[],[[19,[-1]]]],27,10],[[40,[[2,[[3,[],[[19,[-1]]]]]]]]],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[73,73],[[-1,-2],9,[],[]],[73,20],[[[75,[],[[74,[-1]]]],1],[[28,[[75,[],[[74,[-1]]]],-1]]],76],[[[75,[],[[74,[-1]]]],1],[[28,[[75,[],[[74,[-1]]]],-1]]],76],[[73,73],29],[[73,30],31],[[73,30],31],[-1,-1,[]],[-1,-2,[],[]],[[77,45],77],[-1,-2,[],[]],[-1,46,[]],[[77,45],77],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,49,[]]],"c":[2,72,73,75,77,125,127,185,186,202,203,228,229,295,322,329,333,337,435,436,437,438,618,619,795,796,800,801,825,826,828,830,933,934,936,938,941,943,945,950,955,957,959,1020,1050,1056,1159,1161,1179,1186,1195,1196,1219,1221,1231,1232,1247,1250,1251,1252,1253],"p":[[5,"TimeDelta",0],[5,"Date",0],[10,"TimeZone",0],[5,"DateTime",0],[5,"Months",0],[5,"Duration",1296],[5,"FixedOffset",1128],[5,"Days",791],[1,"tuple"],[1,"u32"],[6,"Option",1297],[5,"NaiveTime",791],[10,"Clone",1298],[6,"Weekday",0],[6,"Month",0],[5,"OutOfRange",0],[6,"Ordering",1299],[5,"NaiveDate",791],[17,"Offset"],[1,"str"],[8,"ParseResult",440],[10,"Offset",0],[10,"Datelike",0],[1,"i64"],[5,"Utc",1128],[5,"Local",1128],[1,"i32"],[6,"Result",1300],[1,"bool"],[5,"Formatter",1301],[8,"Result",1301],[5,"StrftimeItems",774],[5,"DelayedFormat",440],[6,"Item",440],[10,"Borrow",1302],[17,"Item"],[10,"Iterator",1303],[5,"SystemTime",1304],[5,"NaiveDateTime",791],[6,"LocalResult",1128],[1,"u64"],[10,"Hasher",1305],[10,"Timelike",0],[5,"IsoWeek",791],[1,"u16"],[5,"String",1306],[6,"SecondsFormat",440],[1,"u8"],[5,"TypeId",1307],[5,"Parsed",440],[6,"Pad",440],[6,"Numeric",440],[5,"InternalNumeric",440],[6,"Fixed",440],[5,"InternalFixed",440],[5,"OffsetFormat",440],[6,"OffsetPrecision",440],[6,"Colons",440],[5,"ParseError",440],[6,"ParseErrorKind",440],[10,"Debug",1301],[10,"Display",1301],[5,"Vec",1308],[5,"NaiveDateDaysIterator",791],[5,"NaiveDateWeeksIterator",791],[5,"NaiveWeek",791],[5,"RangeInclusive",1309],[1,"usize"],[10,"PartialEq",1299],[10,"Hash",1305],[17,"Output"],[10,"FnMut",1310],[6,"RoundingError",1270],[17,"Err"],[10,"DurationRound",1270],[10,"Error",1311],[10,"SubsecRound",1270]],"b":[[63,"impl-Add%3CMonths%3E-for-DateTime%3CTz%3E"],[64,"impl-Add%3CDuration%3E-for-DateTime%3CTz%3E"],[65,"impl-Add%3CFixedOffset%3E-for-DateTime%3CTz%3E"],[66,"impl-Add%3CDays%3E-for-DateTime%3CTz%3E"],[67,"impl-Add%3CTimeDelta%3E-for-DateTime%3CTz%3E"],[70,"impl-AddAssign%3CDuration%3E-for-DateTime%3CTz%3E"],[71,"impl-AddAssign%3CTimeDelta%3E-for-DateTime%3CTz%3E"],[136,"impl-Default-for-DateTime%3CUtc%3E"],[137,"impl-Default-for-DateTime%3CLocal%3E"],[138,"impl-Default-for-DateTime%3CFixedOffset%3E"],[151,"impl-Debug-for-TimeDelta"],[152,"impl-Display-for-TimeDelta"],[153,"impl-Display-for-Date%3CTz%3E"],[154,"impl-Debug-for-Date%3CTz%3E"],[155,"impl-Debug-for-DateTime%3CTz%3E"],[156,"impl-Display-for-DateTime%3CTz%3E"],[157,"impl-Debug-for-Weekday"],[158,"impl-Display-for-Weekday"],[161,"impl-Debug-for-OutOfRange"],[162,"impl-Display-for-OutOfRange"],[170,"impl-From%3CDateTime%3CFixedOffset%3E%3E-for-DateTime%3CLocal%3E"],[171,"impl-From%3CDateTime%3CLocal%3E%3E-for-DateTime%3CFixedOffset%3E"],[173,"impl-From%3CSystemTime%3E-for-DateTime%3CUtc%3E"],[174,"impl-From%3CDateTime%3CLocal%3E%3E-for-DateTime%3CUtc%3E"],[175,"impl-From%3CDateTime%3CUtc%3E%3E-for-DateTime%3CLocal%3E"],[176,"impl-From%3CSystemTime%3E-for-DateTime%3CLocal%3E"],[177,"impl-From%3CDateTime%3CUtc%3E%3E-for-DateTime%3CFixedOffset%3E"],[178,"impl-From%3CDateTime%3CFixedOffset%3E%3E-for-DateTime%3CUtc%3E"],[191,"impl-FromStr-for-DateTime%3CLocal%3E"],[192,"impl-FromStr-for-DateTime%3CFixedOffset%3E"],[193,"impl-FromStr-for-DateTime%3CUtc%3E"],[308,"impl-Sub%3CTimeDelta%3E-for-Date%3CTz%3E"],[309,"impl-Sub-for-Date%3CTz%3E"],[310,"impl-Sub-for-DateTime%3CTz%3E"],[311,"impl-Sub%3CFixedOffset%3E-for-DateTime%3CTz%3E"],[312,"impl-Sub%3CTimeDelta%3E-for-DateTime%3CTz%3E"],[313,"impl-Sub%3CDays%3E-for-DateTime%3CTz%3E"],[314,"impl-Sub%3C%26DateTime%3CTz%3E%3E-for-DateTime%3CTz%3E"],[315,"impl-Sub%3CMonths%3E-for-DateTime%3CTz%3E"],[316,"impl-Sub%3CDuration%3E-for-DateTime%3CTz%3E"],[319,"impl-SubAssign%3CDuration%3E-for-DateTime%3CTz%3E"],[320,"impl-SubAssign%3CTimeDelta%3E-for-DateTime%3CTz%3E"],[326,"impl-Sum%3C%26TimeDelta%3E-for-TimeDelta"],[327,"impl-Sum-for-TimeDelta"],[602,"impl-Display-for-DelayedFormat%3CI%3E"],[603,"impl-Debug-for-DelayedFormat%3CI%3E"],[615,"impl-Display-for-ParseError"],[616,"impl-Debug-for-ParseError"],[809,"impl-Add%3CMonths%3E-for-NaiveDate"],[810,"impl-Add%3CDays%3E-for-NaiveDate"],[811,"impl-Add%3CTimeDelta%3E-for-NaiveDate"],[812,"impl-Add%3CTimeDelta%3E-for-NaiveDateTime"],[813,"impl-Add%3CDuration%3E-for-NaiveDateTime"],[814,"impl-Add%3CFixedOffset%3E-for-NaiveDateTime"],[815,"impl-Add%3CMonths%3E-for-NaiveDateTime"],[816,"impl-Add%3CDays%3E-for-NaiveDateTime"],[817,"impl-Add%3CFixedOffset%3E-for-NaiveTime"],[818,"impl-Add%3CTimeDelta%3E-for-NaiveTime"],[819,"impl-Add%3CDuration%3E-for-NaiveTime"],[821,"impl-AddAssign%3CTimeDelta%3E-for-NaiveDateTime"],[822,"impl-AddAssign%3CDuration%3E-for-NaiveDateTime"],[823,"impl-AddAssign%3CDuration%3E-for-NaiveTime"],[824,"impl-AddAssign%3CTimeDelta%3E-for-NaiveTime"],[908,"impl-Display-for-NaiveDate"],[909,"impl-Debug-for-NaiveDate"],[912,"impl-Debug-for-NaiveDateTime"],[913,"impl-Display-for-NaiveDateTime"],[915,"impl-Display-for-NaiveTime"],[916,"impl-Debug-for-NaiveTime"],[1031,"impl-Sub%3CMonths%3E-for-NaiveDate"],[1032,"impl-Sub-for-NaiveDate"],[1033,"impl-Sub%3CTimeDelta%3E-for-NaiveDate"],[1034,"impl-Sub%3CDays%3E-for-NaiveDate"],[1035,"impl-Sub%3CDays%3E-for-NaiveDateTime"],[1036,"impl-Sub%3CDuration%3E-for-NaiveDateTime"],[1037,"impl-Sub%3CMonths%3E-for-NaiveDateTime"],[1038,"impl-Sub-for-NaiveDateTime"],[1039,"impl-Sub%3CFixedOffset%3E-for-NaiveDateTime"],[1040,"impl-Sub%3CTimeDelta%3E-for-NaiveDateTime"],[1041,"impl-Sub%3CTimeDelta%3E-for-NaiveTime"],[1042,"impl-Sub-for-NaiveTime"],[1043,"impl-Sub%3CDuration%3E-for-NaiveTime"],[1044,"impl-Sub%3CFixedOffset%3E-for-NaiveTime"],[1046,"impl-SubAssign%3CDuration%3E-for-NaiveDateTime"],[1047,"impl-SubAssign%3CTimeDelta%3E-for-NaiveDateTime"],[1048,"impl-SubAssign%3CDuration%3E-for-NaiveTime"],[1049,"impl-SubAssign%3CTimeDelta%3E-for-NaiveTime"],[1169,"impl-Display-for-FixedOffset"],[1170,"impl-Debug-for-FixedOffset"],[1172,"impl-Debug-for-Utc"],[1173,"impl-Display-for-Utc"],[1285,"impl-Display-for-RoundingError"],[1286,"impl-Debug-for-RoundingError"]]}],\
["colored",{"doc":"Coloring terminal so simple, you already know how to do it …","t":"PPPPPPPPPPPPPGFKEPPPPPPPPPFGPPPPNNMNNMNNNNNNNNNNNNNNNNNNMNNNNNNNNNMNNCNCNNNMNNNNNNNNNNNNNNNNNNNNNMNNNNNNMNNMNNNNNNNNNNNNMNNNNNNNNNNNNMNMNMNNNNNNNNNNNNNNNNNNNNNNMNNNOOOFFNNNNNNNNNNNHNNNNNNNNHNFONNNNNNNONNONNNN","n":["Black","Blink","Blue","Bold","BrightBlack","BrightBlue","BrightCyan","BrightGreen","BrightMagenta","BrightRed","BrightWhite","BrightYellow","Clear","Color","ColoredString","Colorize","CustomColor","Cyan","Dimmed","Green","Hidden","Italic","Magenta","Red","Reversed","Strikethrough","Style","Styles","TrueColor","Underline","White","Yellow","bgcolor","black","blink","blink","blue","bold","bold","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bright_black","bright_blue","bright_cyan","bright_green","bright_magenta","bright_purple","bright_red","bright_white","bright_yellow","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","color","color","contains","control","custom_color","customcolors","cyan","default","deref","dimmed","dimmed","eq","eq","eq","eq","fgcolor","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","green","hidden","hidden","into","into","into","into","is_plain","italic","italic","magenta","normal","normal","on_black","on_blue","on_bright_black","on_bright_blue","on_bright_cyan","on_bright_green","on_bright_magenta","on_bright_purple","on_bright_red","on_bright_white","on_bright_yellow","on_color","on_color","on_custom_color","on_cyan","on_green","on_magenta","on_purple","on_red","on_truecolor","on_white","on_yellow","purple","red","reverse","reverse","reversed","reversed","strikethrough","strikethrough","style","to_bg_str","to_fg_str","to_owned","to_owned","to_owned","to_owned","to_string","truecolor","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","underline","underline","white","yellow","b","g","r","SHOULD_COLORIZE","ShouldColorize","borrow","borrow","borrow_mut","borrow_mut","default","deref","from","from","from_env","into","into","set_override","set_override","should_colorize","try_from","try_from","try_into","try_into","type_id","type_id","unset_override","unset_override","CustomColor","b","borrow","borrow_mut","clone","clone_into","eq","fmt","from","g","into","new","r","to_owned","try_from","try_into","type_id"],"q":[[0,"colored"],[164,"colored::Color"],[167,"colored::control"],[191,"colored::customcolors"],[208,"core::option"],[209,"core::convert"],[210,"core::fmt"],[211,"core::fmt"],[212,"core::result"],[213,"alloc::borrow"],[214,"core::any"]],"d":["","","","","","","","","","","","","","The 8 standard colors.","A string that may have color and/or style applied to it.","The trait that enables something to be given color.","","","","","","","","","","","A combinatorial style such as bold, italics, dimmed, etc.","","","","","","Get the current background color applied.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the current style has one of <code>Styles</code> switched on.","A couple of functions to enable and disable coloring.","","Custom colors support.","","","","","","","","","","Get the current background color applied.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the colored string has no color or styling.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the current <code>Style</code> which can be check if it contains a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The persistent <code>ShouldColorize</code>.","A flag for whether coloring should occur.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Reads environment variables and checks if output is a tty …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Use this to force colored to ignore the environment and …","Use this to force colored to ignore the environment and …","Returns if the current coloring is expected.","","","","","","","Remove the manual override and let the environment decide …","Remove the manual override and let the environment decide …","Custom color structure, it will generate a true color in …","Blue","","","","","","","Returns the argument unchanged.","Green","Calls <code>U::from(self)</code>.","Create a new custom color","Red","","","",""],"i":[2,6,2,6,2,2,2,2,2,2,2,2,6,0,0,0,0,2,6,2,6,6,2,2,6,6,0,0,2,6,2,2,1,4,4,1,4,4,1,2,5,6,1,2,5,6,1,4,4,4,4,4,4,4,4,4,4,1,2,5,6,1,2,5,6,1,4,1,5,0,4,0,4,1,1,4,1,2,5,6,1,1,2,5,6,1,1,2,2,2,5,6,1,1,1,2,4,4,1,2,5,6,1,1,4,1,4,4,1,4,4,4,4,4,4,4,4,4,4,4,4,1,4,4,4,4,4,4,4,4,4,4,4,4,1,4,1,4,1,1,2,2,2,5,6,1,1,4,2,5,6,1,2,5,6,1,2,5,6,1,4,1,4,4,21,21,21,0,0,19,20,19,20,19,20,19,20,19,19,20,0,19,19,19,20,19,20,19,20,0,19,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[4,1],[4,1],[1,1],[4,1],[4,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[1,1],[2,2],[5,5],[6,6],[1,1],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[4,-1],1,[[8,[2]]]],[[1,-1],1,[[8,[2]]]],[[5,6],9],0,[[4,10],1],0,[4,1],[[],1],[1,11],[4,1],[1,1],[[2,2],9],[[5,5],9],[[6,6],9],[[1,1],9],[1,[[3,[2]]]],[[2,12],13],[[5,12],13],[[6,12],13],[[1,12],13],[[1,12],13],[11,2],[14,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[14,1],[11,1],[11,[[15,[2,-1]]],[]],[4,1],[4,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,9],[4,1],[1,1],[4,1],[4,1],[1,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[[4,-1],1,[[8,[2]]]],[[1,-1],1,[[8,[2]]]],[[4,10],1],[4,1],[4,1],[4,1],[4,1],[4,1],[[4,16,16,16],1],[4,1],[4,1],[4,1],[4,1],[4,1],[1,1],[4,1],[1,1],[4,1],[1,1],[1,5],[2,[[17,[11]]]],[2,[[17,[11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,14,[]],[[4,16,16,16],1],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[4,1],[1,1],[4,1],[4,1],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],19],[20,19],[-1,-1,[]],[-1,-1,[]],[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[9,7],[[19,9],7],[19,9],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[],7],[19,7],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[[-1,-2],7,[],[]],[[10,10],9],[[10,12],13],[-1,-1,[]],0,[-1,-2,[],[]],[[16,16,16],10],0,[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,18,[]]],"c":[133],"p":[[5,"ColoredString",0],[6,"Color",0],[6,"Option",208],[10,"Colorize",0],[5,"Style",0],[6,"Styles",0],[1,"tuple"],[10,"Into",209],[1,"bool"],[5,"CustomColor",191],[1,"str"],[5,"Formatter",210],[8,"Result",210],[5,"String",211],[6,"Result",212],[1,"u8"],[6,"Cow",213],[5,"TypeId",214],[5,"ShouldColorize",167],[5,"SHOULD_COLORIZE",167],[15,"TrueColor",164]],"b":[[85,"impl-Display-for-ColoredString"],[86,"impl-Debug-for-ColoredString"],[87,"impl-From%3C%26str%3E-for-Color"],[88,"impl-From%3CString%3E-for-Color"],[93,"impl-From%3CString%3E-for-ColoredString"],[94,"impl-From%3C%26str%3E-for-ColoredString"]]}],\
["getrandom",{"doc":"Interface to the operating system’s random number …","t":"TTFTTTTTTTTTTTTTNNNNNNNNNNHHNNNNNNN","n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNEXPECTED","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","getrandom_uninit","into","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"getrandom"],[35,"core::num::nonzero"],[36,"core::fmt"],[37,"core::fmt"],[38,"core::mem::maybe_uninit"],[39,"core::option"],[40,"alloc::string"],[41,"core::any"]],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to <code>CCRandomGenerateBytes</code> failed on iOS, tvOS, or …","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","Encountered an unexpected situation which should not …","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Version of the <code>getrandom</code> function which fills <code>dest</code> with …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[1,3],[[1,1],4],[[1,5],6],[[1,5],6],[3,1],[-1,-1,[]],[[[8,[7]]],[[9,[2,1]]]],[[[8,[[10,[7]]]]],[[9,[[8,[7]],1]]]],[-1,-2,[],[]],[1,[[12,[11]]]],[-1,-2,[],[]],[-1,13,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,14,[]]],"c":[],"p":[[5,"Error",0],[1,"tuple"],[5,"NonZeroU32",35],[1,"bool"],[5,"Formatter",36],[8,"Result",36],[1,"u8"],[1,"slice"],[6,"Result",37],[20,"MaybeUninit",38],[1,"i32"],[6,"Option",39],[5,"String",40],[5,"TypeId",41]],"b":[[22,"impl-Display-for-Error"],[23,"impl-Debug-for-Error"]]}],\
["iana_time_zone",{"doc":"get the IANA time zone for the current system","t":"PGPPNNNNNNHNNNNNN","n":["FailedParsingString","GetTimezoneError","IoError","OsError","borrow","borrow_mut","fmt","fmt","from","from","get_timezone","into","source","to_string","try_from","try_into","type_id"],"q":[[0,"iana_time_zone"],[17,"core::fmt"],[18,"core::fmt"],[19,"std::io::error"],[20,"alloc::string"],[21,"core::error"],[22,"core::option"],[23,"core::any"]],"d":["Failed to parse","Error types","Wrapped IO error","Platform-specific error from the operating system","","","","","Returns the argument unchanged.","","Get the current IANA time zone as a string.","Calls <code>U::from(self)</code>.","","","","",""],"i":[1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1],"f":[0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[1,2],3],[[1,2],[[6,[4,5]]]],[-1,-1,[]],[7,1],[[],[[6,[8,1]]]],[-1,-2,[],[]],[1,[[10,[9]]]],[-1,8,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,11,[]]],"c":[],"p":[[6,"GetTimezoneError",0],[5,"Formatter",17],[8,"Result",17],[1,"tuple"],[5,"Error",17],[6,"Result",18],[5,"Error",19],[5,"String",20],[10,"Error",21],[6,"Option",22],[5,"TypeId",23]],"b":[[6,"impl-Debug-for-GetTimezoneError"],[7,"impl-Display-for-GetTimezoneError"]]}],\
["lazy_static",{"doc":"A macro for declaring lazily evaluated statics.","t":"KHQ","n":["LazyStatic","initialize","lazy_static"],"q":[[0,"lazy_static"]],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[0,[-1,1,2],0],"c":[],"p":[[1,"tuple"],[10,"LazyStatic",0]],"b":[]}],\
["libc",{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":"","n":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ABS_CNT","ABS_MAX","ACCOUNTING","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","ADFS_SUPER_MAGIC","ADJ_ESTERROR","ADJ_FREQUENCY","ADJ_MAXERROR","ADJ_MICRO","ADJ_NANO","ADJ_OFFSET","ADJ_OFFSET_SINGLESHOT","ADJ_OFFSET_SS_READ","ADJ_SETOFFSET","ADJ_STATUS","ADJ_TAI","ADJ_TICK","ADJ_TIMECONST","AFFS_SUPER_MAGIC","AFS_SUPER_MAGIC","AF_ALG","AF_APPLETALK","AF_ASH","AF_ATMPVC","AF_ATMSVC","AF_AX25","AF_BLUETOOTH","AF_BRIDGE","AF_CAIF","AF_CAN","AF_DECnet","AF_ECONET","AF_IB","AF_IEEE802154","AF_INET","AF_INET6","AF_IPX","AF_IRDA","AF_ISDN","AF_IUCV","AF_KEY","AF_LLC","AF_LOCAL","AF_MPLS","AF_NETBEUI","AF_NETLINK","AF_NETROM","AF_NFC","AF_PACKET","AF_PHONET","AF_PPPOX","AF_RDS","AF_ROSE","AF_ROUTE","AF_RXRPC","AF_SECURITY","AF_SNA","AF_TIPC","AF_UNIX","AF_UNSPEC","AF_VSOCK","AF_WANPIPE","AF_X25","AF_XDP","AIO_ALLDONE","AIO_CANCELED","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_V4MAPPED","ALG_OP_DECRYPT","ALG_OP_ENCRYPT","ALG_SET_AEAD_ASSOCLEN","ALG_SET_AEAD_AUTHSIZE","ALG_SET_DRBG_ENTROPY","ALG_SET_IV","ALG_SET_KEY","ALG_SET_KEY_BY_KEY_SERIAL","ALG_SET_OP","ALT_DIGITS","AM_STR","ARPD_FLUSH","ARPD_LOOKUP","ARPD_UPDATE","ARPHRD_ADAPT","ARPHRD_APPLETLK","ARPHRD_ARCNET","ARPHRD_ASH","ARPHRD_ATM","ARPHRD_AX25","ARPHRD_BIF","ARPHRD_CAN","ARPHRD_CHAOS","ARPHRD_CISCO","ARPHRD_CSLIP","ARPHRD_CSLIP6","ARPHRD_DDCMP","ARPHRD_DLCI","ARPHRD_ECONET","ARPHRD_EETHER","ARPHRD_ETHER","ARPHRD_EUI64","ARPHRD_FCAL","ARPHRD_FCFABRIC","ARPHRD_FCPL","ARPHRD_FCPP","ARPHRD_FDDI","ARPHRD_FRAD","ARPHRD_HDLC","ARPHRD_HIPPI","ARPHRD_HWX25","ARPHRD_IEEE1394","ARPHRD_IEEE802","ARPHRD_IEEE80211","ARPHRD_IEEE80211_PRISM","ARPHRD_IEEE80211_RADIOTAP","ARPHRD_IEEE802154","ARPHRD_IEEE802_TR","ARPHRD_INFINIBAND","ARPHRD_IPDDP","ARPHRD_IPGRE","ARPHRD_IRDA","ARPHRD_LAPB","ARPHRD_LOCALTLK","ARPHRD_LOOPBACK","ARPHRD_METRICOM","ARPHRD_NETROM","ARPHRD_NONE","ARPHRD_PIMREG","ARPHRD_PPP","ARPHRD_PRONET","ARPHRD_RAWHDLC","ARPHRD_ROSE","ARPHRD_RSRVD","ARPHRD_SIT","ARPHRD_SKIP","ARPHRD_SLIP","ARPHRD_SLIP6","ARPHRD_TUNNEL","ARPHRD_TUNNEL6","ARPHRD_VOID","ARPHRD_X25","ARPOP_InREPLY","ARPOP_InREQUEST","ARPOP_NAK","ARPOP_REPLY","ARPOP_REQUEST","ARPOP_RREPLY","ARPOP_RREQUEST","ATF_COM","ATF_DONTPUB","ATF_MAGIC","ATF_NETMASK","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_BASE","AT_BASE_PLATFORM","AT_CLKTCK","AT_EACCESS","AT_EGID","AT_EMPTY_PATH","AT_ENTRY","AT_EUID","AT_EXECFD","AT_EXECFN","AT_FDCWD","AT_FLAGS","AT_GID","AT_HWCAP","AT_HWCAP2","AT_IGNORE","AT_NOTELF","AT_NO_AUTOMOUNT","AT_NULL","AT_PAGESZ","AT_PHDR","AT_PHENT","AT_PHNUM","AT_PLATFORM","AT_RANDOM","AT_RECURSIVE","AT_REMOVEDIR","AT_SECURE","AT_STATX_DONT_SYNC","AT_STATX_FORCE_SYNC","AT_STATX_SYNC_AS_STAT","AT_STATX_SYNC_TYPE","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AT_SYSINFO_EHDR","AT_UID","AUTOFS_SUPER_MAGIC","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BINDERFS_SUPER_MAGIC","BLKIOMIN","BLKIOOPT","BLKPBSZGET","BLKSSZGET","BOOT_TIME","BOTHER","BPF_ABS","BPF_ADD","BPF_ALU","BPF_AND","BPF_B","BPF_DIV","BPF_FS_MAGIC","BPF_H","BPF_IMM","BPF_IND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JSET","BPF_JUMP","BPF_K","BPF_LD","BPF_LDX","BPF_LEN","BPF_LL_OFF","BPF_LSH","BPF_MAXINSNS","BPF_MEM","BPF_MEMWORDS","BPF_MISC","BPF_MISCOP","BPF_MOD","BPF_MSH","BPF_MUL","BPF_NEG","BPF_NET_OFF","BPF_OR","BPF_RET","BPF_RSH","BPF_RVAL","BPF_ST","BPF_STMT","BPF_STX","BPF_SUB","BPF_W","BPF_X","BPF_XOR","BRKINT","BS0","BS1","BSDLY","BTRFS_SUPER_MAGIC","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_MCEERR_AO","BUS_MCEERR_AR","BUS_OBJERR","CANFD_BRS","CANFD_ESI","CANFD_MAX_DLC","CANFD_MAX_DLEN","CANFD_MTU","CANXL_HDR_SIZE","CANXL_MAX_DLC","CANXL_MAX_DLC_MASK","CANXL_MAX_DLEN","CANXL_MAX_MTU","CANXL_MIN_DLC","CANXL_MIN_DLEN","CANXL_MIN_MTU","CANXL_MTU","CANXL_PRIO_BITS","CANXL_PRIO_MASK","CANXL_SEC","CANXL_XLF","CAN_BCM","CAN_EFF_FLAG","CAN_EFF_ID_BITS","CAN_EFF_MASK","CAN_ERR_FLAG","CAN_ERR_MASK","CAN_INV_FILTER","CAN_ISOTP","CAN_J1939","CAN_MAX_DLC","CAN_MAX_DLEN","CAN_MCNET","CAN_MTU","CAN_NPROTO","CAN_RAW","CAN_RAW_ERR_FILTER","CAN_RAW_FD_FRAMES","CAN_RAW_FILTER","CAN_RAW_FILTER_MAX","CAN_RAW_JOIN_FILTERS","CAN_RAW_LOOPBACK","CAN_RAW_RECV_OWN_MSGS","CAN_RAW_XL_FRAMES","CAN_RTR_FLAG","CAN_SFF_ID_BITS","CAN_SFF_MASK","CAN_TP16","CAN_TP20","CBAUD","CBAUDEX","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CIBAUD","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_TAI","CLOCK_THREAD_CPUTIME_ID","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_CLEAR_SIGHAND","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_INTO_CGROUP","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWTIME","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CLOSE_RANGE_CLOEXEC","CLOSE_RANGE_UNSHARE","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CMSPAR","CODA_SUPER_MAGIC","CODESET","CPU_ALLOC_SIZE","CPU_CLR","CPU_COUNT","CPU_COUNT_S","CPU_EQUAL","CPU_ISSET","CPU_SET","CPU_SETSIZE","CPU_ZERO","CR0","CR1","CR2","CR3","CRAMFS_MAGIC","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS","CS5","CS6","CS7","CS8","CSIGNAL","CSIZE","CSTOPB","CTL_ABI","CTL_BUS","CTL_BUS_ISA","CTL_CPU","CTL_DEBUG","CTL_DEV","CTL_FS","CTL_KERN","CTL_NET","CTL_VM","CTRL_ATTR_FAMILY_ID","CTRL_ATTR_FAMILY_NAME","CTRL_ATTR_HDRSIZE","CTRL_ATTR_MAXATTR","CTRL_ATTR_MCAST_GROUPS","CTRL_ATTR_MCAST_GRP_ID","CTRL_ATTR_MCAST_GRP_NAME","CTRL_ATTR_MCAST_GRP_UNSPEC","CTRL_ATTR_OPS","CTRL_ATTR_OP_FLAGS","CTRL_ATTR_OP_ID","CTRL_ATTR_OP_UNSPEC","CTRL_ATTR_UNSPEC","CTRL_ATTR_VERSION","CTRL_CMD_DELFAMILY","CTRL_CMD_DELMCAST_GRP","CTRL_CMD_DELOPS","CTRL_CMD_GETFAMILY","CTRL_CMD_GETMCAST_GRP","CTRL_CMD_GETOPS","CTRL_CMD_NEWFAMILY","CTRL_CMD_NEWMCAST_GRP","CTRL_CMD_NEWOPS","CTRL_CMD_UNSPEC","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DCCP_SERVICE_LIST_MAX_LEN","DCCP_SOCKOPT_AVAILABLE_CCIDS","DCCP_SOCKOPT_CCID","DCCP_SOCKOPT_CCID_RX_INFO","DCCP_SOCKOPT_CCID_TX_INFO","DCCP_SOCKOPT_CHANGE_L","DCCP_SOCKOPT_CHANGE_R","DCCP_SOCKOPT_GET_CUR_MPS","DCCP_SOCKOPT_PACKET_SIZE","DCCP_SOCKOPT_QPOLICY_ID","DCCP_SOCKOPT_QPOLICY_TXQLEN","DCCP_SOCKOPT_RECV_CSCOV","DCCP_SOCKOPT_RX_CCID","DCCP_SOCKOPT_SEND_CSCOV","DCCP_SOCKOPT_SERVER_TIMEWAIT","DCCP_SOCKOPT_SERVICE","DCCP_SOCKOPT_TX_CCID","DEAD_PROCESS","DEBUGFS_MAGIC","DEVPTS_SUPER_MAGIC","DIR","DS","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","ECRYPTFS_SUPER_MAGIC","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EFLAGS","EFS_SUPER_MAGIC","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EI_ABIVERSION","EI_CLASS","EI_DATA","EI_MAG0","EI_MAG1","EI_MAG2","EI_MAG3","EI_NIDENT","EI_OSABI","EI_PAD","EI_VERSION","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELFCLASS32","ELFCLASS64","ELFCLASSNONE","ELFCLASSNUM","ELFDATA2LSB","ELFDATA2MSB","ELFDATANONE","ELFDATANUM","ELFMAG0","ELFMAG1","ELFMAG2","ELFMAG3","ELFOSABI_AIX","ELFOSABI_ARM","ELFOSABI_ARM_AEABI","ELFOSABI_FREEBSD","ELFOSABI_GNU","ELFOSABI_HPUX","ELFOSABI_IRIX","ELFOSABI_LINUX","ELFOSABI_MODESTO","ELFOSABI_NETBSD","ELFOSABI_NONE","ELFOSABI_OPENBSD","ELFOSABI_SOLARIS","ELFOSABI_STANDALONE","ELFOSABI_SYSV","ELFOSABI_TRU64","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","EM_386","EM_68HC05","EM_68HC08","EM_68HC11","EM_68HC12","EM_68HC16","EM_68K","EM_860","EM_88K","EM_960","EM_AARCH64","EM_ALPHA","EM_ARC","EM_ARC_A5","EM_ARM","EM_AVR","EM_COLDFIRE","EM_CRIS","EM_D10V","EM_D30V","EM_FAKE_ALPHA","EM_FIREPATH","EM_FR20","EM_FR30","EM_FX66","EM_H8S","EM_H8_300","EM_H8_300H","EM_H8_500","EM_HUANY","EM_IA_64","EM_JAVELIN","EM_M32","EM_M32R","EM_ME16","EM_MIPS","EM_MIPS_RS3_LE","EM_MIPS_X","EM_MMA","EM_MMIX","EM_MN10200","EM_MN10300","EM_NCPU","EM_NDR1","EM_NONE","EM_OPENRISC","EM_PARISC","EM_PCP","EM_PDSP","EM_PJ","EM_PPC","EM_PPC64","EM_PRISM","EM_RCE","EM_RH32","EM_S370","EM_S390","EM_SH","EM_SPARC","EM_SPARC32PLUS","EM_SPARCV9","EM_ST100","EM_ST19","EM_ST7","EM_ST9PLUS","EM_STARCORE","EM_SVX","EM_TILEGX","EM_TILEPRO","EM_TINYJ","EM_TRICORE","EM_V800","EM_V850","EM_VAX","EM_VPP500","EM_X86_64","EM_XTENSA","EM_ZSP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOATTR","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ES","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETH_ALEN","ETH_DATA_LEN","ETH_FCS_LEN","ETH_FRAME_LEN","ETH_HLEN","ETH_P_1588","ETH_P_8021AD","ETH_P_8021AH","ETH_P_8021Q","ETH_P_80221","ETH_P_802_2","ETH_P_802_3","ETH_P_802_3_MIN","ETH_P_802_EX1","ETH_P_AARP","ETH_P_AF_IUCV","ETH_P_ALL","ETH_P_AOE","ETH_P_ARCNET","ETH_P_ARP","ETH_P_ATALK","ETH_P_ATMFATE","ETH_P_ATMMPOA","ETH_P_AX25","ETH_P_BATMAN","ETH_P_BPQ","ETH_P_CAIF","ETH_P_CANFD","ETH_P_CONTROL","ETH_P_CUST","ETH_P_DDCMP","ETH_P_DEC","ETH_P_DIAG","ETH_P_DNA_DL","ETH_P_DNA_RC","ETH_P_DNA_RT","ETH_P_DSA","ETH_P_ECONET","ETH_P_EDSA","ETH_P_FCOE","ETH_P_FIP","ETH_P_HDLC","ETH_P_IEEE802154","ETH_P_IEEEPUP","ETH_P_IEEEPUPAT","ETH_P_IP","ETH_P_IPV6","ETH_P_IPX","ETH_P_IRDA","ETH_P_LAT","ETH_P_LINK_CTL","ETH_P_LOCALTALK","ETH_P_LOOP","ETH_P_LOOPBACK","ETH_P_MACSEC","ETH_P_MOBITEX","ETH_P_MPLS_MC","ETH_P_MPLS_UC","ETH_P_MVRP","ETH_P_PAE","ETH_P_PAUSE","ETH_P_PHONET","ETH_P_PPPTALK","ETH_P_PPP_DISC","ETH_P_PPP_MP","ETH_P_PPP_SES","ETH_P_PRP","ETH_P_PUP","ETH_P_PUPAT","ETH_P_QINQ1","ETH_P_QINQ2","ETH_P_QINQ3","ETH_P_RARP","ETH_P_SCA","ETH_P_SLOW","ETH_P_SNAP","ETH_P_TDLS","ETH_P_TEB","ETH_P_TIPC","ETH_P_TRAILER","ETH_P_TR_802_2","ETH_P_WAN_PPP","ETH_P_WCCP","ETH_P_X25","ETH_ZLEN","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","ET_CORE","ET_DYN","ET_EXEC","ET_HIOS","ET_HIPROC","ET_LOOS","ET_LOPROC","ET_NONE","ET_NUM","ET_REL","EUCLEAN","EUNATCH","EUSERS","EV_CNT","EV_CURRENT","EV_MAX","EV_NONE","EV_NUM","EWOULDBLOCK","EXDEV","EXFULL","EXIT_FAILURE","EXIT_SUCCESS","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","EXTA","EXTB","EXTPROC","Elf32_Addr","Elf32_Chdr","Elf32_Ehdr","Elf32_Half","Elf32_Off","Elf32_Phdr","Elf32_Section","Elf32_Shdr","Elf32_Sym","Elf32_Word","Elf64_Addr","Elf64_Chdr","Elf64_Ehdr","Elf64_Half","Elf64_Off","Elf64_Phdr","Elf64_Section","Elf64_Shdr","Elf64_Sxword","Elf64_Sym","Elf64_Word","Elf64_Xword","F2FS_SUPER_MAGIC","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FANOTIFY_METADATA_VERSION","FAN_ACCESS","FAN_ACCESS_PERM","FAN_ALLOW","FAN_ATTRIB","FAN_AUDIT","FAN_CLASS_CONTENT","FAN_CLASS_NOTIF","FAN_CLASS_PRE_CONTENT","FAN_CLOEXEC","FAN_CLOSE","FAN_CLOSE_NOWRITE","FAN_CLOSE_WRITE","FAN_CREATE","FAN_DELETE","FAN_DELETE_SELF","FAN_DENY","FAN_ENABLE_AUDIT","FAN_EPIDFD","FAN_EVENT_INFO_TYPE_DFID","FAN_EVENT_INFO_TYPE_DFID_NAME","FAN_EVENT_INFO_TYPE_ERROR","FAN_EVENT_INFO_TYPE_FID","FAN_EVENT_INFO_TYPE_NEW_DFID_NAME","FAN_EVENT_INFO_TYPE_OLD_DFID_NAME","FAN_EVENT_INFO_TYPE_PIDFD","FAN_EVENT_ON_CHILD","FAN_FS_ERROR","FAN_INFO","FAN_MARK_ADD","FAN_MARK_DONT_FOLLOW","FAN_MARK_EVICTABLE","FAN_MARK_FILESYSTEM","FAN_MARK_FLUSH","FAN_MARK_IGNORE","FAN_MARK_IGNORED_MASK","FAN_MARK_IGNORED_SURV_MODIFY","FAN_MARK_IGNORE_SURV","FAN_MARK_INODE","FAN_MARK_MOUNT","FAN_MARK_ONLYDIR","FAN_MARK_REMOVE","FAN_MODIFY","FAN_MOVE","FAN_MOVED_FROM","FAN_MOVED_TO","FAN_MOVE_SELF","FAN_NOFD","FAN_NONBLOCK","FAN_NOPIDFD","FAN_ONDIR","FAN_OPEN","FAN_OPEN_EXEC","FAN_OPEN_EXEC_PERM","FAN_OPEN_PERM","FAN_Q_OVERFLOW","FAN_RENAME","FAN_REPORT_DFID_NAME","FAN_REPORT_DFID_NAME_TARGET","FAN_REPORT_DIR_FID","FAN_REPORT_FID","FAN_REPORT_NAME","FAN_REPORT_PIDFD","FAN_REPORT_TARGET_FID","FAN_REPORT_TID","FAN_RESPONSE_INFO_AUDIT_RULE","FAN_RESPONSE_INFO_NONE","FAN_UNLIMITED_MARKS","FAN_UNLIMITED_QUEUE","FDPIC_FUNCPTRS","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FF_CNT","FF_MAX","FICLONE","FICLONERANGE","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIONBIO","FIONCLEX","FIONREAD","FIOQSIZE","FLUSHO","FOPEN_MAX","FS","FS_BASE","FS_IOC32_GETFLAGS","FS_IOC32_GETVERSION","FS_IOC32_SETFLAGS","FS_IOC32_SETVERSION","FS_IOC_GETFLAGS","FS_IOC_GETVERSION","FS_IOC_SETFLAGS","FS_IOC_SETVERSION","FUSE_SUPER_MAGIC","FUTEXFS_SUPER_MAGIC","FUTEX_BITSET_MATCH_ANY","FUTEX_CLOCK_REALTIME","FUTEX_CMD_MASK","FUTEX_CMP_REQUEUE","FUTEX_CMP_REQUEUE_PI","FUTEX_FD","FUTEX_LOCK_PI","FUTEX_LOCK_PI2","FUTEX_OP","FUTEX_OP_ADD","FUTEX_OP_ANDN","FUTEX_OP_CMP_EQ","FUTEX_OP_CMP_GE","FUTEX_OP_CMP_GT","FUTEX_OP_CMP_LE","FUTEX_OP_CMP_LT","FUTEX_OP_CMP_NE","FUTEX_OP_OPARG_SHIFT","FUTEX_OP_OR","FUTEX_OP_SET","FUTEX_OP_XOR","FUTEX_PRIVATE_FLAG","FUTEX_REQUEUE","FUTEX_TRYLOCK_PI","FUTEX_UNLOCK_PI","FUTEX_WAIT","FUTEX_WAIT_BITSET","FUTEX_WAIT_REQUEUE_PI","FUTEX_WAKE","FUTEX_WAKE_BITSET","FUTEX_WAKE_OP","F_ADD_SEALS","F_CANCELLK","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLEASE","F_GETLK","F_GETOWN","F_GETPIPE_SZ","F_GET_SEALS","F_LOCK","F_NOTIFY","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_OK","F_RDLCK","F_SEAL_FUTURE_WRITE","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLEASE","F_SETLK","F_SETLKW","F_SETOWN","F_SETPIPE_SZ","F_TEST","F_TLOCK","F_ULOCK","F_UNLCK","F_WRLCK","GENL_ADMIN_PERM","GENL_CMD_CAP_DO","GENL_CMD_CAP_DUMP","GENL_CMD_CAP_HASPOL","GENL_ID_CTRL","GENL_ID_PMCRAID","GENL_ID_VFS_DQUOT","GENL_MAX_ID","GENL_MIN_ID","GENL_NAMSIZ","GENL_UNS_ADMIN_PERM","GLOB_ABORTED","GLOB_ALTDIRFUNC","GLOB_APPEND","GLOB_BRACE","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMAGIC","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GLOB_ONLYDIR","GLOB_PERIOD","GLOB_TILDE","GLOB_TILDE_CHECK","GRND_INSECURE","GRND_NONBLOCK","GRND_RANDOM","GRPQUOTA","GS","GS_BASE","HOSTFS_SUPER_MAGIC","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","HUGETLB_FLAG_ENCODE_16GB","HUGETLB_FLAG_ENCODE_16MB","HUGETLB_FLAG_ENCODE_1GB","HUGETLB_FLAG_ENCODE_1MB","HUGETLB_FLAG_ENCODE_256MB","HUGETLB_FLAG_ENCODE_2GB","HUGETLB_FLAG_ENCODE_2MB","HUGETLB_FLAG_ENCODE_32MB","HUGETLB_FLAG_ENCODE_512KB","HUGETLB_FLAG_ENCODE_512MB","HUGETLB_FLAG_ENCODE_64KB","HUGETLB_FLAG_ENCODE_8MB","HUGETLB_FLAG_ENCODE_MASK","HUGETLB_FLAG_ENCODE_SHIFT","HUPCL","HWTSTAMP_FILTER_ALL","HWTSTAMP_FILTER_NONE","HWTSTAMP_FILTER_NTP_ALL","HWTSTAMP_FILTER_PTP_V1_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V1_L4_EVENT","HWTSTAMP_FILTER_PTP_V1_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L2_EVENT","HWTSTAMP_FILTER_PTP_V2_L2_SYNC","HWTSTAMP_FILTER_PTP_V2_L4_DELAY_REQ","HWTSTAMP_FILTER_PTP_V2_L4_EVENT","HWTSTAMP_FILTER_PTP_V2_L4_SYNC","HWTSTAMP_FILTER_PTP_V2_SYNC","HWTSTAMP_FILTER_SOME","HWTSTAMP_TX_OFF","HWTSTAMP_TX_ON","HWTSTAMP_TX_ONESTEP_P2P","HWTSTAMP_TX_ONESTEP_SYNC","IBSHIFT","ICANON","ICRNL","IEXTEN","IFA_ADDRESS","IFA_ANYCAST","IFA_BROADCAST","IFA_CACHEINFO","IFA_FLAGS","IFA_F_DADFAILED","IFA_F_DEPRECATED","IFA_F_HOMEADDRESS","IFA_F_MANAGETEMPADDR","IFA_F_MCAUTOJOIN","IFA_F_NODAD","IFA_F_NOPREFIXROUTE","IFA_F_OPTIMISTIC","IFA_F_PERMANENT","IFA_F_SECONDARY","IFA_F_STABLE_PRIVACY","IFA_F_TEMPORARY","IFA_F_TENTATIVE","IFA_LABEL","IFA_LOCAL","IFA_MULTICAST","IFA_UNSPEC","IFF_ALLMULTI","IFF_ATTACH_QUEUE","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DETACH_QUEUE","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_MULTI_QUEUE","IFF_NAPI","IFF_NAPI_FRAGS","IFF_NOARP","IFF_NOFILTER","IFF_NOTRAILERS","IFF_NO_CARRIER","IFF_NO_PI","IFF_ONE_QUEUE","IFF_PERSIST","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_TUN_EXCL","IFF_UP","IFF_VNET_HDR","IFLA_ADDRESS","IFLA_AF_SPEC","IFLA_ALLMULTI","IFLA_ALT_IFNAME","IFLA_BROADCAST","IFLA_CARRIER","IFLA_CARRIER_CHANGES","IFLA_CARRIER_DOWN_COUNT","IFLA_CARRIER_UP_COUNT","IFLA_COST","IFLA_EVENT","IFLA_EXT_MASK","IFLA_GROUP","IFLA_GRO_MAX_SIZE","IFLA_GSO_MAX_SEGS","IFLA_GSO_MAX_SIZE","IFLA_IFALIAS","IFLA_IFNAME","IFLA_IF_NETNSID","IFLA_INFO_DATA","IFLA_INFO_KIND","IFLA_INFO_SLAVE_DATA","IFLA_INFO_SLAVE_KIND","IFLA_INFO_UNSPEC","IFLA_INFO_XSTATS","IFLA_LINK","IFLA_LINKINFO","IFLA_LINKMODE","IFLA_LINK_NETNSID","IFLA_MAP","IFLA_MASTER","IFLA_MAX_MTU","IFLA_MIN_MTU","IFLA_MTU","IFLA_NET_NS_FD","IFLA_NET_NS_PID","IFLA_NEW_IFINDEX","IFLA_NEW_NETNSID","IFLA_NUM_RX_QUEUES","IFLA_NUM_TX_QUEUES","IFLA_NUM_VF","IFLA_OPERSTATE","IFLA_PAD","IFLA_PARENT_DEV_BUS_NAME","IFLA_PARENT_DEV_NAME","IFLA_PERM_ADDRESS","IFLA_PHYS_PORT_ID","IFLA_PHYS_PORT_NAME","IFLA_PHYS_SWITCH_ID","IFLA_PORT_SELF","IFLA_PRIORITY","IFLA_PROMISCUITY","IFLA_PROP_LIST","IFLA_PROTINFO","IFLA_PROTO_DOWN","IFLA_PROTO_DOWN_REASON","IFLA_QDISC","IFLA_STATS","IFLA_STATS64","IFLA_TARGET_NETNSID","IFLA_TSO_MAX_SEGS","IFLA_TSO_MAX_SIZE","IFLA_TXQLEN","IFLA_UNSPEC","IFLA_VFINFO_LIST","IFLA_VF_PORTS","IFLA_WEIGHT","IFLA_WIRELESS","IFLA_XDP","IFNAMSIZ","IF_LINK_MODE_DEFAULT","IF_LINK_MODE_DORMANT","IF_LINK_MODE_TESTING","IF_NAMESIZE","IF_OPER_DORMANT","IF_OPER_DOWN","IF_OPER_LOWERLAYERDOWN","IF_OPER_NOTPRESENT","IF_OPER_TESTING","IF_OPER_UNKNOWN","IF_OPER_UP","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INOTIFY_MAX_QUEUED_EVENTS","INOTIFY_MAX_USER_INSTANCES","INOTIFY_MAX_USER_WATCHES","INPCK","INPUT_PROP_CNT","INPUT_PROP_MAX","INT_MAX","INT_MIN","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_EXCL_UNLINK","IN_IGNORED","IN_ISDIR","IN_MASK_ADD","IN_MASK_CREATE","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IP6T_SO_ORIGINAL_DST","IPC_CREAT","IPC_EXCL","IPC_INFO","IPC_NOWAIT","IPC_PRIVATE","IPC_RMID","IPC_SET","IPC_STAT","IPDEFTTL","IPOPT_CLASS","IPOPT_CLASS_MASK","IPOPT_CONTROL","IPOPT_COPIED","IPOPT_COPY","IPOPT_END","IPOPT_EOL","IPOPT_LSRR","IPOPT_MEASUREMENT","IPOPT_MINOFF","IPOPT_NOOP","IPOPT_NOP","IPOPT_NUMBER","IPOPT_NUMBER_MASK","IPOPT_OFFSET","IPOPT_OLEN","IPOPT_OPTVAL","IPOPT_RA","IPOPT_RESERVED1","IPOPT_RESERVED2","IPOPT_RR","IPOPT_SEC","IPOPT_SID","IPOPT_SSRR","IPOPT_TIMESTAMP","IPOPT_TS","IPOPT_TS_PRESPEC","IPOPT_TS_TSANDADDR","IPOPT_TS_TSONLY","IPPROTO_AH","IPPROTO_BEETPH","IPPROTO_COMP","IPPROTO_DCCP","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_ENCAP","IPPROTO_ESP","IPPROTO_ETHERNET","IPPROTO_FRAGMENT","IPPROTO_GRE","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IGMP","IPPROTO_IP","IPPROTO_IPIP","IPPROTO_IPV6","IPPROTO_MAX","IPPROTO_MH","IPPROTO_MPLS","IPPROTO_MPTCP","IPPROTO_MTP","IPPROTO_NONE","IPPROTO_PIM","IPPROTO_PUP","IPPROTO_RAW","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_SCTP","IPPROTO_TCP","IPPROTO_TP","IPPROTO_UDP","IPPROTO_UDPLITE","IPTOS_ECN","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOT_ECT","IPTOS_LOWDELAY","IPTOS_MINCOST","IPTOS_PREC","IPTOS_PREC_CRITIC_ECP","IPTOS_PREC_FLASH","IPTOS_PREC_FLASHOVERRIDE","IPTOS_PREC_IMMEDIATE","IPTOS_PREC_INTERNETCONTROL","IPTOS_PREC_MASK","IPTOS_PREC_NETCONTROL","IPTOS_PREC_PRIORITY","IPTOS_PREC_ROUTINE","IPTOS_RELIABILITY","IPTOS_THROUGHPUT","IPTOS_TOS","IPTOS_TOS_MASK","IPV6_2292DSTOPTS","IPV6_2292HOPLIMIT","IPV6_2292HOPOPTS","IPV6_2292PKTINFO","IPV6_2292PKTOPTIONS","IPV6_2292RTHDR","IPV6_ADDRFORM","IPV6_ADDR_PREFERENCES","IPV6_ADD_MEMBERSHIP","IPV6_AUTHHDR","IPV6_AUTOFLOWLABEL","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_DROP_MEMBERSHIP","IPV6_DSTOPTS","IPV6_FLOWINFO","IPV6_FLOWINFO_FLOWLABEL","IPV6_FLOWINFO_PRIORITY","IPV6_FLOWINFO_SEND","IPV6_FLOWLABEL_MGR","IPV6_FREEBIND","IPV6_HDRINCL","IPV6_HOPLIMIT","IPV6_HOPOPTS","IPV6_IPSEC_POLICY","IPV6_JOIN_ANYCAST","IPV6_LEAVE_ANYCAST","IPV6_MINHOPCOUNT","IPV6_MTU","IPV6_MTU_DISCOVER","IPV6_MULTICAST_ALL","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_NEXTHOP","IPV6_ORIGDSTADDR","IPV6_PATHMTU","IPV6_PKTINFO","IPV6_PMTUDISC_DO","IPV6_PMTUDISC_DONT","IPV6_PMTUDISC_INTERFACE","IPV6_PMTUDISC_OMIT","IPV6_PMTUDISC_PROBE","IPV6_PMTUDISC_WANT","IPV6_PREFER_SRC_CGA","IPV6_PREFER_SRC_COA","IPV6_PREFER_SRC_HOME","IPV6_PREFER_SRC_NONCGA","IPV6_PREFER_SRC_PUBLIC","IPV6_PREFER_SRC_PUBTMP_DEFAULT","IPV6_PREFER_SRC_TMP","IPV6_RECVDSTOPTS","IPV6_RECVERR","IPV6_RECVFRAGSIZE","IPV6_RECVHOPLIMIT","IPV6_RECVHOPOPTS","IPV6_RECVORIGDSTADDR","IPV6_RECVPATHMTU","IPV6_RECVPKTINFO","IPV6_RECVRTHDR","IPV6_RECVTCLASS","IPV6_ROUTER_ALERT","IPV6_ROUTER_ALERT_ISOLATE","IPV6_RTHDR","IPV6_RTHDRDSTOPTS","IPV6_RTHDR_LOOSE","IPV6_RTHDR_STRICT","IPV6_TCLASS","IPV6_TRANSPARENT","IPV6_UNICAST_HOPS","IPV6_UNICAST_IF","IPV6_V6ONLY","IPV6_XFRM_POLICY","IPVERSION","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BIND_ADDRESS_NO_PORT","IP_BLOCK_SOURCE","IP_CHECKSUM","IP_DEFAULT_MULTICAST_LOOP","IP_DEFAULT_MULTICAST_TTL","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_FREEBIND","IP_HDRINCL","IP_IPSEC_POLICY","IP_MINTTL","IP_MSFILTER","IP_MTU","IP_MTU_DISCOVER","IP_MULTICAST_ALL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_NODEFRAG","IP_OPTIONS","IP_ORIGDSTADDR","IP_PASSSEC","IP_PKTINFO","IP_PKTOPTIONS","IP_PMTUDISC_DO","IP_PMTUDISC_DONT","IP_PMTUDISC_INTERFACE","IP_PMTUDISC_OMIT","IP_PMTUDISC_PROBE","IP_PMTUDISC_WANT","IP_RECVERR","IP_RECVFRAGSIZE","IP_RECVOPTS","IP_RECVORIGDSTADDR","IP_RECVTOS","IP_RECVTTL","IP_RETOPTS","IP_ROUTER_ALERT","IP_TOS","IP_TRANSPARENT","IP_TTL","IP_UNBLOCK_SOURCE","IP_UNICAST_IF","IP_XFRM_POLICY","ISIG","ISOFS_SUPER_MAGIC","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IWEVASSOCREQIE","IWEVASSOCRESPIE","IWEVCUSTOM","IWEVEXPIRED","IWEVFIRST","IWEVGENIE","IWEVMICHAELMICFAILURE","IWEVPMKIDCAND","IWEVQUAL","IWEVREGISTERED","IWEVTXDROP","IW_AUTH_80211_AUTH_ALG","IW_AUTH_ALG_LEAP","IW_AUTH_ALG_OPEN_SYSTEM","IW_AUTH_ALG_SHARED_KEY","IW_AUTH_CIPHER_AES_CMAC","IW_AUTH_CIPHER_CCMP","IW_AUTH_CIPHER_GROUP","IW_AUTH_CIPHER_GROUP_MGMT","IW_AUTH_CIPHER_NONE","IW_AUTH_CIPHER_PAIRWISE","IW_AUTH_CIPHER_TKIP","IW_AUTH_CIPHER_WEP104","IW_AUTH_CIPHER_WEP40","IW_AUTH_DROP_UNENCRYPTED","IW_AUTH_FLAGS","IW_AUTH_INDEX","IW_AUTH_KEY_MGMT","IW_AUTH_KEY_MGMT_802_1X","IW_AUTH_KEY_MGMT_PSK","IW_AUTH_MFP","IW_AUTH_MFP_DISABLED","IW_AUTH_MFP_OPTIONAL","IW_AUTH_MFP_REQUIRED","IW_AUTH_PRIVACY_INVOKED","IW_AUTH_ROAMING_CONTROL","IW_AUTH_ROAMING_DISABLE","IW_AUTH_ROAMING_ENABLE","IW_AUTH_RX_UNENCRYPTED_EAPOL","IW_AUTH_TKIP_COUNTERMEASURES","IW_AUTH_WPA_ENABLED","IW_AUTH_WPA_VERSION","IW_AUTH_WPA_VERSION_DISABLED","IW_AUTH_WPA_VERSION_WPA","IW_AUTH_WPA_VERSION_WPA2","IW_CUSTOM_MAX","IW_ENCODE_ALG_AES_CMAC","IW_ENCODE_ALG_CCMP","IW_ENCODE_ALG_NONE","IW_ENCODE_ALG_PMK","IW_ENCODE_ALG_TKIP","IW_ENCODE_ALG_WEP","IW_ENCODE_DISABLED","IW_ENCODE_ENABLED","IW_ENCODE_EXT_GROUP_KEY","IW_ENCODE_EXT_RX_SEQ_VALID","IW_ENCODE_EXT_SET_TX_KEY","IW_ENCODE_EXT_TX_SEQ_VALID","IW_ENCODE_FLAGS","IW_ENCODE_INDEX","IW_ENCODE_MODE","IW_ENCODE_NOKEY","IW_ENCODE_OPEN","IW_ENCODE_RESTRICTED","IW_ENCODE_SEQ_MAX_SIZE","IW_ENCODE_TEMP","IW_ENCODING_TOKEN_MAX","IW_ENC_CAPA_4WAY_HANDSHAKE","IW_ENC_CAPA_CIPHER_CCMP","IW_ENC_CAPA_CIPHER_TKIP","IW_ENC_CAPA_WPA","IW_ENC_CAPA_WPA2","IW_ESSID_MAX_SIZE","IW_EV_CHAR_PK_LEN","IW_EV_LCP_PK_LEN","IW_EV_POINT_PK_LEN","IW_FREQ_AUTO","IW_FREQ_FIXED","IW_GENERIC_IE_MAX","IW_MAX_AP","IW_MAX_BITRATES","IW_MAX_ENCODING_SIZES","IW_MAX_FREQUENCIES","IW_MAX_SPY","IW_MAX_TXPOWER","IW_MICFAILURE_COUNT","IW_MICFAILURE_GROUP","IW_MICFAILURE_KEY_ID","IW_MICFAILURE_PAIRWISE","IW_MICFAILURE_STAKEY","IW_MLME_ASSOC","IW_MLME_AUTH","IW_MLME_DEAUTH","IW_MLME_DISASSOC","IW_MODE_ADHOC","IW_MODE_AUTO","IW_MODE_INFRA","IW_MODE_MASTER","IW_MODE_MESH","IW_MODE_MONITOR","IW_MODE_REPEAT","IW_MODE_SECOND","IW_PMKID_CAND_PREAUTH","IW_PMKID_LEN","IW_PMKSA_ADD","IW_PMKSA_FLUSH","IW_PMKSA_REMOVE","IW_POWER_ALL_R","IW_POWER_FORCE_S","IW_POWER_MAX","IW_POWER_MIN","IW_POWER_MODE","IW_POWER_MODIFIER","IW_POWER_MULTICAST_R","IW_POWER_ON","IW_POWER_PERIOD","IW_POWER_RELATIVE","IW_POWER_REPEATER","IW_POWER_TIMEOUT","IW_POWER_TYPE","IW_POWER_UNICAST_R","IW_PRIV_SIZE_FIXED","IW_PRIV_SIZE_MASK","IW_PRIV_TYPE_ADDR","IW_PRIV_TYPE_BYTE","IW_PRIV_TYPE_CHAR","IW_PRIV_TYPE_FLOAT","IW_PRIV_TYPE_INT","IW_PRIV_TYPE_MASK","IW_PRIV_TYPE_NONE","IW_QUAL_ALL_INVALID","IW_QUAL_ALL_UPDATED","IW_QUAL_DBM","IW_QUAL_LEVEL_INVALID","IW_QUAL_LEVEL_UPDATED","IW_QUAL_NOISE_INVALID","IW_QUAL_NOISE_UPDATED","IW_QUAL_QUAL_INVALID","IW_QUAL_QUAL_UPDATED","IW_QUAL_RCPI","IW_RETRY_LIFETIME","IW_RETRY_LIMIT","IW_RETRY_LONG","IW_RETRY_MAX","IW_RETRY_MIN","IW_RETRY_MODIFIER","IW_RETRY_ON","IW_RETRY_RELATIVE","IW_RETRY_SHORT","IW_RETRY_TYPE","IW_SCAN_ALL_ESSID","IW_SCAN_ALL_FREQ","IW_SCAN_ALL_MODE","IW_SCAN_ALL_RATE","IW_SCAN_CAPA_BSSID","IW_SCAN_CAPA_CHANNEL","IW_SCAN_CAPA_ESSID","IW_SCAN_CAPA_MODE","IW_SCAN_CAPA_NONE","IW_SCAN_CAPA_RATE","IW_SCAN_CAPA_TIME","IW_SCAN_CAPA_TYPE","IW_SCAN_DEFAULT","IW_SCAN_MAX_DATA","IW_SCAN_THIS_ESSID","IW_SCAN_THIS_FREQ","IW_SCAN_THIS_MODE","IW_SCAN_THIS_RATE","IW_SCAN_TYPE_ACTIVE","IW_SCAN_TYPE_PASSIVE","IW_TXPOW_DBM","IW_TXPOW_MWATT","IW_TXPOW_RANGE","IW_TXPOW_RELATIVE","IW_TXPOW_TYPE","IXANY","IXOFF","IXON","J1939_EE_INFO_NONE","J1939_EE_INFO_RX_ABORT","J1939_EE_INFO_RX_DPO","J1939_EE_INFO_RX_RTS","J1939_EE_INFO_TX_ABORT","J1939_FILTER_MAX","J1939_IDLE_ADDR","J1939_MAX_UNICAST_ADDR","J1939_NLA_BYTES_ACKED","J1939_NLA_DEST_ADDR","J1939_NLA_DEST_NAME","J1939_NLA_PAD","J1939_NLA_PGN","J1939_NLA_SRC_ADDR","J1939_NLA_SRC_NAME","J1939_NLA_TOTAL_SIZE","J1939_NO_ADDR","J1939_NO_NAME","J1939_NO_PGN","J1939_PGN_ADDRESS_CLAIMED","J1939_PGN_ADDRESS_COMMANDED","J1939_PGN_MAX","J1939_PGN_PDU1_MAX","J1939_PGN_REQUEST","JFFS2_SUPER_MAGIC","KERNEL_VERSION","KERN_ACCT","KERN_ACPI_VIDEO_FLAGS","KERN_BOOTLOADER_TYPE","KERN_CADPID","KERN_COMPAT_LOG","KERN_CORE_PATTERN","KERN_CORE_USES_PID","KERN_CTLALTDEL","KERN_DOMAINNAME","KERN_HOTPLUG","KERN_HPPA_PWRSW","KERN_HPPA_UNALIGNED","KERN_HZ_TIMER","KERN_IA64_UNALIGNED","KERN_IEEE_EMULATION_WARNINGS","KERN_MAX_LOCK_DEPTH","KERN_MAX_THREADS","KERN_MODPROBE","KERN_MSGMAX","KERN_MSGMNB","KERN_MSGMNI","KERN_MSGPOOL","KERN_NAMETRANS","KERN_NGROUPS_MAX","KERN_NMI_WATCHDOG","KERN_NODENAME","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OVERFLOWGID","KERN_OVERFLOWUID","KERN_PANIC","KERN_PANIC_ON_NMI","KERN_PANIC_ON_OOPS","KERN_PIDMAX","KERN_PPC_HTABRECLAIM","KERN_PPC_L2CR","KERN_PPC_POWERSAVE_NAP","KERN_PPC_ZEROPAGED","KERN_PRINTK","KERN_PRINTK_RATELIMIT","KERN_PRINTK_RATELIMIT_BURST","KERN_PROF","KERN_PTY","KERN_RANDOM","KERN_RANDOMIZE","KERN_REALROOTDEV","KERN_RTSIGMAX","KERN_RTSIGNR","KERN_S390_USER_DEBUG_LOGGING","KERN_SECUREMASK","KERN_SEM","KERN_SETUID_DUMPABLE","KERN_SG_BIG_BUFF","KERN_SHMALL","KERN_SHMMAX","KERN_SHMMNI","KERN_SHMPATH","KERN_SPARC_REBOOT","KERN_SPARC_SCONS_PWROFF","KERN_SPARC_STOP_A","KERN_SPIN_RETRY","KERN_SYSRQ","KERN_TAINTED","KERN_UNKNOWN_NMI_PANIC","KERN_VERSION","KEXEC_ARCH_MASK","KEXEC_FILE_NO_INITRAMFS","KEXEC_FILE_ON_CRASH","KEXEC_FILE_UNLOAD","KEXEC_ON_CRASH","KEXEC_PRESERVE_CONTEXT","KEYCTL_ASSUME_AUTHORITY","KEYCTL_CAPABILITIES","KEYCTL_CAPS0_BIG_KEY","KEYCTL_CAPS0_CAPABILITIES","KEYCTL_CAPS0_DIFFIE_HELLMAN","KEYCTL_CAPS0_INVALIDATE","KEYCTL_CAPS0_MOVE","KEYCTL_CAPS0_PERSISTENT_KEYRINGS","KEYCTL_CAPS0_PUBLIC_KEY","KEYCTL_CAPS0_RESTRICT_KEYRING","KEYCTL_CAPS1_NS_KEYRING_NAME","KEYCTL_CAPS1_NS_KEY_TAG","KEYCTL_CHOWN","KEYCTL_CLEAR","KEYCTL_DESCRIBE","KEYCTL_DH_COMPUTE","KEYCTL_GET_KEYRING_ID","KEYCTL_GET_PERSISTENT","KEYCTL_GET_SECURITY","KEYCTL_INSTANTIATE","KEYCTL_INSTANTIATE_IOV","KEYCTL_INVALIDATE","KEYCTL_JOIN_SESSION_KEYRING","KEYCTL_LINK","KEYCTL_MOVE","KEYCTL_NEGATE","KEYCTL_PKEY_DECRYPT","KEYCTL_PKEY_ENCRYPT","KEYCTL_PKEY_QUERY","KEYCTL_PKEY_SIGN","KEYCTL_PKEY_VERIFY","KEYCTL_READ","KEYCTL_REJECT","KEYCTL_RESTRICT_KEYRING","KEYCTL_REVOKE","KEYCTL_SEARCH","KEYCTL_SESSION_TO_PARENT","KEYCTL_SETPERM","KEYCTL_SET_REQKEY_KEYRING","KEYCTL_SET_TIMEOUT","KEYCTL_SUPPORTS_DECRYPT","KEYCTL_SUPPORTS_ENCRYPT","KEYCTL_SUPPORTS_SIGN","KEYCTL_SUPPORTS_VERIFY","KEYCTL_UNLINK","KEYCTL_UPDATE","KEY_CNT","KEY_MAX","KEY_REQKEY_DEFL_DEFAULT","KEY_REQKEY_DEFL_GROUP_KEYRING","KEY_REQKEY_DEFL_NO_CHANGE","KEY_REQKEY_DEFL_PROCESS_KEYRING","KEY_REQKEY_DEFL_REQUESTOR_KEYRING","KEY_REQKEY_DEFL_SESSION_KEYRING","KEY_REQKEY_DEFL_THREAD_KEYRING","KEY_REQKEY_DEFL_USER_KEYRING","KEY_REQKEY_DEFL_USER_SESSION_KEYRING","KEY_SPEC_GROUP_KEYRING","KEY_SPEC_PROCESS_KEYRING","KEY_SPEC_REQKEY_AUTH_KEY","KEY_SPEC_REQUESTOR_KEYRING","KEY_SPEC_SESSION_KEYRING","KEY_SPEC_THREAD_KEYRING","KEY_SPEC_USER_KEYRING","KEY_SPEC_USER_SESSION_KEYRING","LC_ADDRESS","LC_ADDRESS_MASK","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_IDENTIFICATION","LC_IDENTIFICATION_MASK","LC_MEASUREMENT","LC_MEASUREMENT_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NAME","LC_NAME_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_PAPER","LC_PAPER_MASK","LC_TELEPHONE","LC_TELEPHONE_MASK","LC_TIME","LC_TIME_MASK","LED_CNT","LED_MAX","LINUX_REBOOT_CMD_CAD_OFF","LINUX_REBOOT_CMD_CAD_ON","LINUX_REBOOT_CMD_HALT","LINUX_REBOOT_CMD_KEXEC","LINUX_REBOOT_CMD_POWER_OFF","LINUX_REBOOT_CMD_RESTART","LINUX_REBOOT_CMD_RESTART2","LINUX_REBOOT_CMD_SW_SUSPEND","LINUX_REBOOT_MAGIC1","LINUX_REBOOT_MAGIC2","LINUX_REBOOT_MAGIC2A","LINUX_REBOOT_MAGIC2B","LINUX_REBOOT_MAGIC2C","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LM_ID_BASE","LM_ID_NEWLM","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_KERN","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","Lmid_t","MADV_COLD","MADV_COLLAPSE","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_DONTNEED_LOCKED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_KEEPONFORK","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_PAGEOUT","MADV_POPULATE_READ","MADV_POPULATE_WRITE","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MADV_WIPEONFORK","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_HUGE_MASK","MAP_HUGE_SHIFT","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MAXTC","MAXTTL","MAX_ADDR_LEN","MAX_IPOPTLEN","MAX_LINKS","MCAST_BLOCK_SOURCE","MCAST_EXCLUDE","MCAST_INCLUDE","MCAST_JOIN_GROUP","MCAST_JOIN_SOURCE_GROUP","MCAST_LEAVE_GROUP","MCAST_LEAVE_SOURCE_GROUP","MCAST_MSFILTER","MCAST_UNBLOCK_SOURCE","MCL_CURRENT","MCL_FUTURE","MCL_ONFAULT","MEMBARRIER_CMD_GLOBAL","MEMBARRIER_CMD_GLOBAL_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED","MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE","MEMBARRIER_CMD_QUERY","MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ","MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE","MFD_ALLOW_SEALING","MFD_CLOEXEC","MFD_EXEC","MFD_HUGETLB","MFD_HUGE_16GB","MFD_HUGE_16MB","MFD_HUGE_1GB","MFD_HUGE_1MB","MFD_HUGE_256MB","MFD_HUGE_2GB","MFD_HUGE_2MB","MFD_HUGE_32MB","MFD_HUGE_512KB","MFD_HUGE_512MB","MFD_HUGE_64KB","MFD_HUGE_8MB","MFD_HUGE_MASK","MFD_HUGE_SHIFT","MFD_NOEXEC_SEAL","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX3_SUPER_MAGIC","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MINSIGSTKSZ","MLOCK_ONFAULT","MMAP_PAGE_ZERO","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MOVE_MOUNT_BENEATH","MOVE_MOUNT_F_AUTOMOUNTS","MOVE_MOUNT_F_EMPTY_PATH","MOVE_MOUNT_F_SYMLINKS","MOVE_MOUNT_SET_GROUP","MOVE_MOUNT_T_AUTOMOUNTS","MOVE_MOUNT_T_EMPTY_PATH","MOVE_MOUNT_T_SYMLINKS","MPOL_BIND","MPOL_DEFAULT","MPOL_F_NUMA_BALANCING","MPOL_F_RELATIVE_NODES","MPOL_F_STATIC_NODES","MPOL_INTERLEAVE","MPOL_LOCAL","MPOL_PREFERRED","MREMAP_DONTUNMAP","MREMAP_FIXED","MREMAP_MAYMOVE","MSC_CNT","MSC_MAX","MSDOS_SUPER_MAGIC","MSG_CMSG_CLOEXEC","MSG_CONFIRM","MSG_COPY","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_EXCEPT","MSG_FASTOPEN","MSG_FIN","MSG_INFO","MSG_MORE","MSG_NOERROR","MSG_NOSIGNAL","MSG_NOTIFICATION","MSG_OOB","MSG_PEEK","MSG_RST","MSG_STAT","MSG_SYN","MSG_TRUNC","MSG_TRYHARD","MSG_WAITALL","MSG_WAITFORONE","MSG_ZEROCOPY","MS_ACTIVE","MS_ASYNC","MS_BIND","MS_DIRSYNC","MS_INVALIDATE","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNC","MS_SYNCHRONOUS","MS_UNBINDABLE","M_ARENA_MAX","M_ARENA_TEST","M_CHECK_ACTION","M_GRAIN","M_KEEP","M_MMAP_MAX","M_MMAP_THRESHOLD","M_MXFAST","M_NLBLKS","M_PERTURB","M_TOP_PAD","M_TRIM_THRESHOLD","NCCS","NCP_SUPER_MAGIC","NDA_CACHEINFO","NDA_DST","NDA_IFINDEX","NDA_LINK_NETNSID","NDA_LLADDR","NDA_MASTER","NDA_PORT","NDA_PROBES","NDA_SRC_VNI","NDA_UNSPEC","NDA_VLAN","NDA_VNI","NETLINK_ADD_MEMBERSHIP","NETLINK_AUDIT","NETLINK_BROADCAST_ERROR","NETLINK_CAP_ACK","NETLINK_CONNECTOR","NETLINK_CRYPTO","NETLINK_DNRTMSG","NETLINK_DROP_MEMBERSHIP","NETLINK_ECRYPTFS","NETLINK_EXT_ACK","NETLINK_FIB_LOOKUP","NETLINK_FIREWALL","NETLINK_GENERIC","NETLINK_GET_STRICT_CHK","NETLINK_INET_DIAG","NETLINK_IP6_FW","NETLINK_ISCSI","NETLINK_KOBJECT_UEVENT","NETLINK_LISTEN_ALL_NSID","NETLINK_LIST_MEMBERSHIPS","NETLINK_NETFILTER","NETLINK_NFLOG","NETLINK_NO_ENOBUFS","NETLINK_PKTINFO","NETLINK_RDMA","NETLINK_ROUTE","NETLINK_RX_RING","NETLINK_SCSITRANSPORT","NETLINK_SELINUX","NETLINK_SOCK_DIAG","NETLINK_TX_RING","NETLINK_UNUSED","NETLINK_USERSOCK","NETLINK_XFRM","NET_802","NET_ATALK","NET_AX25","NET_BRIDGE","NET_CORE","NET_DCCP","NET_DECNET","NET_ECONET","NET_ETHER","NET_IPV4","NET_IPV6","NET_IPX","NET_IRDA","NET_LLC","NET_NETFILTER","NET_NETROM","NET_ROSE","NET_SCTP","NET_TR","NET_UNIX","NET_X25","NEW_TIME","NFNETLINK_V0","NFNLGRP_ACCT_QUOTA","NFNLGRP_CONNTRACK_DESTROY","NFNLGRP_CONNTRACK_EXP_DESTROY","NFNLGRP_CONNTRACK_EXP_NEW","NFNLGRP_CONNTRACK_EXP_UPDATE","NFNLGRP_CONNTRACK_NEW","NFNLGRP_CONNTRACK_UPDATE","NFNLGRP_NFTABLES","NFNLGRP_NFTRACE","NFNLGRP_NONE","NFNL_BATCH_GENID","NFNL_BATCH_UNSPEC","NFNL_MSG_BATCH_BEGIN","NFNL_MSG_BATCH_END","NFNL_SUBSYS_ACCT","NFNL_SUBSYS_COUNT","NFNL_SUBSYS_CTHELPER","NFNL_SUBSYS_CTNETLINK","NFNL_SUBSYS_CTNETLINK_EXP","NFNL_SUBSYS_CTNETLINK_TIMEOUT","NFNL_SUBSYS_HOOK","NFNL_SUBSYS_IPSET","NFNL_SUBSYS_NFTABLES","NFNL_SUBSYS_NFT_COMPAT","NFNL_SUBSYS_NONE","NFNL_SUBSYS_OSF","NFNL_SUBSYS_QUEUE","NFNL_SUBSYS_ULOG","NFPROTO_ARP","NFPROTO_BRIDGE","NFPROTO_DECNET","NFPROTO_INET","NFPROTO_IPV4","NFPROTO_IPV6","NFPROTO_NETDEV","NFPROTO_NUMPROTO","NFPROTO_UNSPEC","NFQA_CAP_LEN","NFQA_CFG_CMD","NFQA_CFG_FLAGS","NFQA_CFG_F_CONNTRACK","NFQA_CFG_F_FAIL_OPEN","NFQA_CFG_F_GSO","NFQA_CFG_F_MAX","NFQA_CFG_F_SECCTX","NFQA_CFG_F_UID_GID","NFQA_CFG_MASK","NFQA_CFG_PARAMS","NFQA_CFG_QUEUE_MAXLEN","NFQA_CFG_UNSPEC","NFQA_CT","NFQA_CT_INFO","NFQA_EXP","NFQA_GID","NFQA_HWADDR","NFQA_IFINDEX_INDEV","NFQA_IFINDEX_OUTDEV","NFQA_IFINDEX_PHYSINDEV","NFQA_IFINDEX_PHYSOUTDEV","NFQA_L2HDR","NFQA_MARK","NFQA_PACKET_HDR","NFQA_PAYLOAD","NFQA_PRIORITY","NFQA_SECCTX","NFQA_SKB_CSUMNOTREADY","NFQA_SKB_CSUM_NOTVERIFIED","NFQA_SKB_GSO","NFQA_SKB_INFO","NFQA_TIMESTAMP","NFQA_UID","NFQA_UNSPEC","NFQA_VERDICT_HDR","NFQA_VLAN","NFQA_VLAN_PROTO","NFQA_VLAN_TCI","NFQA_VLAN_UNSPEC","NFQNL_CFG_CMD_BIND","NFQNL_CFG_CMD_NONE","NFQNL_CFG_CMD_PF_BIND","NFQNL_CFG_CMD_PF_UNBIND","NFQNL_CFG_CMD_UNBIND","NFQNL_COPY_META","NFQNL_COPY_NONE","NFQNL_COPY_PACKET","NFQNL_MSG_CONFIG","NFQNL_MSG_PACKET","NFQNL_MSG_VERDICT","NFQNL_MSG_VERDICT_BATCH","NFS_SUPER_MAGIC","NFT_BREAK","NFT_BYTEORDER_HTON","NFT_BYTEORDER_NTOH","NFT_CHAIN_MAXNAMELEN","NFT_CMP_EQ","NFT_CMP_GT","NFT_CMP_GTE","NFT_CMP_LT","NFT_CMP_LTE","NFT_CMP_NEQ","NFT_CONTINUE","NFT_CT_BYTES","NFT_CT_DIRECTION","NFT_CT_DST","NFT_CT_EXPIRATION","NFT_CT_HELPER","NFT_CT_L3PROTOCOL","NFT_CT_LABELS","NFT_CT_MARK","NFT_CT_PKTS","NFT_CT_PROTOCOL","NFT_CT_PROTO_DST","NFT_CT_PROTO_SRC","NFT_CT_SECMARK","NFT_CT_SRC","NFT_CT_STATE","NFT_CT_STATUS","NFT_DATA_RESERVED_MASK","NFT_DATA_VALUE","NFT_DATA_VALUE_MAXLEN","NFT_DATA_VERDICT","NFT_DYNSET_F_INV","NFT_DYNSET_OP_ADD","NFT_DYNSET_OP_UPDATE","NFT_GOTO","NFT_JUMP","NFT_LIMIT_F_INV","NFT_LIMIT_PKTS","NFT_LIMIT_PKT_BYTES","NFT_LOOKUP_F_INV","NFT_META_BRI_IIFNAME","NFT_META_BRI_OIFNAME","NFT_META_CGROUP","NFT_META_CPU","NFT_META_IIF","NFT_META_IIFGROUP","NFT_META_IIFNAME","NFT_META_IIFTYPE","NFT_META_L4PROTO","NFT_META_LEN","NFT_META_MARK","NFT_META_NFPROTO","NFT_META_NFTRACE","NFT_META_OIF","NFT_META_OIFGROUP","NFT_META_OIFNAME","NFT_META_OIFTYPE","NFT_META_PKTTYPE","NFT_META_PRANDOM","NFT_META_PRIORITY","NFT_META_PROTOCOL","NFT_META_RTCLASSID","NFT_META_SECMARK","NFT_META_SKGID","NFT_META_SKUID","NFT_MSG_DELCHAIN","NFT_MSG_DELOBJ","NFT_MSG_DELRULE","NFT_MSG_DELSET","NFT_MSG_DELSETELEM","NFT_MSG_DELTABLE","NFT_MSG_GETCHAIN","NFT_MSG_GETGEN","NFT_MSG_GETOBJ","NFT_MSG_GETOBJ_RESET","NFT_MSG_GETRULE","NFT_MSG_GETSET","NFT_MSG_GETSETELEM","NFT_MSG_GETTABLE","NFT_MSG_MAX","NFT_MSG_NEWCHAIN","NFT_MSG_NEWGEN","NFT_MSG_NEWOBJ","NFT_MSG_NEWRULE","NFT_MSG_NEWSET","NFT_MSG_NEWSETELEM","NFT_MSG_NEWTABLE","NFT_MSG_TRACE","NFT_NAT_DNAT","NFT_NAT_SNAT","NFT_NG_INCREMENTAL","NFT_NG_RANDOM","NFT_OBJ_MAXNAMELEN","NFT_PAYLOAD_CSUM_INET","NFT_PAYLOAD_CSUM_NONE","NFT_PAYLOAD_LL_HEADER","NFT_PAYLOAD_NETWORK_HEADER","NFT_PAYLOAD_TRANSPORT_HEADER","NFT_QUEUE_FLAG_BYPASS","NFT_QUEUE_FLAG_CPU_FANOUT","NFT_QUEUE_FLAG_MASK","NFT_QUOTA_F_INV","NFT_RANGE_EQ","NFT_RANGE_NEQ","NFT_REG32_00","NFT_REG32_01","NFT_REG32_02","NFT_REG32_03","NFT_REG32_04","NFT_REG32_05","NFT_REG32_06","NFT_REG32_07","NFT_REG32_08","NFT_REG32_09","NFT_REG32_10","NFT_REG32_11","NFT_REG32_12","NFT_REG32_13","NFT_REG32_14","NFT_REG32_15","NFT_REG32_SIZE","NFT_REG_1","NFT_REG_2","NFT_REG_3","NFT_REG_4","NFT_REG_SIZE","NFT_REG_VERDICT","NFT_REJECT_ICMPX_ADMIN_PROHIBITED","NFT_REJECT_ICMPX_HOST_UNREACH","NFT_REJECT_ICMPX_NO_ROUTE","NFT_REJECT_ICMPX_PORT_UNREACH","NFT_REJECT_ICMPX_UNREACH","NFT_REJECT_ICMP_UNREACH","NFT_REJECT_TCP_RST","NFT_RETURN","NFT_SET_ANONYMOUS","NFT_SET_CONSTANT","NFT_SET_ELEM_INTERVAL_END","NFT_SET_EVAL","NFT_SET_INTERVAL","NFT_SET_MAP","NFT_SET_MAXNAMELEN","NFT_SET_POL_MEMORY","NFT_SET_POL_PERFORMANCE","NFT_SET_TIMEOUT","NFT_TABLE_MAXNAMELEN","NFT_TRACETYPE_POLICY","NFT_TRACETYPE_RETURN","NFT_TRACETYPE_RULE","NFT_TRACETYPE_UNSPEC","NFT_USERDATA_MAXLEN","NFULA_CFG_CMD","NFULA_CFG_FLAGS","NFULA_CFG_MODE","NFULA_CFG_NLBUFSIZ","NFULA_CFG_QTHRESH","NFULA_CFG_TIMEOUT","NFULA_CFG_UNSPEC","NFULA_CT","NFULA_CT_INFO","NFULA_GID","NFULA_HWADDR","NFULA_HWHEADER","NFULA_HWLEN","NFULA_HWTYPE","NFULA_IFINDEX_INDEV","NFULA_IFINDEX_OUTDEV","NFULA_IFINDEX_PHYSINDEV","NFULA_IFINDEX_PHYSOUTDEV","NFULA_L2HDR","NFULA_MARK","NFULA_PACKET_HDR","NFULA_PAYLOAD","NFULA_PREFIX","NFULA_SEQ","NFULA_SEQ_GLOBAL","NFULA_TIMESTAMP","NFULA_UID","NFULA_UNSPEC","NFULA_VLAN","NFULA_VLAN_PROTO","NFULA_VLAN_TCI","NFULA_VLAN_UNSPEC","NFULNL_CFG_CMD_BIND","NFULNL_CFG_CMD_NONE","NFULNL_CFG_CMD_PF_BIND","NFULNL_CFG_CMD_PF_UNBIND","NFULNL_CFG_CMD_UNBIND","NFULNL_CFG_F_CONNTRACK","NFULNL_CFG_F_SEQ","NFULNL_CFG_F_SEQ_GLOBAL","NFULNL_COPY_META","NFULNL_COPY_NONE","NFULNL_COPY_PACKET","NFULNL_MSG_CONFIG","NFULNL_MSG_PACKET","NF_ACCEPT","NF_DROP","NF_INET_FORWARD","NF_INET_LOCAL_IN","NF_INET_LOCAL_OUT","NF_INET_NUMHOOKS","NF_INET_POST_ROUTING","NF_INET_PRE_ROUTING","NF_IP6_FORWARD","NF_IP6_LOCAL_IN","NF_IP6_LOCAL_OUT","NF_IP6_NUMHOOKS","NF_IP6_POST_ROUTING","NF_IP6_PRE_ROUTING","NF_IP6_PRI_CONNTRACK","NF_IP6_PRI_CONNTRACK_DEFRAG","NF_IP6_PRI_CONNTRACK_HELPER","NF_IP6_PRI_FILTER","NF_IP6_PRI_FIRST","NF_IP6_PRI_LAST","NF_IP6_PRI_MANGLE","NF_IP6_PRI_NAT_DST","NF_IP6_PRI_NAT_SRC","NF_IP6_PRI_RAW","NF_IP6_PRI_SECURITY","NF_IP6_PRI_SELINUX_FIRST","NF_IP6_PRI_SELINUX_LAST","NF_IP_FORWARD","NF_IP_LOCAL_IN","NF_IP_LOCAL_OUT","NF_IP_NUMHOOKS","NF_IP_POST_ROUTING","NF_IP_PRE_ROUTING","NF_IP_PRI_CONNTRACK","NF_IP_PRI_CONNTRACK_CONFIRM","NF_IP_PRI_CONNTRACK_DEFRAG","NF_IP_PRI_CONNTRACK_HELPER","NF_IP_PRI_FILTER","NF_IP_PRI_FIRST","NF_IP_PRI_LAST","NF_IP_PRI_MANGLE","NF_IP_PRI_NAT_DST","NF_IP_PRI_NAT_SRC","NF_IP_PRI_RAW","NF_IP_PRI_SECURITY","NF_IP_PRI_SELINUX_FIRST","NF_IP_PRI_SELINUX_LAST","NF_MAX_VERDICT","NF_NETDEV_INGRESS","NF_NETDEV_NUMHOOKS","NF_QUEUE","NF_REPEAT","NF_STOLEN","NF_STOP","NF_VERDICT_BITS","NF_VERDICT_FLAG_QUEUE_BYPASS","NF_VERDICT_MASK","NF_VERDICT_QBITS","NF_VERDICT_QMASK","NILFS_SUPER_MAGIC","NI_DGRAM","NI_IDN","NI_MAXHOST","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSERV","NL0","NL1","NLA_ALIGN","NLA_ALIGNTO","NLA_F_NESTED","NLA_F_NET_BYTEORDER","NLA_TYPE_MASK","NLDLY","NLMSG_DONE","NLMSG_ERROR","NLMSG_MIN_TYPE","NLMSG_NOOP","NLMSG_OVERRUN","NLM_F_ACK","NLM_F_APPEND","NLM_F_ATOMIC","NLM_F_CREATE","NLM_F_DUMP","NLM_F_DUMP_FILTERED","NLM_F_DUMP_INTR","NLM_F_ECHO","NLM_F_EXCL","NLM_F_MATCH","NLM_F_MULTI","NLM_F_REPLACE","NLM_F_REQUEST","NLM_F_ROOT","NOEXPR","NOFLSH","NOSTR","NSFS_MAGIC","NTF_EXT_LEARNED","NTF_MASTER","NTF_OFFLOADED","NTF_PROXY","NTF_ROUTER","NTF_SELF","NTF_USE","NTP_API","NT_ASRS","NT_AUXV","NT_FPREGSET","NT_GWINDOWS","NT_LWPSINFO","NT_LWPSTATUS","NT_PLATFORM","NT_PRCRED","NT_PRFPREG","NT_PRFPXREG","NT_PRPSINFO","NT_PRSTATUS","NT_PRXREG","NT_PSINFO","NT_PSTATUS","NT_TASKSTRUCT","NT_UTSNAME","NUD_DELAY","NUD_FAILED","NUD_INCOMPLETE","NUD_NOARP","NUD_NONE","NUD_PERMANENT","NUD_PROBE","NUD_REACHABLE","NUD_STALE","OCFS2_SUPER_MAGIC","OCRNL","OFDEL","OFILL","OLCUC","OLD_TIME","ONLCR","ONLRET","ONOCR","OPENPROM_SUPER_MAGIC","OPEN_TREE_CLOEXEC","OPEN_TREE_CLONE","OPOST","ORIG_RAX","OVERLAYFS_SUPER_MAGIC","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","PACKET_ADD_MEMBERSHIP","PACKET_DROP_MEMBERSHIP","PACKET_MR_ALLMULTI","PACKET_MR_MULTICAST","PACKET_MR_PROMISC","PACKET_MR_UNICAST","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_ALG","PF_APPLETALK","PF_ASH","PF_ATMPVC","PF_ATMSVC","PF_AX25","PF_BLUETOOTH","PF_BRIDGE","PF_CAIF","PF_CAN","PF_DECnet","PF_DUMPCORE","PF_ECONET","PF_EXITING","PF_FORKNOEXEC","PF_IB","PF_IDLE","PF_IEEE802154","PF_INET","PF_INET6","PF_IO_WORKER","PF_IPX","PF_IRDA","PF_ISDN","PF_IUCV","PF_KEY","PF_KSWAPD","PF_KTHREAD","PF_LLC","PF_LOCAL","PF_LOCAL_THROTTLE","PF_MASKOS","PF_MASKPROC","PF_MCE_EARLY","PF_MCE_PROCESS","PF_MEMALLOC","PF_MEMALLOC_NOFS","PF_MEMALLOC_NOIO","PF_MEMALLOC_PIN","PF_MPLS","PF_NETBEUI","PF_NETLINK","PF_NETROM","PF_NFC","PF_NOFREEZE","PF_NO_SETAFFINITY","PF_NPROC_EXCEEDED","PF_PACKET","PF_PHONET","PF_POSTCOREDUMP","PF_PPPOX","PF_R","PF_RANDOMIZE","PF_RDS","PF_ROSE","PF_ROUTE","PF_RXRPC","PF_SECURITY","PF_SIGNALED","PF_SNA","PF_SUPERPRIV","PF_TIPC","PF_UNIX","PF_UNSPEC","PF_USED_MATH","PF_USER_WORKER","PF_VCPU","PF_VSOCK","PF_W","PF_WANPIPE","PF_WQ_WORKER","PF_X","PF_X25","PF_XDP","PIDFD_NONBLOCK","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSCHEDPARAM","POSIX_SPAWN_SETSCHEDULER","POSIX_SPAWN_SETSID","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_USEVFORK","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_SUPER_MAGIC","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","PR_CAPBSET_DROP","PR_CAPBSET_READ","PR_CAP_AMBIENT","PR_CAP_AMBIENT_CLEAR_ALL","PR_CAP_AMBIENT_IS_SET","PR_CAP_AMBIENT_LOWER","PR_CAP_AMBIENT_RAISE","PR_ENDIAN_BIG","PR_ENDIAN_LITTLE","PR_ENDIAN_PPC_LITTLE","PR_FPEMU_NOPRINT","PR_FPEMU_SIGFPE","PR_FP_EXC_ASYNC","PR_FP_EXC_DISABLED","PR_FP_EXC_DIV","PR_FP_EXC_INV","PR_FP_EXC_NONRECOV","PR_FP_EXC_OVF","PR_FP_EXC_PRECISE","PR_FP_EXC_RES","PR_FP_EXC_SW_ENABLE","PR_FP_EXC_UND","PR_FP_MODE_FR","PR_FP_MODE_FRE","PR_GET_CHILD_SUBREAPER","PR_GET_DUMPABLE","PR_GET_ENDIAN","PR_GET_FPEMU","PR_GET_FPEXC","PR_GET_FP_MODE","PR_GET_KEEPCAPS","PR_GET_NAME","PR_GET_NO_NEW_PRIVS","PR_GET_PDEATHSIG","PR_GET_SECCOMP","PR_GET_SECUREBITS","PR_GET_SPECULATION_CTRL","PR_GET_THP_DISABLE","PR_GET_TID_ADDRESS","PR_GET_TIMERSLACK","PR_GET_TIMING","PR_GET_TSC","PR_GET_UNALIGN","PR_MCE_KILL","PR_MCE_KILL_CLEAR","PR_MCE_KILL_DEFAULT","PR_MCE_KILL_EARLY","PR_MCE_KILL_GET","PR_MCE_KILL_LATE","PR_MCE_KILL_SET","PR_MPX_DISABLE_MANAGEMENT","PR_MPX_ENABLE_MANAGEMENT","PR_SCHED_CORE","PR_SCHED_CORE_CREATE","PR_SCHED_CORE_GET","PR_SCHED_CORE_MAX","PR_SCHED_CORE_SCOPE_PROCESS_GROUP","PR_SCHED_CORE_SCOPE_THREAD","PR_SCHED_CORE_SCOPE_THREAD_GROUP","PR_SCHED_CORE_SHARE_FROM","PR_SCHED_CORE_SHARE_TO","PR_SET_CHILD_SUBREAPER","PR_SET_DUMPABLE","PR_SET_ENDIAN","PR_SET_FPEMU","PR_SET_FPEXC","PR_SET_FP_MODE","PR_SET_KEEPCAPS","PR_SET_MM","PR_SET_MM_ARG_END","PR_SET_MM_ARG_START","PR_SET_MM_AUXV","PR_SET_MM_BRK","PR_SET_MM_END_CODE","PR_SET_MM_END_DATA","PR_SET_MM_ENV_END","PR_SET_MM_ENV_START","PR_SET_MM_EXE_FILE","PR_SET_MM_MAP","PR_SET_MM_MAP_SIZE","PR_SET_MM_START_BRK","PR_SET_MM_START_CODE","PR_SET_MM_START_DATA","PR_SET_MM_START_STACK","PR_SET_NAME","PR_SET_NO_NEW_PRIVS","PR_SET_PDEATHSIG","PR_SET_PTRACER","PR_SET_PTRACER_ANY","PR_SET_SECCOMP","PR_SET_SECUREBITS","PR_SET_SPECULATION_CTRL","PR_SET_THP_DISABLE","PR_SET_TIMERSLACK","PR_SET_TIMING","PR_SET_TSC","PR_SET_UNALIGN","PR_SET_VMA","PR_SET_VMA_ANON_NAME","PR_SPEC_DISABLE","PR_SPEC_DISABLE_NOEXEC","PR_SPEC_ENABLE","PR_SPEC_FORCE_DISABLE","PR_SPEC_INDIRECT_BRANCH","PR_SPEC_NOT_AFFECTED","PR_SPEC_PRCTL","PR_SPEC_STORE_BYPASS","PR_TASK_PERF_EVENTS_DISABLE","PR_TASK_PERF_EVENTS_ENABLE","PR_TIMING_STATISTICAL","PR_TIMING_TIMESTAMP","PR_TSC_ENABLE","PR_TSC_SIGSEGV","PR_UNALIGN_NOPRINT","PR_UNALIGN_SIGBUS","PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","PTHREAD_EXPLICIT_SCHED","PTHREAD_INHERIT_SCHED","PTHREAD_MUTEX_ADAPTIVE_NP","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_MUTEX_ROBUST","PTHREAD_MUTEX_STALLED","PTHREAD_ONCE_INIT","PTHREAD_PRIO_INHERIT","PTHREAD_PRIO_NONE","PTHREAD_PRIO_PROTECT","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_GETSIGMASK","PTRACE_GET_RSEQ_CONFIGURATION","PTRACE_GET_SYSCALL_INFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_MASK","PTRACE_O_SUSPEND_SECCOMP","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKSIGINFO_SHARED","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SETSIGMASK","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSCALL_INFO_ENTRY","PTRACE_SYSCALL_INFO_EXIT","PTRACE_SYSCALL_INFO_NONE","PTRACE_SYSCALL_INFO_SECCOMP","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","PT_DYNAMIC","PT_GNU_EH_FRAME","PT_GNU_RELRO","PT_GNU_STACK","PT_HIOS","PT_HIPROC","PT_HISUNW","PT_INTERP","PT_LOAD","PT_LOOS","PT_LOPROC","PT_LOSUNW","PT_NOTE","PT_NULL","PT_NUM","PT_PHDR","PT_SHLIB","PT_SUNWBSS","PT_SUNWSTACK","PT_TLS","P_ALL","P_PGID","P_PID","P_PIDFD","QCMD","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QNX4_SUPER_MAGIC","QNX6_SUPER_MAGIC","Q_GETFMT","Q_GETINFO","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETINFO","Q_SETQUOTA","Q_SYNC","R10","R11","R12","R13","R14","R15","R8","R9","RADIXCHAR","RAND_MAX","RAX","RBP","RBX","RB_AUTOBOOT","RB_DISABLE_CAD","RB_ENABLE_CAD","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RCX","RDI","RDTGROUP_SUPER_MAGIC","RDX","READ_IMPLIES_EXEC","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_CR2","REG_CSGSFS","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EEND","REG_EESCAPE","REG_EFL","REG_ENOSYS","REG_EPAREN","REG_ERANGE","REG_ERPAREN","REG_ERR","REG_ESIZE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_NEWLINE","REG_NOMATCH","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_OLDMASK","REG_R10","REG_R11","REG_R12","REG_R13","REG_R14","REG_R15","REG_R8","REG_R9","REG_RAX","REG_RBP","REG_RBX","REG_RCX","REG_RDI","REG_RDX","REG_RIP","REG_RSI","REG_RSP","REG_STARTEND","REG_TRAPNO","REISERFS_SUPER_MAGIC","REL_CNT","REL_MAX","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","REP_CNT","REP_MAX","RESOLVE_BENEATH","RESOLVE_CACHED","RESOLVE_IN_ROOT","RESOLVE_NO_MAGICLINKS","RESOLVE_NO_SYMLINKS","RESOLVE_NO_XDEV","RIP","RLIM64_INFINITY","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NLIMITS","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RLIM_SAVED_CUR","RLIM_SAVED_MAX","RSI","RSP","RTA_CACHEINFO","RTA_DST","RTA_ENCAP","RTA_ENCAP_TYPE","RTA_EXPIRES","RTA_FLOW","RTA_GATEWAY","RTA_IIF","RTA_MARK","RTA_METRICS","RTA_MFC_STATS","RTA_MP_ALGO","RTA_MULTIPATH","RTA_NEWDST","RTA_OIF","RTA_PAD","RTA_PREF","RTA_PREFSRC","RTA_PRIORITY","RTA_PROTOINFO","RTA_SESSION","RTA_SRC","RTA_TABLE","RTA_TTL_PROPAGATE","RTA_UID","RTA_UNSPEC","RTA_VIA","RTCF_DIRECTSRC","RTCF_DOREDIRECT","RTCF_LOG","RTCF_MASQ","RTCF_NAT","RTCF_VALVE","RTEXT_FILTER_BRVLAN","RTEXT_FILTER_BRVLAN_COMPRESSED","RTEXT_FILTER_CFM_CONFIG","RTEXT_FILTER_CFM_STATUS","RTEXT_FILTER_MRP","RTEXT_FILTER_SKIP_STATS","RTEXT_FILTER_VF","RTF_ADDRCLASSMASK","RTF_ADDRCONF","RTF_ALLONLINK","RTF_BROADCAST","RTF_CACHE","RTF_DEFAULT","RTF_DYNAMIC","RTF_FLOW","RTF_GATEWAY","RTF_HOST","RTF_INTERFACE","RTF_IRTT","RTF_LINKRT","RTF_LOCAL","RTF_MODIFIED","RTF_MSS","RTF_MTU","RTF_MULTICAST","RTF_NAT","RTF_NOFORWARD","RTF_NONEXTHOP","RTF_NOPMTUDISC","RTF_POLICY","RTF_REINSTATE","RTF_REJECT","RTF_STATIC","RTF_THROW","RTF_UP","RTF_WINDOW","RTF_XRESOLVE","RTLD_DEEPBIND","RTLD_DEFAULT","RTLD_DI_CONFIGADDR","RTLD_DI_LINKMAP","RTLD_DI_LMID","RTLD_DI_ORIGIN","RTLD_DI_PROFILENAME","RTLD_DI_PROFILEOUT","RTLD_DI_SERINFO","RTLD_DI_SERINFOSIZE","RTLD_DI_TLS_DATA","RTLD_DI_TLS_MODID","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTMGRP_DECnet_IFADDR","RTMGRP_DECnet_ROUTE","RTMGRP_IPV4_IFADDR","RTMGRP_IPV4_MROUTE","RTMGRP_IPV4_ROUTE","RTMGRP_IPV4_RULE","RTMGRP_IPV6_IFADDR","RTMGRP_IPV6_IFINFO","RTMGRP_IPV6_MROUTE","RTMGRP_IPV6_PREFIX","RTMGRP_IPV6_ROUTE","RTMGRP_LINK","RTMGRP_NEIGH","RTMGRP_NOTIFY","RTMGRP_TC","RTMSG_AR_FAILED","RTMSG_CONTROL","RTMSG_DELDEVICE","RTMSG_DELROUTE","RTMSG_DELRULE","RTMSG_NEWDEVICE","RTMSG_NEWROUTE","RTMSG_NEWRULE","RTMSG_OVERRUN","RTM_DELACTION","RTM_DELADDR","RTM_DELADDRLABEL","RTM_DELLINK","RTM_DELMDB","RTM_DELNEIGH","RTM_DELNETCONF","RTM_DELNSID","RTM_DELQDISC","RTM_DELROUTE","RTM_DELRULE","RTM_DELTCLASS","RTM_DELTFILTER","RTM_F_CLONED","RTM_F_EQUALIZE","RTM_F_FIB_MATCH","RTM_F_LOOKUP_TABLE","RTM_F_NOTIFY","RTM_F_PREFIX","RTM_GETACTION","RTM_GETADDR","RTM_GETADDRLABEL","RTM_GETANYCAST","RTM_GETDCB","RTM_GETLINK","RTM_GETMDB","RTM_GETMULTICAST","RTM_GETNEIGH","RTM_GETNEIGHTBL","RTM_GETNETCONF","RTM_GETNSID","RTM_GETQDISC","RTM_GETROUTE","RTM_GETRULE","RTM_GETSTATS","RTM_GETTCLASS","RTM_GETTFILTER","RTM_NEWACTION","RTM_NEWADDR","RTM_NEWADDRLABEL","RTM_NEWCACHEREPORT","RTM_NEWLINK","RTM_NEWMDB","RTM_NEWNDUSEROPT","RTM_NEWNEIGH","RTM_NEWNEIGHTBL","RTM_NEWNETCONF","RTM_NEWNSID","RTM_NEWPREFIX","RTM_NEWQDISC","RTM_NEWROUTE","RTM_NEWRULE","RTM_NEWSTATS","RTM_NEWTCLASS","RTM_NEWTFILTER","RTM_SETDCB","RTM_SETLINK","RTM_SETNEIGHTBL","RTNLGRP_BRVLAN","RTNLGRP_DCB","RTNLGRP_DECnet_IFADDR","RTNLGRP_DECnet_ROUTE","RTNLGRP_DECnet_RULE","RTNLGRP_IPV4_IFADDR","RTNLGRP_IPV4_MROUTE","RTNLGRP_IPV4_MROUTE_R","RTNLGRP_IPV4_NETCONF","RTNLGRP_IPV4_ROUTE","RTNLGRP_IPV4_RULE","RTNLGRP_IPV6_IFADDR","RTNLGRP_IPV6_IFINFO","RTNLGRP_IPV6_MROUTE","RTNLGRP_IPV6_MROUTE_R","RTNLGRP_IPV6_NETCONF","RTNLGRP_IPV6_PREFIX","RTNLGRP_IPV6_ROUTE","RTNLGRP_IPV6_RULE","RTNLGRP_LINK","RTNLGRP_MCTP_IFADDR","RTNLGRP_MDB","RTNLGRP_MPLS_NETCONF","RTNLGRP_MPLS_ROUTE","RTNLGRP_ND_USEROPT","RTNLGRP_NEIGH","RTNLGRP_NEXTHOP","RTNLGRP_NONE","RTNLGRP_NOP2","RTNLGRP_NOP4","RTNLGRP_NOTIFY","RTNLGRP_NSID","RTNLGRP_PHONET_IFADDR","RTNLGRP_PHONET_ROUTE","RTNLGRP_STATS","RTNLGRP_TC","RTNLGRP_TUNNEL","RTN_ANYCAST","RTN_BLACKHOLE","RTN_BROADCAST","RTN_LOCAL","RTN_MULTICAST","RTN_NAT","RTN_PROHIBIT","RTN_THROW","RTN_UNICAST","RTN_UNREACHABLE","RTN_UNSPEC","RTN_XRESOLVE","RTPROT_BOOT","RTPROT_KERNEL","RTPROT_REDIRECT","RTPROT_STATIC","RTPROT_UNSPEC","RT_ADDRCLASS","RT_CLASS_DEFAULT","RT_CLASS_LOCAL","RT_CLASS_MAIN","RT_CLASS_MAX","RT_CLASS_UNSPEC","RT_LOCALADDR","RT_SCOPE_HOST","RT_SCOPE_LINK","RT_SCOPE_NOWHERE","RT_SCOPE_SITE","RT_SCOPE_UNIVERSE","RT_TABLE_COMPAT","RT_TABLE_DEFAULT","RT_TABLE_LOCAL","RT_TABLE_MAIN","RT_TABLE_UNSPEC","RT_TOS","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","RUSAGE_THREAD","RWF_APPEND","RWF_DSYNC","RWF_HIPRI","RWF_NOWAIT","RWF_SYNC","R_OK","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCHED_BATCH","SCHED_DEADLINE","SCHED_FIFO","SCHED_FLAG_ALL","SCHED_FLAG_DL_OVERRUN","SCHED_FLAG_KEEP_ALL","SCHED_FLAG_KEEP_PARAMS","SCHED_FLAG_KEEP_POLICY","SCHED_FLAG_RECLAIM","SCHED_FLAG_RESET_ON_FORK","SCHED_FLAG_UTIL_CLAMP","SCHED_FLAG_UTIL_CLAMP_MAX","SCHED_FLAG_UTIL_CLAMP_MIN","SCHED_IDLE","SCHED_NORMAL","SCHED_OTHER","SCHED_RESET_ON_FORK","SCHED_RR","SCM_CREDENTIALS","SCM_J1939_DEST_ADDR","SCM_J1939_DEST_NAME","SCM_J1939_ERRQUEUE","SCM_J1939_PRIO","SCM_RIGHTS","SCM_TIMESTAMP","SCM_TIMESTAMPING","SCM_TIMESTAMPING_OPT_STATS","SCM_TIMESTAMPING_PKTINFO","SCM_TIMESTAMPNS","SCM_TXTIME","SCM_WIFI_STATUS","SCTP_ABORT","SCTP_ADAPTATION_LAYER","SCTP_ADDR_OVER","SCTP_ALL_ASSOC","SCTP_ASSOCINFO","SCTP_AUTHINFO","SCTP_AUTH_ACTIVE_KEY","SCTP_AUTH_CHUNK","SCTP_AUTH_DEACTIVATE_KEY","SCTP_AUTH_DELETE_KEY","SCTP_AUTH_KEY","SCTP_AUTOCLOSE","SCTP_AUTO_ASCONF","SCTP_CONTEXT","SCTP_CURRENT_ASSOC","SCTP_DEFAULT_SEND_PARAM","SCTP_DEFAULT_SNDINFO","SCTP_DELAYED_ACK","SCTP_DELAYED_ACK_TIME","SCTP_DELAYED_SACK","SCTP_DISABLE_FRAGMENTS","SCTP_DSTADDRV4","SCTP_DSTADDRV6","SCTP_ENABLE_CHANGE_ASSOC_REQ","SCTP_ENABLE_RESET_ASSOC_REQ","SCTP_ENABLE_RESET_STREAM_REQ","SCTP_ENABLE_STRRESET_MASK","SCTP_EOF","SCTP_EVENTS","SCTP_FRAGMENT_INTERLEAVE","SCTP_FUTURE_ASSOC","SCTP_GET_ASSOC_ID_LIST","SCTP_GET_ASSOC_NUMBER","SCTP_GET_PEER_ADDR_INFO","SCTP_HMAC_IDENT","SCTP_INIT","SCTP_INITMSG","SCTP_I_WANT_MAPPED_V4_ADDR","SCTP_LOCAL_AUTH_CHUNKS","SCTP_MAXSEG","SCTP_MAX_BURST","SCTP_NODELAY","SCTP_NOTIFICATION","SCTP_NXTINFO","SCTP_PARTIAL_DELIVERY_POINT","SCTP_PEER_ADDR_PARAMS","SCTP_PEER_ADDR_THLDS","SCTP_PEER_ADDR_THLDS_V2","SCTP_PEER_AUTH_CHUNKS","SCTP_PRIMARY_ADDR","SCTP_PRINFO","SCTP_PR_INDEX","SCTP_PR_POLICY","SCTP_PR_PRIO_ENABLED","SCTP_PR_RTX_ENABLED","SCTP_PR_SCTP_ALL","SCTP_PR_SCTP_MASK","SCTP_PR_SCTP_MAX","SCTP_PR_SCTP_NONE","SCTP_PR_SCTP_PRIO","SCTP_PR_SCTP_RTX","SCTP_PR_SCTP_TTL","SCTP_PR_SET_POLICY","SCTP_PR_TTL_ENABLED","SCTP_RCVINFO","SCTP_RECVNXTINFO","SCTP_RECVRCVINFO","SCTP_REUSE_PORT","SCTP_RTOINFO","SCTP_SACK_IMMEDIATELY","SCTP_SENDALL","SCTP_SET_PEER_PRIMARY_ADDR","SCTP_SNDINFO","SCTP_SNDRCV","SCTP_STATUS","SCTP_STREAM_RESET_INCOMING","SCTP_STREAM_RESET_OUTGOING","SCTP_UNORDERED","SECCOMP_ADDFD_FLAG_SEND","SECCOMP_ADDFD_FLAG_SETFD","SECCOMP_FILTER_FLAG_LOG","SECCOMP_FILTER_FLAG_NEW_LISTENER","SECCOMP_FILTER_FLAG_SPEC_ALLOW","SECCOMP_FILTER_FLAG_TSYNC","SECCOMP_FILTER_FLAG_TSYNC_ESRCH","SECCOMP_FILTER_FLAG_WAIT_KILLABLE_RECV","SECCOMP_GET_ACTION_AVAIL","SECCOMP_GET_NOTIF_SIZES","SECCOMP_MODE_DISABLED","SECCOMP_MODE_FILTER","SECCOMP_MODE_STRICT","SECCOMP_RET_ACTION","SECCOMP_RET_ACTION_FULL","SECCOMP_RET_ALLOW","SECCOMP_RET_DATA","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SECCOMP_SET_MODE_FILTER","SECCOMP_SET_MODE_STRICT","SECCOMP_USER_NOTIF_FLAG_CONTINUE","SECURITYFS_MAGIC","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SELFMAG","SELINUX_MAGIC","SEM_FAILED","SFD_CLOEXEC","SFD_NONBLOCK","SHM_EXEC","SHM_HUGETLB","SHM_LOCK","SHM_NORESERVE","SHM_R","SHM_RDONLY","SHM_REMAP","SHM_RND","SHM_UNLOCK","SHM_W","SHORT_INODE","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGEV_THREAD_ID","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMAX","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDIFADDR","SIOCDRARP","SIOCETHTOOL","SIOCGARP","SIOCGHWTSTAMP","SIOCGIFADDR","SIOCGIFBR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFCOUNT","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFPFLAGS","SIOCGIFSLAVE","SIOCGIFTXQLEN","SIOCGIWAP","SIOCGIWAPLIST","SIOCGIWAUTH","SIOCGIWENCODE","SIOCGIWENCODEEXT","SIOCGIWESSID","SIOCGIWFRAG","SIOCGIWFREQ","SIOCGIWGENIE","SIOCGIWMODE","SIOCGIWNAME","SIOCGIWNICKN","SIOCGIWNWID","SIOCGIWPOWER","SIOCGIWPRIV","SIOCGIWRANGE","SIOCGIWRATE","SIOCGIWRETRY","SIOCGIWRTS","SIOCGIWSCAN","SIOCGIWSENS","SIOCGIWSPY","SIOCGIWSTATS","SIOCGIWTHRSPY","SIOCGIWTXPOW","SIOCGMIIPHY","SIOCGMIIREG","SIOCGRARP","SIOCGSKNS","SIOCIWFIRST","SIOCIWFIRSTPRIV","SIOCIWLAST","SIOCIWLASTPRIV","SIOCOUTQNSD","SIOCSARP","SIOCSHWTSTAMP","SIOCSIFADDR","SIOCSIFBR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFHWBROADCAST","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNAME","SIOCSIFNETMASK","SIOCSIFPFLAGS","SIOCSIFSLAVE","SIOCSIFTXQLEN","SIOCSIWAP","SIOCSIWAUTH","SIOCSIWCOMMIT","SIOCSIWENCODE","SIOCSIWENCODEEXT","SIOCSIWESSID","SIOCSIWFRAG","SIOCSIWFREQ","SIOCSIWGENIE","SIOCSIWMLME","SIOCSIWMODE","SIOCSIWNICKN","SIOCSIWNWID","SIOCSIWPMKSA","SIOCSIWPOWER","SIOCSIWPRIV","SIOCSIWRANGE","SIOCSIWRATE","SIOCSIWRETRY","SIOCSIWRTS","SIOCSIWSCAN","SIOCSIWSENS","SIOCSIWSPY","SIOCSIWSTATS","SIOCSIWTHRSPY","SIOCSIWTXPOW","SIOCSMIIREG","SIOCSRARP","SIOCWANDEV","SIOGIFINDEX","SI_LOAD_SHIFT","SKF_AD_ALU_XOR_X","SKF_AD_CPU","SKF_AD_HATYPE","SKF_AD_IFINDEX","SKF_AD_MARK","SKF_AD_MAX","SKF_AD_NLATTR","SKF_AD_NLATTR_NEST","SKF_AD_OFF","SKF_AD_PAY_OFFSET","SKF_AD_PKTTYPE","SKF_AD_PROTOCOL","SKF_AD_QUEUE","SKF_AD_RANDOM","SKF_AD_RXHASH","SKF_AD_VLAN_TAG","SKF_AD_VLAN_TAG_PRESENT","SKF_AD_VLAN_TPID","SKF_LL_OFF","SKF_NET_OFF","SK_MEMINFO_BACKLOG","SK_MEMINFO_DROPS","SK_MEMINFO_FWD_ALLOC","SK_MEMINFO_OPTMEM","SK_MEMINFO_RCVBUF","SK_MEMINFO_RMEM_ALLOC","SK_MEMINFO_SNDBUF","SK_MEMINFO_WMEM_ALLOC","SK_MEMINFO_WMEM_QUEUED","SMACK_MAGIC","SMB_SUPER_MAGIC","SND_CNT","SND_MAX","SOCK_CLOEXEC","SOCK_DCCP","SOCK_DGRAM","SOCK_NONBLOCK","SOCK_PACKET","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOF_TIMESTAMPING_OPT_CMSG","SOF_TIMESTAMPING_OPT_ID","SOF_TIMESTAMPING_OPT_PKTINFO","SOF_TIMESTAMPING_OPT_STATS","SOF_TIMESTAMPING_OPT_TSONLY","SOF_TIMESTAMPING_OPT_TX_SWHW","SOF_TIMESTAMPING_RAW_HARDWARE","SOF_TIMESTAMPING_RX_HARDWARE","SOF_TIMESTAMPING_RX_SOFTWARE","SOF_TIMESTAMPING_SOFTWARE","SOF_TIMESTAMPING_SYS_HARDWARE","SOF_TIMESTAMPING_TX_ACK","SOF_TIMESTAMPING_TX_HARDWARE","SOF_TIMESTAMPING_TX_SCHED","SOF_TIMESTAMPING_TX_SOFTWARE","SOF_TXTIME_DEADLINE_MODE","SOF_TXTIME_REPORT_ERRORS","SOL_AAL","SOL_ALG","SOL_ATM","SOL_BLUETOOTH","SOL_CAIF","SOL_CAN_BASE","SOL_CAN_J1939","SOL_CAN_RAW","SOL_DCCP","SOL_DECNET","SOL_ICMPV6","SOL_IP","SOL_IPV6","SOL_IRDA","SOL_IUCV","SOL_LLC","SOL_NETBEUI","SOL_NETLINK","SOL_NFC","SOL_PACKET","SOL_PNPIPE","SOL_PPPOL2TP","SOL_RAW","SOL_RDS","SOL_RXRPC","SOL_SOCKET","SOL_TCP","SOL_TIPC","SOL_TLS","SOL_UDP","SOL_X25","SOL_XDP","SOMAXCONN","SO_ACCEPTCONN","SO_ATTACH_BPF","SO_ATTACH_FILTER","SO_ATTACH_REUSEPORT_CBPF","SO_ATTACH_REUSEPORT_EBPF","SO_BINDTODEVICE","SO_BINDTOIFINDEX","SO_BPF_EXTENSIONS","SO_BROADCAST","SO_BSDCOMPAT","SO_BUSY_POLL","SO_CNX_ADVICE","SO_COOKIE","SO_DEBUG","SO_DETACH_BPF","SO_DETACH_FILTER","SO_DETACH_REUSEPORT_BPF","SO_DOMAIN","SO_DONTROUTE","SO_EE_OFFENDER","SO_EE_ORIGIN_ICMP","SO_EE_ORIGIN_ICMP6","SO_EE_ORIGIN_LOCAL","SO_EE_ORIGIN_NONE","SO_EE_ORIGIN_TIMESTAMPING","SO_EE_ORIGIN_TXSTATUS","SO_ERROR","SO_GET_FILTER","SO_INCOMING_CPU","SO_INCOMING_NAPI_ID","SO_J1939_ERRQUEUE","SO_J1939_FILTER","SO_J1939_PROMISC","SO_J1939_SEND_PRIO","SO_KEEPALIVE","SO_LINGER","SO_LOCK_FILTER","SO_MARK","SO_MAX_PACING_RATE","SO_MEMINFO","SO_NOFCS","SO_NO_CHECK","SO_OOBINLINE","SO_ORIGINAL_DST","SO_PASSCRED","SO_PASSSEC","SO_PEEK_OFF","SO_PEERCRED","SO_PEERGROUPS","SO_PEERNAME","SO_PEERSEC","SO_PRIORITY","SO_PROTOCOL","SO_RCVBUF","SO_RCVBUFFORCE","SO_RCVLOWAT","SO_RCVTIMEO","SO_RCVTIMEO_NEW","SO_REUSEADDR","SO_REUSEPORT","SO_RXQ_OVFL","SO_SECURITY_AUTHENTICATION","SO_SECURITY_ENCRYPTION_NETWORK","SO_SECURITY_ENCRYPTION_TRANSPORT","SO_SELECT_ERR_QUEUE","SO_SNDBUF","SO_SNDBUFFORCE","SO_SNDLOWAT","SO_SNDTIMEO","SO_SNDTIMEO_NEW","SO_TIMESTAMP","SO_TIMESTAMPING","SO_TIMESTAMPING_NEW","SO_TIMESTAMPNS","SO_TIMESTAMPNS_NEW","SO_TIMESTAMP_NEW","SO_TXTIME","SO_TYPE","SO_WIFI_STATUS","SO_ZEROCOPY","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SS","SS_DISABLE","SS_ONSTACK","STATX_ALL","STATX_ATIME","STATX_ATTR_APPEND","STATX_ATTR_AUTOMOUNT","STATX_ATTR_COMPRESSED","STATX_ATTR_DAX","STATX_ATTR_ENCRYPTED","STATX_ATTR_IMMUTABLE","STATX_ATTR_MOUNT_ROOT","STATX_ATTR_NODUMP","STATX_ATTR_VERITY","STATX_BASIC_STATS","STATX_BLOCKS","STATX_BTIME","STATX_CTIME","STATX_DIOALIGN","STATX_GID","STATX_INO","STATX_MNT_ID","STATX_MODE","STATX_MTIME","STATX_NLINK","STATX_SIZE","STATX_TYPE","STATX_UID","STATX__RESERVED","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","STICKY_TIMEOUTS","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","SW_CNT","SW_MAX","SYNC_FILE_RANGE_WAIT_AFTER","SYNC_FILE_RANGE_WAIT_BEFORE","SYNC_FILE_RANGE_WRITE","SYN_CNT","SYN_MAX","SYSFS_MAGIC","SYS__sysctl","SYS_accept","SYS_accept4","SYS_access","SYS_acct","SYS_add_key","SYS_adjtimex","SYS_afs_syscall","SYS_alarm","SYS_arch_prctl","SYS_bind","SYS_bpf","SYS_brk","SYS_capget","SYS_capset","SYS_chdir","SYS_chmod","SYS_chown","SYS_chroot","SYS_clock_adjtime","SYS_clock_getres","SYS_clock_gettime","SYS_clock_nanosleep","SYS_clock_settime","SYS_clone","SYS_clone3","SYS_close","SYS_close_range","SYS_connect","SYS_copy_file_range","SYS_creat","SYS_create_module","SYS_delete_module","SYS_dup","SYS_dup2","SYS_dup3","SYS_epoll_create","SYS_epoll_create1","SYS_epoll_ctl","SYS_epoll_ctl_old","SYS_epoll_pwait","SYS_epoll_pwait2","SYS_epoll_wait","SYS_epoll_wait_old","SYS_eventfd","SYS_eventfd2","SYS_execve","SYS_execveat","SYS_exit","SYS_exit_group","SYS_faccessat","SYS_faccessat2","SYS_fadvise64","SYS_fallocate","SYS_fanotify_init","SYS_fanotify_mark","SYS_fchdir","SYS_fchmod","SYS_fchmodat","SYS_fchown","SYS_fchownat","SYS_fcntl","SYS_fdatasync","SYS_fgetxattr","SYS_finit_module","SYS_flistxattr","SYS_flock","SYS_fork","SYS_fremovexattr","SYS_fsconfig","SYS_fsetxattr","SYS_fsmount","SYS_fsopen","SYS_fspick","SYS_fstat","SYS_fstatfs","SYS_fsync","SYS_ftruncate","SYS_futex","SYS_futex_waitv","SYS_futimesat","SYS_get_kernel_syms","SYS_get_mempolicy","SYS_get_robust_list","SYS_get_thread_area","SYS_getcpu","SYS_getcwd","SYS_getdents","SYS_getdents64","SYS_getegid","SYS_geteuid","SYS_getgid","SYS_getgroups","SYS_getitimer","SYS_getpeername","SYS_getpgid","SYS_getpgrp","SYS_getpid","SYS_getpmsg","SYS_getppid","SYS_getpriority","SYS_getrandom","SYS_getresgid","SYS_getresuid","SYS_getrlimit","SYS_getrusage","SYS_getsid","SYS_getsockname","SYS_getsockopt","SYS_gettid","SYS_gettimeofday","SYS_getuid","SYS_getxattr","SYS_init_module","SYS_inotify_add_watch","SYS_inotify_init","SYS_inotify_init1","SYS_inotify_rm_watch","SYS_io_cancel","SYS_io_destroy","SYS_io_getevents","SYS_io_setup","SYS_io_submit","SYS_io_uring_enter","SYS_io_uring_register","SYS_io_uring_setup","SYS_ioctl","SYS_ioperm","SYS_iopl","SYS_ioprio_get","SYS_ioprio_set","SYS_kcmp","SYS_kexec_file_load","SYS_kexec_load","SYS_keyctl","SYS_kill","SYS_landlock_add_rule","SYS_landlock_create_ruleset","SYS_landlock_restrict_self","SYS_lchown","SYS_lgetxattr","SYS_link","SYS_linkat","SYS_listen","SYS_listxattr","SYS_llistxattr","SYS_lookup_dcookie","SYS_lremovexattr","SYS_lseek","SYS_lsetxattr","SYS_lstat","SYS_madvise","SYS_mbind","SYS_membarrier","SYS_memfd_create","SYS_memfd_secret","SYS_migrate_pages","SYS_mincore","SYS_mkdir","SYS_mkdirat","SYS_mknod","SYS_mknodat","SYS_mlock","SYS_mlock2","SYS_mlockall","SYS_mmap","SYS_modify_ldt","SYS_mount","SYS_mount_setattr","SYS_move_mount","SYS_move_pages","SYS_mprotect","SYS_mq_getsetattr","SYS_mq_notify","SYS_mq_open","SYS_mq_timedreceive","SYS_mq_timedsend","SYS_mq_unlink","SYS_mremap","SYS_msgctl","SYS_msgget","SYS_msgrcv","SYS_msgsnd","SYS_msync","SYS_munlock","SYS_munlockall","SYS_munmap","SYS_name_to_handle_at","SYS_nanosleep","SYS_newfstatat","SYS_nfsservctl","SYS_open","SYS_open_by_handle_at","SYS_open_tree","SYS_openat","SYS_openat2","SYS_pause","SYS_perf_event_open","SYS_personality","SYS_pidfd_getfd","SYS_pidfd_open","SYS_pidfd_send_signal","SYS_pipe","SYS_pipe2","SYS_pivot_root","SYS_pkey_alloc","SYS_pkey_free","SYS_pkey_mprotect","SYS_poll","SYS_ppoll","SYS_prctl","SYS_pread64","SYS_preadv","SYS_preadv2","SYS_prlimit64","SYS_process_madvise","SYS_process_mrelease","SYS_process_vm_readv","SYS_process_vm_writev","SYS_pselect6","SYS_ptrace","SYS_putpmsg","SYS_pwrite64","SYS_pwritev","SYS_pwritev2","SYS_query_module","SYS_quotactl","SYS_quotactl_fd","SYS_read","SYS_readahead","SYS_readlink","SYS_readlinkat","SYS_readv","SYS_reboot","SYS_recvfrom","SYS_recvmmsg","SYS_recvmsg","SYS_remap_file_pages","SYS_removexattr","SYS_rename","SYS_renameat","SYS_renameat2","SYS_request_key","SYS_restart_syscall","SYS_rmdir","SYS_rseq","SYS_rt_sigaction","SYS_rt_sigpending","SYS_rt_sigprocmask","SYS_rt_sigqueueinfo","SYS_rt_sigreturn","SYS_rt_sigsuspend","SYS_rt_sigtimedwait","SYS_rt_tgsigqueueinfo","SYS_sched_get_priority_max","SYS_sched_get_priority_min","SYS_sched_getaffinity","SYS_sched_getattr","SYS_sched_getparam","SYS_sched_getscheduler","SYS_sched_rr_get_interval","SYS_sched_setaffinity","SYS_sched_setattr","SYS_sched_setparam","SYS_sched_setscheduler","SYS_sched_yield","SYS_seccomp","SYS_security","SYS_select","SYS_semctl","SYS_semget","SYS_semop","SYS_semtimedop","SYS_sendfile","SYS_sendmmsg","SYS_sendmsg","SYS_sendto","SYS_set_mempolicy","SYS_set_mempolicy_home_node","SYS_set_robust_list","SYS_set_thread_area","SYS_set_tid_address","SYS_setdomainname","SYS_setfsgid","SYS_setfsuid","SYS_setgid","SYS_setgroups","SYS_sethostname","SYS_setitimer","SYS_setns","SYS_setpgid","SYS_setpriority","SYS_setregid","SYS_setresgid","SYS_setresuid","SYS_setreuid","SYS_setrlimit","SYS_setsid","SYS_setsockopt","SYS_settimeofday","SYS_setuid","SYS_setxattr","SYS_shmat","SYS_shmctl","SYS_shmdt","SYS_shmget","SYS_shutdown","SYS_sigaltstack","SYS_signalfd","SYS_signalfd4","SYS_socket","SYS_socketpair","SYS_splice","SYS_stat","SYS_statfs","SYS_statx","SYS_swapoff","SYS_swapon","SYS_symlink","SYS_symlinkat","SYS_sync","SYS_sync_file_range","SYS_syncfs","SYS_sysfs","SYS_sysinfo","SYS_syslog","SYS_tee","SYS_tgkill","SYS_time","SYS_timer_create","SYS_timer_delete","SYS_timer_getoverrun","SYS_timer_gettime","SYS_timer_settime","SYS_timerfd_create","SYS_timerfd_gettime","SYS_timerfd_settime","SYS_times","SYS_tkill","SYS_truncate","SYS_tuxcall","SYS_umask","SYS_umount2","SYS_uname","SYS_unlink","SYS_unlinkat","SYS_unshare","SYS_uselib","SYS_userfaultfd","SYS_ustat","SYS_utime","SYS_utimensat","SYS_utimes","SYS_vfork","SYS_vhangup","SYS_vmsplice","SYS_vserver","SYS_wait4","SYS_waitid","SYS_write","SYS_writev","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCA_CHAIN","TCA_DUMP_INVISIBLE","TCA_FCNT","TCA_HW_OFFLOAD","TCA_KIND","TCA_OPTIONS","TCA_PAD","TCA_RATE","TCA_STAB","TCA_STATS","TCA_STATS2","TCA_UNSPEC","TCA_XSTATS","TCFLSH","TCGETA","TCGETS","TCGETS2","TCGETX","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_CC_INFO","TCP_CM_INQ","TCP_CONGESTION","TCP_COOKIE_TRANSACTIONS","TCP_CORK","TCP_DEFER_ACCEPT","TCP_FASTOPEN","TCP_FASTOPEN_CONNECT","TCP_FASTOPEN_KEY","TCP_FASTOPEN_NO_COOKIE","TCP_INFO","TCP_INQ","TCP_KEEPCNT","TCP_KEEPIDLE","TCP_KEEPINTVL","TCP_LINGER2","TCP_MAXSEG","TCP_MD5SIG","TCP_MD5SIG_EXT","TCP_MD5SIG_MAXKEYLEN","TCP_NODELAY","TCP_NOTSENT_LOWAT","TCP_QUEUE_SEQ","TCP_QUICKACK","TCP_REPAIR","TCP_REPAIR_OPTIONS","TCP_REPAIR_QUEUE","TCP_REPAIR_WINDOW","TCP_SAVED_SYN","TCP_SAVE_SYN","TCP_SYNCNT","TCP_THIN_DUPACK","TCP_THIN_LINEAR_TIMEOUTS","TCP_TIMESTAMP","TCP_ULP","TCP_USER_TIMEOUT","TCP_WINDOW_CLAMP","TCP_ZEROCOPY_RECEIVE","TCSADRAIN","TCSAFLUSH","TCSANOW","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETS2","TCSETSF","TCSETSF2","TCSETSW","TCSETSW2","TCSETX","TCSETXF","TCSETXW","TCXONC","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TFD_TIMER_CANCEL_ON_SET","THOUSEP","TIMER_ABSTIME","TIME_BAD","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCONS","TIOCEXCL","TIOCGDEV","TIOCGETD","TIOCGEXCL","TIOCGICOUNT","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGPKT","TIOCGPTLCK","TIOCGPTN","TIOCGPTPEER","TIOCGRS485","TIOCGSERIAL","TIOCGSID","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMIWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSBRK","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSIG","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSPTLCK","TIOCSRS485","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","TIOCVHANGUP","TLS_1_2_VERSION","TLS_1_2_VERSION_MAJOR","TLS_1_2_VERSION_MINOR","TLS_1_3_VERSION","TLS_1_3_VERSION_MAJOR","TLS_1_3_VERSION_MINOR","TLS_CIPHER_AES_GCM_128","TLS_CIPHER_AES_GCM_128_IV_SIZE","TLS_CIPHER_AES_GCM_128_KEY_SIZE","TLS_CIPHER_AES_GCM_128_REC_SEQ_SIZE","TLS_CIPHER_AES_GCM_128_SALT_SIZE","TLS_CIPHER_AES_GCM_128_TAG_SIZE","TLS_CIPHER_AES_GCM_256","TLS_CIPHER_AES_GCM_256_IV_SIZE","TLS_CIPHER_AES_GCM_256_KEY_SIZE","TLS_CIPHER_AES_GCM_256_REC_SEQ_SIZE","TLS_CIPHER_AES_GCM_256_SALT_SIZE","TLS_CIPHER_AES_GCM_256_TAG_SIZE","TLS_CIPHER_CHACHA20_POLY1305","TLS_CIPHER_CHACHA20_POLY1305_IV_SIZE","TLS_CIPHER_CHACHA20_POLY1305_KEY_SIZE","TLS_CIPHER_CHACHA20_POLY1305_REC_SEQ_SIZE","TLS_CIPHER_CHACHA20_POLY1305_SALT_SIZE","TLS_CIPHER_CHACHA20_POLY1305_TAG_SIZE","TLS_GET_RECORD_TYPE","TLS_RX","TLS_SET_RECORD_TYPE","TLS_TX","TMPFS_MAGIC","TMP_MAX","TOSTOP","TRACEFS_MAGIC","TUN_FLT_ALLMULTI","TUN_F_CSUM","TUN_F_TSO4","TUN_F_TSO6","TUN_F_TSO_ECN","TUN_F_UFO","TUN_F_USO4","TUN_F_USO6","TUN_PKT_STRIP","TUN_READQ_SIZE","TUN_TAP_DEV","TUN_TUN_DEV","TUN_TX_TIMESTAMP","TUN_TYPE_MASK","T_FMT","T_FMT_AMPM","UDF_SUPER_MAGIC","UDP_CORK","UDP_ENCAP","UDP_GRO","UDP_NO_CHECK6_RX","UDP_NO_CHECK6_TX","UDP_SEGMENT","UINPUT_MAX_NAME_SIZE","UINPUT_VERSION","UIO_MAXIOV","UMOUNT_NOFOLLOW","UNAME26","USBDEVICE_SUPER_MAGIC","USER_PROCESS","USRQUOTA","UTIME_NOW","UTIME_OMIT","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_LOCAL","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VM_BLOCK_DUMP","VM_DIRTY_BACKGROUND","VM_DIRTY_EXPIRE_CS","VM_DIRTY_RATIO","VM_DIRTY_WB_CS","VM_DROP_PAGECACHE","VM_HUGETLB_GROUP","VM_HUGETLB_PAGES","VM_LAPTOP_MODE","VM_LEGACY_VA_LAYOUT","VM_LOWMEM_RESERVE_RATIO","VM_MAX_MAP_COUNT","VM_MIN_FREE_KBYTES","VM_MIN_SLAB","VM_MIN_UNMAPPED","VM_NR_PDFLUSH_THREADS","VM_OVERCOMMIT_MEMORY","VM_OVERCOMMIT_RATIO","VM_PAGEBUF","VM_PAGE_CLUSTER","VM_PANIC_ON_OOM","VM_PERCPU_PAGELIST_FRACTION","VM_SWAPPINESS","VM_SWAP_TOKEN_TIMEOUT","VM_VDSO_ENABLED","VM_VFS_CACHE_PRESSURE","VM_ZONE_RECLAIM_MODE","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WHOLE_SECONDS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WIRELESS_EXT","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_EXITCODE","W_OK","W_STOPCODE","XATTR_CREATE","XATTR_REPLACE","XDP_COPY","XDP_MMAP_OFFSETS","XDP_OPTIONS","XDP_OPTIONS_ZEROCOPY","XDP_PGOFF_RX_RING","XDP_PGOFF_TX_RING","XDP_PKT_CONTD","XDP_RING_NEED_WAKEUP","XDP_RX_RING","XDP_SHARED_UMEM","XDP_STATISTICS","XDP_TX_RING","XDP_UMEM_COMPLETION_RING","XDP_UMEM_FILL_RING","XDP_UMEM_PGOFF_COMPLETION_RING","XDP_UMEM_PGOFF_FILL_RING","XDP_UMEM_REG","XDP_UMEM_UNALIGNED_CHUNK_FLAG","XDP_USE_NEED_WAKEUP","XDP_USE_SG","XDP_ZEROCOPY","XENFS_SUPER_MAGIC","XFS_SUPER_MAGIC","XSK_UNALIGNED_BUF_ADDR_MASK","XSK_UNALIGNED_BUF_OFFSET_SHIFT","XTABS","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_2_SYMLINKS","_PC_ALLOC_SIZE_MIN","_PC_ASYNC_IO","_PC_CHOWN_RESTRICTED","_PC_FILESIZEBITS","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_PRIO_IO","_PC_REC_INCR_XFER_SIZE","_PC_REC_MAX_XFER_SIZE","_PC_REC_MIN_XFER_SIZE","_PC_REC_XFER_ALIGN","_PC_SOCK_MAXBUF","_PC_SYMLINK_MAX","_PC_SYNC_IO","_PC_VDISABLE","_POSIX_VDISABLE","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_C_VERSION","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_AVPHYS_PAGES","_SC_BARRIERS","_SC_BASE","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHARCLASS_NAME_MAX","_SC_CHAR_BIT","_SC_CHAR_MAX","_SC_CHAR_MIN","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_C_LANG_SUPPORT","_SC_C_LANG_SUPPORT_R","_SC_DELAYTIMER_MAX","_SC_DEVICE_IO","_SC_DEVICE_SPECIFIC","_SC_DEVICE_SPECIFIC_R","_SC_EQUIV_CLASS_MAX","_SC_EXPR_NEST_MAX","_SC_FD_MGMT","_SC_FIFO","_SC_FILE_ATTRIBUTES","_SC_FILE_LOCKING","_SC_FILE_SYSTEM","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_INT_MAX","_SC_INT_MIN","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LEVEL1_DCACHE_ASSOC","_SC_LEVEL1_DCACHE_LINESIZE","_SC_LEVEL1_DCACHE_SIZE","_SC_LEVEL1_ICACHE_ASSOC","_SC_LEVEL1_ICACHE_LINESIZE","_SC_LEVEL1_ICACHE_SIZE","_SC_LEVEL2_CACHE_ASSOC","_SC_LEVEL2_CACHE_LINESIZE","_SC_LEVEL2_CACHE_SIZE","_SC_LEVEL3_CACHE_ASSOC","_SC_LEVEL3_CACHE_LINESIZE","_SC_LEVEL3_CACHE_SIZE","_SC_LEVEL4_CACHE_ASSOC","_SC_LEVEL4_CACHE_LINESIZE","_SC_LEVEL4_CACHE_SIZE","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_LONG_BIT","_SC_MAPPED_FILES","_SC_MB_LEN_MAX","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_MULTI_PROCESS","_SC_NETWORKING","_SC_NGROUPS_MAX","_SC_NL_ARGMAX","_SC_NL_LANGMAX","_SC_NL_MSGMAX","_SC_NL_NMAX","_SC_NL_SETMAX","_SC_NL_TEXTMAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_NZERO","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PII","_SC_PII_INTERNET","_SC_PII_INTERNET_DGRAM","_SC_PII_INTERNET_STREAM","_SC_PII_OSI","_SC_PII_OSI_CLTS","_SC_PII_OSI_COTS","_SC_PII_OSI_M","_SC_PII_SOCKET","_SC_PII_XTI","_SC_PIPE","_SC_POLL","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_REGEX_VERSION","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SCHAR_MAX","_SC_SCHAR_MIN","_SC_SELECT","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SHRT_MAX","_SC_SHRT_MIN","_SC_SIGNALS","_SC_SIGQUEUE_MAX","_SC_SINGLE_PROCESS","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SSIZE_MAX","_SC_SS_REPL_MAX","_SC_STREAMS","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_SYSTEM_DATABASE","_SC_SYSTEM_DATABASE_R","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_ROBUST_PRIO_INHERIT","_SC_THREAD_ROBUST_PRIO_PROTECT","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_T_IOV_MAX","_SC_UCHAR_MAX","_SC_UINT_MAX","_SC_UIO_MAXIOV","_SC_ULONG_MAX","_SC_USER_GROUPS","_SC_USER_GROUPS_R","_SC_USHRT_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_V7_ILP32_OFF32","_SC_V7_ILP32_OFFBIG","_SC_V7_LP64_OFF64","_SC_V7_LPBIG_OFFBIG","_SC_VERSION","_SC_WORD_BIT","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_SC_XOPEN_XPG2","_SC_XOPEN_XPG3","_SC_XOPEN_XPG4","__NFT_REG_MAX","__SIZEOF_PTHREAD_BARRIERATTR_T","__SIZEOF_PTHREAD_BARRIER_T","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__UT_HOSTSIZE","__UT_LINESIZE","__UT_NAMESIZE","__WALL","__WCLONE","__WNOTHREAD","__c_anonymous_ifc_ifcu","__c_anonymous_ifr_ifru","__c_anonymous_ifru_map","__c_anonymous_ptrace_syscall_info_data","__c_anonymous_ptrace_syscall_info_entry","__c_anonymous_ptrace_syscall_info_exit","__c_anonymous_ptrace_syscall_info_seccomp","__c_anonymous_sockaddr_can_can_addr","__c_anonymous_sockaddr_can_j1939","__c_anonymous_sockaddr_can_tp","__errno_location","__exit_status","__fsword_t","__glibc_reserved1","__glibc_reserved2","__glibc_reserved3","__glibc_reserved4","__kernel_rwf_t","__key","__priority_which_t","__rlimit_resource_t","__s16","__s32","__s64","__seq","__statx_timestamp_pad1","__syscall_ulong_t","__timeval","__u16","__u32","__u64","__u8","__unused1","__unused10","__unused11","__unused2","__unused3","__unused4","__unused5","__unused6","__unused7","__unused8","__unused9","_exit","_f","_libc_fpstate","_libc_fpxreg","_libc_xmmreg","_st","_xmm","abort","abs","absflat","absfuzz","absinfo","absmax","absmin","accept","accept4","access","acct","actime","addmntent","addr","addr","addr","addr","addr","addr_mask","addrinfo","adjtime","adjtimex","af","af_alg_iv","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_buf","aio_cancel","aio_data","aio_error","aio_fildes","aio_fildes","aio_flags","aio_fsync","aio_key","aio_lio_opcode","aio_lio_opcode","aio_nbytes","aio_nbytes","aio_offset","aio_offset","aio_read","aio_reqprio","aio_reqprio","aio_resfd","aio_return","aio_rw_flags","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arch","arch","arena","arena","args","args","args","arp_dev","arp_flags","arp_flags","arp_ha","arp_ha","arp_netmask","arp_netmask","arp_pa","arp_pa","arpd_request","arphdr","arpreq","arpreq_old","asctime_r","atexit","atof","atoi","atol","atoll","attack_length","attack_level","auth_keynumber","backtrace","base_addr","bind","blkcnt64_t","blkcnt_t","blksize_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brk","bsearch","bufferram","bustype","button","c_cc","c_cc","c_cflag","c_cflag","c_char","c_double","c_float","c_iflag","c_iflag","c_int","c_ispeed","c_ispeed","c_lflag","c_lflag","c_line","c_line","c_long","c_longlong","c_oflag","c_oflag","c_ospeed","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","can_addr","can_dlc","can_err_mask_t","can_family","can_filter","can_frame","can_id","can_id","can_id","can_ifindex","can_mask","canfd_frame","canid_t","canxl_frame","cc_t","center","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","cgroup","ch_addralign","ch_addralign","ch_reserved","ch_size","ch_size","ch_type","ch_type","chdir","child_tid","chmod","chown","chroot","chunk_size","chunk_size","cipher_type","clearenv","clearerr","clock_adjtime","clock_getcpuclockid","clock_getres","clock_gettime","clock_nanosleep","clock_settime","clock_t","clockid","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_args","close","close_range","closedir","closelog","cmd","cmsg_len","cmsg_level","cmsg_type","cmsghdr","code","code","code","codes_ptr","codes_size","connect","constant","consumer","consumer","cookie","copy_file_range","cpu_set_t","cr","cr","creat","creat64","cs","ctermid","ctime_r","cuid","currency_symbol","custom_data","custom_len","cwd","cwd","d_ino","d_ino","d_name","d_name","d_off","d_off","d_reclen","d_reclen","d_type","d_type","daemon","data","data","data","data","deadband","decimal_point","delay","desc","desc","dest_offset","dev","dev_t","difftime","direction","dirent","dirent64","dirfd","dirname","dl_iterate_phdr","dl_phdr_info","dladdr","dladdr1","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlinfo","dlmopen","dlopen","dlpi_addr","dlpi_adds","dlpi_name","dlpi_phdr","dlpi_phnum","dlpi_subs","dlpi_tls_data","dlpi_tls_modid","dlsym","dma","domainname","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curinodes","dqb_curspace","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_valid","dqblk","drand48","ds","dup","dup2","dup3","duplocale","e_ehsize","e_ehsize","e_entry","e_entry","e_exit","e_flags","e_flags","e_ident","e_ident","e_machine","e_machine","e_phentsize","e_phentsize","e_phnum","e_phnum","e_phoff","e_phoff","e_shentsize","e_shentsize","e_shnum","e_shnum","e_shoff","e_shoff","e_shstrndx","e_shstrndx","e_termination","e_type","e_type","e_version","e_version","eaccess","ee_code","ee_data","ee_errno","ee_info","ee_origin","ee_pad","ee_type","effect","effect_id","eflags","element","end_level","endgrent","endmntent","endpwent","endservent","endspent","endutxent","entry","envelope","envelope","envelope","epoll_create","epoll_create1","epoll_ctl","epoll_event","epoll_pwait","epoll_wait","erand48","errcnt","error","error","es","esterror","esterror","euidaccess","event_len","eventfd","eventfd_read","eventfd_t","eventfd_write","events","events","execl","execle","execlp","execv","execve","execveat","execvp","execvpe","exit","exit","exit_signal","explicit_bzero","exponent","f_bavail","f_bavail","f_bavail","f_bavail","f_bfree","f_bfree","f_bfree","f_bfree","f_blocks","f_blocks","f_blocks","f_blocks","f_bsize","f_bsize","f_bsize","f_bsize","f_favail","f_favail","f_ffree","f_ffree","f_ffree","f_ffree","f_files","f_files","f_files","f_files","f_flag","f_flag","f_flags","f_frsize","f_frsize","f_frsize","f_frsize","f_fsid","f_fsid","f_fsid","f_fsid","f_namelen","f_namelen","f_namemax","f_namemax","f_spare","f_type","f_type","faccessat","fade_length","fade_level","fallocate","fallocate64","fanotify_event_metadata","fanotify_init","fanotify_mark","fanotify_response","fchdir","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd","fd","fd_set","fdatasync","fdopen","fdopendir","feof","ferror","fexecve","ff_condition_effect","ff_constant_effect","ff_effect","ff_effects_max","ff_effects_max","ff_envelope","ff_periodic_effect","ff_ramp_effect","ff_replay","ff_rumble_effect","ff_trigger","fflush","fgetc","fgetgrent_r","fgetpos","fgetpos64","fgetpwent_r","fgets","fgetspent_r","fgetxattr","file_clone_range","fileno","filter","flag","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flags","flat","flistxattr","flock","flock","flock64","fmemopen","fmt","fop","fop","fopen","fopen64","fordblks","fordblks","fork","forkpty","fpathconf","fpos64_t","fpos_t","fpregs","fprintf","fputc","fputs","fr","fr","frac_digits","fread","fread_unlocked","free","freeaddrinfo","freehigh","freeifaddrs","freelocale","freeram","freeswap","fremovexattr","freopen","freopen64","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fs","fs_base","fsblkcnt_t","fscanf","fseek","fseeko","fseeko64","fsetpos","fsetpos64","fsetxattr","fsfilcnt_t","fsid_t","fsmblks","fsmblks","fstat","fstat64","fstatat","fstatat64","fstatfs","fstatfs64","fstatvfs","fstatvfs64","fsync","ftell","ftello","ftello64","ftok","ftruncate","ftruncate64","ftw","ftw","futimens","futimes","fuzz","fwrite","gai_strerror","genlmsghdr","getaddrinfo","getauxval","getchar","getchar_unlocked","getcontext","getcwd","getdomainname","getdtablesize","getegid","getentropy","getenv","geteuid","getgid","getgrent","getgrent_r","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","getifaddrs","getline","getloadavg","getlogin","getmntent","getmntent_r","getnameinfo","getopt","getopt_long","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprotobyname","getprotobynumber","getpt","getpwent","getpwent_r","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrandom","getresgid","getresuid","getrlimit","getrlimit64","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","getspent","getspent_r","getspnam","getspnam_r","gettid","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid","gid_t","gl_flags","gl_flags","gl_offs","gl_offs","gl_pathc","gl_pathc","gl_pathv","gl_pathv","glob","glob64","glob64_t","glob_t","globfree","globfree64","gmtime","gmtime_r","gnu_basename","gnu_get_libc_release","gnu_get_libc_version","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","greg_t","gregs","group","group","grouping","gs","gs_base","h_addr_list","h_addrtype","h_aliases","h_length","h_name","ha","has_arg","hasmntopt","hblkhd","hblkhd","hblks","hblks","headroom","headroom","hostent","hstrerror","hwtstamp_config","i387","iconv","iconv_close","iconv_open","iconv_t","id","id","id","id","id","id","id_t","idtype_t","if_freenameindex","if_index","if_indextoname","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_flags","ifa_ifu","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifc_ifcu","ifc_len","ifconf","ifcu_buf","ifcu_req","ifr6_addr","ifr6_ifindex","ifr6_prefixlen","ifr_ifru","ifr_name","ifreq","ifru_addr","ifru_broadaddr","ifru_data","ifru_dstaddr","ifru_flags","ifru_hwaddr","ifru_ifindex","ifru_map","ifru_metric","ifru_mtu","ifru_netmask","ifru_newname","ifru_slave","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_ifreq","in6_pktinfo","in6_rtmsg","in_addr","in_addr_t","in_pktinfo","in_port_t","index","info","info","info","initgroups","ino64_t","ino_t","inotify_add_watch","inotify_event","inotify_init","inotify_init1","inotify_rm_watch","input_absinfo","input_event","input_id","input_keymap_entry","input_mask","instruction_pointer","instruction_pointer","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","interval","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","iocb","ioctl","ioperm","iopl","iov_base","iov_len","iovec","ip","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","irq","is_error","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_interval","it_value","it_value","itimerspec","itimerval","iv","iv","iv","iv","ivlen","j1939","j1939_filter","jf","jitcnt","jitter","jrand48","jt","k","keepcost","keepcost","key","key","key","key_t","keycode","kill","killpg","l_len","l_len","l_linger","l_onoff","l_pid","l_pid","l_start","l_start","l_type","l_type","l_whence","l_whence","labs","lchown","lcong48","lconv","left_coeff","left_saturation","len","len","len","len","len","len","len","len","length","level","lgetxattr","linger","link","linkat","lio_listio","listen","listxattr","llistxattr","loads","locale_t","localeconv","localtime","localtime_r","lockf","loff_t","login_tty","lrand48","lremovexattr","lseek","lseek64","lsetxattr","lstat","lstat64","lutimes","machine","madvise","magic","magnitude","major","makecontext","makedev","mallinfo","mallinfo","mallinfo2","mallinfo2","malloc","malloc_info","malloc_trim","malloc_usable_size","mallopt","mask","mask","max_align_t","maxerror","maxerror","maximum","mcontext_t","mem_end","mem_start","mem_unit","memalign","memchr","memcmp","memcpy","memfd_create","memmem","memmove","memrchr","memset","metadata_len","mincore","minimum","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkostemp","mkostemps","mkstemp","mkstemps","mktime","mlock","mlock2","mlockall","mmap","mmap64","mmsghdr","mnt_dir","mnt_freq","mnt_fsname","mnt_opts","mnt_passno","mnt_type","mntent","mode","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mq_attr","mq_close","mq_curmsgs","mq_flags","mq_getattr","mq_maxmsg","mq_msgsize","mq_open","mq_receive","mq_send","mq_setattr","mq_timedreceive","mq_timedsend","mq_unlink","mqd_t","mr_address","mr_alen","mr_ifindex","mr_type","mrand48","mremap","msg","msg_control","msg_controllen","msg_ctime","msg_flags","msg_hdr","msg_iov","msg_iovlen","msg_len","msg_lrpid","msg_lspid","msg_name","msg_namelen","msg_perm","msg_qbytes","msg_qnum","msg_rtime","msg_stime","msgctl","msgget","msghdr","msginfo","msglen_t","msgmap","msgmax","msgmnb","msgmni","msgpool","msgqnum_t","msgrcv","msgseg","msgsnd","msgssz","msgtql","msqid_ds","msync","munlock","munlockall","munmap","mxcr_mask","mxcr_mask","mxcsr","mxcsr","n_cs_precedes","n_sep_by_space","n_sign_posn","name","name","name","name","name","name_mask","name_t","nanosleep","negative_sign","newfd","newfd_flags","newlocale","nfds_t","nice","nl_family","nl_groups","nl_item","nl_langinfo","nl_langinfo_l","nl_mmap_hdr","nl_mmap_req","nl_pid","nl_pktinfo","nla_len","nla_type","nlattr","nlink_t","nlmsg_flags","nlmsg_len","nlmsg_pid","nlmsg_seq","nlmsg_type","nlmsgerr","nlmsghdr","nm_block_nr","nm_block_size","nm_frame_nr","nm_frame_size","nm_gid","nm_group","nm_len","nm_pid","nm_status","nm_uid","nodename","nr","nr","nr","nr","nrand48","ntp_adjtime","ntp_gettime","ntptimeval","nxt_assoc_id","nxt_flags","nxt_length","nxt_ppid","nxt_sid","off","off64_t","off_t","offset","offset","old","op","open","open64","open_how","open_memstream","open_wmemstream","openat","openat64","opendir","openlog","openpty","option","options","ordblks","ordblks","orig_rax","p_aliases","p_align","p_align","p_cs_precedes","p_filesz","p_filesz","p_flags","p_flags","p_memsz","p_memsz","p_name","p_offset","p_offset","p_paddr","p_paddr","p_proto","p_sep_by_space","p_sign_posn","p_type","p_type","p_vaddr","p_vaddr","packet_mreq","pad","pad","pad","parent_tid","passwd","pathconf","pause","pclose","period","perror","personality","pgn","pgn","pgn_mask","pgn_t","phase","pid","pid","pid","pid_t","pidfd","pipe","pipe2","poll","pollfd","popen","port","positive_sign","posix_basename","posix_fadvise","posix_fadvise64","posix_fallocate","posix_fallocate64","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addchdir_np","posix_spawn_file_actions_addclose","posix_spawn_file_actions_addclosefrom_np","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addfchdir_np","posix_spawn_file_actions_addopen","posix_spawn_file_actions_addtcsetpgrp_np","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getschedparam","posix_spawnattr_getschedpolicy","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setschedparam","posix_spawnattr_setschedpolicy","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppoll","ppsfreq","pr_policy","pr_value","prctl","pread","pread64","preadv","preadv2","preadv64","preadv64v2","precision","printf","prio","priority_t","prlimit","prlimit64","process_vm_readv","process_vm_writev","procs","producer","producer","product","protoent","pselect","pthread_atfork","pthread_attr_destroy","pthread_attr_getaffinity_np","pthread_attr_getguardsize","pthread_attr_getinheritsched","pthread_attr_getschedparam","pthread_attr_getschedpolicy","pthread_attr_getstack","pthread_attr_getstacksize","pthread_attr_init","pthread_attr_setaffinity_np","pthread_attr_setdetachstate","pthread_attr_setguardsize","pthread_attr_setinheritsched","pthread_attr_setschedparam","pthread_attr_setschedpolicy","pthread_attr_setstacksize","pthread_attr_t","pthread_barrier_destroy","pthread_barrier_init","pthread_barrier_t","pthread_barrier_wait","pthread_barrierattr_destroy","pthread_barrierattr_getpshared","pthread_barrierattr_init","pthread_barrierattr_setpshared","pthread_barrierattr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getclock","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setclock","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_getaffinity_np","pthread_getattr_np","pthread_getcpuclockid","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_consistent","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_timedlock","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getprotocol","pthread_mutexattr_getpshared","pthread_mutexattr_getrobust","pthread_mutexattr_init","pthread_mutexattr_setprotocol","pthread_mutexattr_setpshared","pthread_mutexattr_setrobust","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_once","pthread_once_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getkind_np","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setkind_np","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setaffinity_np","pthread_setname_np","pthread_setschedparam","pthread_setschedprio","pthread_setspecific","pthread_sigmask","pthread_sigqueue","pthread_spin_destroy","pthread_spin_init","pthread_spin_lock","pthread_spin_trylock","pthread_spin_unlock","pthread_spinlock_t","pthread_t","ptrace","ptrace_peeksiginfo_args","ptrace_rseq_configuration","ptrace_syscall_info","ptrdiff_t","ptsname","ptsname_r","putchar","putchar_unlocked","putenv","putgrent","putpwent","puts","pututxline","pw_dir","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwrite64","pwritev","pwritev2","pwritev64","pwritev64v2","qsort","qsort_r","quotactl","r10","r11","r12","r13","r14","r15","r8","r9","raise","rand","rax","rbp","rbx","rcv_assoc_id","rcv_context","rcv_cumtsn","rcv_flags","rcv_ppid","rcv_sid","rcv_ssn","rcv_tsn","rcx","rdi","rdp","rdp","rdx","read","readahead","readdir","readdir64","readdir64_r","readdir_r","readlink","readlinkat","readv","realloc","reallocarray","realpath","reboot","rec_seq","rec_seq","rec_seq","recv","recvfrom","recvmmsg","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","regs","release","remap_file_pages","remove","removexattr","rename","renameat","renameat2","replay","req","request_id","request_id","res_init","reserved","reserved","resolution","resolve","response","ret_data","retval","retval","revents","rewind","rewinddir","right_coeff","right_saturation","rip","rip","rip","rlim64_t","rlim_cur","rlim_cur","rlim_max","rlim_max","rlim_t","rlimit","rlimit64","rm_eo","rm_so","rmdir","rseq_abi_pointer","rseq_abi_size","rsi","rsp","rt_class","rt_dev","rt_dst","rt_flags","rt_gateway","rt_genmask","rt_irtt","rt_metric","rt_mtu","rt_pad1","rt_pad2","rt_pad3","rt_pad4","rt_tos","rt_window","rtentry","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","rx","rx","rx_dropped","rx_dropped","rx_fill_ring_empty_descs","rx_filter","rx_id","rx_invalid_descs","rx_invalid_descs","rx_ring_full","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_family","sa_family_t","sa_flags","sa_mask","sa_restorer","sa_sigaction","salg_family","salg_feat","salg_mask","salg_name","salg_type","salt","salt","salt","sbrk","scancode","scanf","sched_attr","sched_deadline","sched_flags","sched_get_priority_max","sched_get_priority_min","sched_getaffinity","sched_getcpu","sched_getparam","sched_getscheduler","sched_nice","sched_param","sched_period","sched_policy","sched_priority","sched_priority","sched_rr_get_interval","sched_runtime","sched_setaffinity","sched_setparam","sched_setscheduler","sched_yield","sctp_assoc_t","sctp_authinfo","sctp_initmsg","sctp_nxtinfo","sctp_prinfo","sctp_rcvinfo","sctp_sndinfo","sctp_sndrcvinfo","sdt","seccomp","seccomp_data","seccomp_data","seccomp_notif","seccomp_notif","seccomp_notif_addfd","seccomp_notif_resp","seccomp_notif_resp","seccomp_notif_sizes","seed48","seekdir","select","sem_close","sem_ctime","sem_destroy","sem_flg","sem_getvalue","sem_init","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_perm","sem_post","sem_t","sem_timedwait","sem_trywait","sem_unlink","sem_wait","semaem","sembuf","semctl","semget","semid_ds","seminfo","semmap","semmni","semmns","semmnu","semmsl","semop","semopm","semume","semusz","semvmx","send","sendfile","sendfile64","sendmmsg","sendmsg","sendto","servent","set_tid","set_tid_size","setbuf","setcontext","setdomainname","setegid","setenv","seteuid","setfsgid","setfsuid","setgid","setgrent","setgroups","sethostid","sethostname","setlocale","setlogmask","setmntent","setns","setpgid","setpriority","setpwent","setregid","setresgid","setresuid","setreuid","setrlimit","setrlimit64","setservent","setsid","setsockopt","setspent","settimeofday","setuid","setutxent","setvbuf","setxattr","sgetspent_r","sh_addr","sh_addr","sh_addralign","sh_addralign","sh_entsize","sh_entsize","sh_flags","sh_flags","sh_info","sh_info","sh_link","sh_link","sh_name","sh_name","sh_offset","sh_offset","sh_size","sh_size","sh_type","sh_type","sharedram","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_code","si_errno","si_pid","si_signo","si_status","si_stime","si_uid","si_utime","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_thread_id","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","signal","signalfd","signalfd_siginfo","signature","significand","sigpending","sigprocmask","sigset_t","sigsuspend","sigtimedwait","sigval","sigwait","sigwaitinfo","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sinfo_assoc_id","sinfo_context","sinfo_cumtsn","sinfo_flags","sinfo_ppid","sinfo_ssn","sinfo_stream","sinfo_timetolive","sinfo_tsn","sinit_max_attempts","sinit_max_init_timeo","sinit_max_instreams","sinit_num_ostreams","sival_ptr","size","size_t","sleep","sll_addr","sll_family","sll_halen","sll_hatype","sll_ifindex","sll_pkttype","sll_protocol","smblks","smblks","snd_assoc_id","snd_context","snd_flags","snd_ppid","snd_sid","snprintf","sock_extended_err","sock_filter","sock_fprog","sock_txtime","sockaddr","sockaddr_alg","sockaddr_can","sockaddr_in","sockaddr_in6","sockaddr_ll","sockaddr_nl","sockaddr_storage","sockaddr_un","sockaddr_vm","sockaddr_xdp","socket","socketpair","socklen_t","sp_expire","sp_flag","sp_inact","sp_lstchg","sp_max","sp_min","sp_namp","sp_pwdp","sp_warn","speed_t","splice","sprintf","spwd","srand","srand48","src_fd","src_length","src_offset","srcfd","ss","ss_family","ss_flags","ss_size","ss_sp","sscanf","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","ssize_t","st_atime","st_atime","st_atime_nsec","st_atime_nsec","st_blksize","st_blksize","st_blocks","st_blocks","st_ctime","st_ctime","st_ctime_nsec","st_ctime_nsec","st_dev","st_dev","st_gid","st_gid","st_info","st_info","st_ino","st_ino","st_mode","st_mode","st_mtime","st_mtime","st_mtime_nsec","st_mtime_nsec","st_name","st_name","st_nlink","st_nlink","st_other","st_other","st_rdev","st_rdev","st_shndx","st_shndx","st_size","st_size","st_size","st_size","st_space","st_uid","st_uid","st_value","st_value","stabil","stack","stack_pointer","stack_size","stack_t","stamp","start_code","start_level","start_stack","stat","stat","stat64","stat64","statfs","statfs","statfs64","statfs64","status","statvfs","statvfs","statvfs64","statvfs64","statx","statx","statx_timestamp","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strchrnul","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strftime_l","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strong_magnitude","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoll","strtoul","strtoull","strxfrm","stx_atime","stx_attributes","stx_attributes_mask","stx_blksize","stx_blocks","stx_btime","stx_ctime","stx_dev_major","stx_dev_minor","stx_dio_mem_align","stx_dio_offset_align","stx_gid","stx_ino","stx_mask","stx_mnt_id","stx_mode","stx_mtime","stx_nlink","stx_rdev_major","stx_rdev_minor","stx_size","stx_uid","sun_family","sun_path","suseconds_t","sval","svm_cid","svm_family","svm_port","svm_reserved1","svm_zero","swapcontext","swapoff","swapon","swd","swd","sxdp_family","sxdp_flags","sxdp_ifindex","sxdp_queue_id","sxdp_shared_umem_fd","symlink","symlinkat","sync","sync_file_range","syncfs","syscall","sysconf","sysctl","sysinfo","sysinfo","syslog","sysname","system","tai","tai","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","tee","telldir","termios","termios2","thousands_sep","tick","time","time","time","time","time_t","timegm","timer_create","timer_delete","timer_getoverrun","timer_gettime","timer_settime","timer_t","timerfd_create","timerfd_gettime","timerfd_settime","times","timespec","timeval","timex","timezone","tls","tls12_crypto_info_aes_gcm_128","tls12_crypto_info_aes_gcm_256","tls12_crypto_info_chacha20_poly1305","tls_crypto_info","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpfile64","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","totalhigh","totalram","totalswap","toupper","tp","trigger","truncate","truncate64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_nsec","tv_sec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","tx","tx","tx_id","tx_invalid_descs","tx_invalid_descs","tx_ring_empty_descs","tx_type","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u64","u_ar0","u_comm","u_debugreg","u_dsize","u_fpstate","u_fpvalid","u_ssize","u_tsize","uc_flags","uc_link","uc_mcontext","uc_sigmask","uc_stack","ucontext_t","ucred","uid","uid","uid_t","uinput_abs_setup","uinput_ff_erase","uinput_ff_upload","uinput_setup","uinput_user_dev","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","umount","umount2","uname","ungetc","unlink","unlinkat","unlockpt","unsetenv","unshare","uordblks","uordblks","updated","uptime","useconds_t","uselocale","user","user_fpregs_struct","user_regs_struct","usleep","usmblks","usmblks","ut_addr_v6","ut_exit","ut_host","ut_id","ut_line","ut_pid","ut_session","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpname","utmpx","utmpxname","utsname","val","val","value","value","vendor","vers","version","version","version","version","vfork","vhangup","vmsplice","wait","wait4","waitid","waitpid","waveform","wchar_t","wcslen","wcstombs","wd","weak_magnitude","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xdp_desc","xdp_mmap_offsets","xdp_mmap_offsets_v1","xdp_options","xdp_ring_offset","xdp_ring_offset_v1","xdp_statistics","xdp_statistics_v1","xdp_umem_reg","xdp_umem_reg_v1","xmm_space"],"q":[[0,"libc"],[9187,"core::fmt"],[9188,"core::fmt"],[9189,"core::any"]],"dmaximum number of services provided on the same listening …uth Header","","IP Payload Comp. Protocol","DCCP","IP6 destination option","exterior gateway protocol","encapsulation header","IP6 Encap Sec. Payload","Ethernet-within-IPv6 encapsulation.","IP6 fragmentation header","General Routing Encap.","Hop-by-hop option header","","","xns idp","group mgmt protocol","","for compatibility","","","","","Multipath TCP","","IP6 no next header","Protocol indep. multicast","pup","raw IP packet","IP6 routing header","resource reservation","SCTP","","tp-4 w/ class negotiationhe <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of thisquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","GNU version of <code>basename(3)</code>, defined in <code>string.h</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","interface name, e.g. “en0”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeversion of <code>basename(3)</code>, defined in <code>libgen.h</codehe 64-bit libc on Solaris and illumos only has readdir_r. …i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,169,169,169,0,214,0,0,0,0,0,214,156,0,0,0,0,0,0,168,168,168,168,168,168,168,168,168,168,168,0,194,0,0,0,210,210,0,0,142,142,88,142,142,0,0,0,0,21,0,110,112,184,185,189,112,0,0,0,235,0,43,43,43,43,43,43,43,43,157,190,0,190,0,157,190,190,0,190,157,190,157,190,157,190,0,157,190,190,0,190,157,0,0,0,0,54,54,54,54,54,114,178,162,163,114,175,177,52,52,53,52,53,52,53,52,53,0,0,0,0,0,0,0,0,0,0,79,79,132,0,123,0,0,0,0,247,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,248,249,250,37,38,39,40,19,41,42,43,44,15,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,251,61,62,63,64,65,66,67,68,12,69,70,71,72,73,74,75,76,238,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,18,109,110,111,112,4,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7,5,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,247,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,248,249,250,37,38,39,40,19,41,42,43,44,15,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,251,61,62,63,64,65,66,67,68,12,69,70,71,72,73,74,75,76,238,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,18,109,110,111,112,4,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7,5,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,0,0,194,73,78,161,223,161,223,0,0,0,161,223,0,161,223,161,223,161,223,0,0,161,223,161,223,0,0,0,0,0,0,0,0,168,0,154,233,0,154,0,0,111,233,234,154,111,0,0,0,0,82,0,0,0,0,0,0,214,221,171,172,171,171,172,171,172,0,221,0,0,0,184,185,134,0,0,0,0,0,0,0,0,0,152,0,0,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,19,41,42,43,44,15,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,12,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,18,109,110,111,112,4,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7,5,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,0,0,0,0,0,102,5,5,5,0,72,88,4,76,76,0,168,180,182,105,0,0,181,183,0,0,211,0,0,214,48,83,83,210,217,139,150,139,150,139,150,139,150,139,150,0,116,233,234,235,82,48,77,180,182,122,104,0,0,85,0,0,0,0,0,0,0,0,0,0,47,47,47,47,0,0,0,89,89,89,89,89,89,89,89,0,123,59,64,64,64,64,64,64,64,64,64,0,0,211,0,0,0,0,90,91,90,91,158,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,158,90,91,90,91,0,18,18,18,18,18,18,18,86,87,211,209,81,0,0,0,0,0,0,191,80,81,83,0,0,0,0,0,0,0,168,117,120,211,168,169,0,228,0,0,0,0,29,56,0,0,0,0,0,0,0,0,0,191,221,0,208,198,205,206,219,198,205,206,219,198,205,206,219,198,205,206,219,206,219,198,205,206,219,198,205,206,219,206,219,205,198,205,206,219,198,205,206,219,198,205,206,219,205,198,205,0,79,79,0,0,0,0,0,0,0,0,0,0,0,0,0,29,106,228,0,0,0,0,0,0,0,0,0,0,141,142,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,125,75,116,117,118,149,152,174,180,184,188,216,221,234,235,236,74,0,0,0,0,0,238,210,217,0,0,162,163,0,0,0,0,0,213,0,0,0,181,183,48,0,0,0,0,194,0,0,194,194,0,0,0,168,247,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,248,249,250,37,38,39,40,19,41,42,43,44,15,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,251,61,62,63,64,65,66,67,68,12,69,70,71,72,73,74,75,76,238,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,18,109,110,111,112,4,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7,5,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,211,211,0,0,0,0,0,0,0,0,0,0,162,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,217,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,214,0,61,160,61,160,61,160,61,160,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,0,0,213,0,164,48,211,211,27,27,27,27,27,104,125,0,162,163,162,163,184,185,0,0,0,212,0,0,0,0,85,116,117,118,141,142,0,0,0,69,0,69,0,0,0,50,50,50,50,50,50,50,0,148,148,0,147,147,124,124,124,146,146,0,145,145,145,145,145,145,145,145,145,145,145,145,145,39,39,38,40,38,39,40,40,0,0,0,0,0,0,0,0,75,135,136,137,0,0,0,0,0,0,0,0,0,0,0,0,0,114,178,0,0,0,0,48,48,48,48,48,48,48,48,78,0,247,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,248,249,250,37,38,39,40,19,41,42,43,44,15,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,251,61,62,63,64,65,66,67,68,12,69,70,71,72,73,74,75,76,238,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,18,109,110,111,112,4,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7,5,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,0,0,0,0,0,28,28,0,104,0,0,0,0,103,103,49,49,49,0,26,26,123,176,0,0,0,0,0,0,0,0,0,0,0,0,0,33,66,33,66,0,0,135,136,137,143,143,153,0,4,168,168,0,4,4,162,163,135,136,137,0,75,0,0,199,200,31,31,199,200,199,200,199,200,199,200,0,0,0,0,82,82,75,105,113,184,185,189,234,235,77,80,0,0,0,0,0,0,0,0,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,212,83,0,0,0,0,0,0,0,0,0,0,0,0,105,228,0,168,169,74,0,123,123,194,0,0,0,0,0,0,0,0,0,228,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,99,99,99,99,99,0,214,236,0,168,21,48,48,48,0,0,0,0,144,144,0,144,144,0,0,0,0,0,0,0,0,68,68,68,68,0,0,120,7,7,195,7,55,7,7,55,195,195,7,7,195,195,195,195,195,0,0,0,0,0,70,70,70,70,70,0,0,70,0,70,70,0,0,0,0,0,210,217,210,217,48,48,48,110,112,125,141,142,112,0,0,48,118,118,0,0,0,138,138,0,0,0,0,0,138,0,121,121,0,0,119,119,119,119,119,0,0,165,165,165,165,166,166,166,166,166,166,59,114,174,175,177,0,0,0,0,130,130,130,130,130,174,0,0,83,168,86,178,0,0,0,0,0,0,0,0,0,0,0,189,162,163,211,36,94,95,48,94,95,94,95,94,95,36,94,95,94,95,36,48,48,94,95,94,95,0,178,194,216,221,0,0,0,0,83,0,0,110,112,112,0,83,98,116,228,0,221,0,0,0,0,0,123,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,131,131,0,0,0,0,0,0,0,168,0,235,0,0,0,0,0,194,180,182,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,0,0,0,0,0,0,0,0,0,211,211,211,211,211,211,211,211,0,0,211,211,211,129,129,129,129,129,129,129,129,211,211,210,217,211,0,0,0,0,0,0,0,0,0,0,0,0,0,135,136,137,0,0,0,0,0,0,0,0,0,0,0,212,59,0,0,0,0,0,0,85,104,86,87,0,102,228,74,236,106,177,86,87,29,0,0,82,82,210,211,217,0,24,133,24,133,0,0,0,108,108,0,216,216,211,211,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,181,183,186,187,186,149,109,186,187,186,237,37,35,35,35,35,19,19,0,197,197,197,197,140,140,140,140,140,135,136,137,0,75,0,0,151,151,0,0,0,0,0,0,151,0,151,151,46,151,0,151,0,0,0,0,0,0,0,0,0,0,0,0,235,191,0,115,0,115,0,0,115,0,0,0,0,0,196,0,71,0,0,196,71,71,0,196,196,0,0,0,0,0,0,173,0,0,0,0,0,173,173,173,173,173,0,173,173,173,173,0,0,0,0,0,0,0,221,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,96,97,194,168,215,215,215,215,215,215,0,215,215,0,0,0,0,0,0,0,0,201,201,201,201,201,201,201,201,201,201,0,0,0,0,0,0,60,60,60,60,0,0,0,0,0,0,212,0,0,216,208,0,0,0,0,0,0,0,0,42,42,42,42,42,41,41,41,41,127,127,127,127,127,127,127,127,127,126,126,126,126,32,151,0,0,44,44,44,44,44,44,44,162,163,128,128,128,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,63,63,63,63,63,63,63,63,0,0,0,0,0,0,122,122,122,118,211,58,202,202,202,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,203,204,203,204,203,204,203,204,203,204,203,204,203,204,203,204,92,93,203,204,203,204,203,204,203,204,92,93,203,204,92,93,203,204,92,93,92,93,203,204,217,203,204,92,93,168,221,178,221,0,104,212,81,212,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,57,57,0,176,107,107,107,107,107,0,0,0,210,217,179,179,179,179,179,0,0,0,0,0,0,0,0,0,0,0,59,0,168,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,168,0,72,168,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,221,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,34,34,34,34,168,0,194,194,194,0,153,85,0,0,247,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,248,249,250,37,38,39,40,19,41,42,43,44,15,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,251,61,62,63,64,65,66,67,68,12,69,70,71,72,73,74,75,76,238,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,18,109,110,111,112,4,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7,5,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,247,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,248,249,250,37,38,39,40,19,41,42,43,44,15,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,251,61,62,63,64,65,66,67,68,12,69,70,71,72,73,74,75,76,238,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,18,109,110,111,112,4,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7,5,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,0,0,23,156,22,23,156,159,22,159,181,183,109,186,187,186,149,72,76,85,247,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,248,249,250,37,38,39,40,19,41,42,43,44,15,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,251,61,62,63,64,65,66,67,68,12,69,70,71,72,73,74,75,76,238,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,18,109,110,111,112,4,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7,5,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,85,178,56,212,212,212,212,212,212,212,212,218,218,218,218,218,0,0,98,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,163,104,194,0,0,0,0,0,0,162,163,192,192,192,192,192,192,192,192,192,192,0,0,0,0,0,0,0,0,117,125,72,74,73,228,59,73,102,134,0,0,0,0,0,0,0,83,0,0,0,105,84,0,0,0,0,30,30,30,30,0,0,0,0,0,0,0,0,0,0,217],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,3],4],0,0,0,0,0,0,0,0,0,0,[2,2],0,0,0,0,0,0,0,0,[2,2],0,[[1,2],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,6],[7,5],[8,8],[[7,5],5],[8,8],0,0,0,[9,10],[[11,12],13],[12,9],[[11,12],9],[[12,12],14],[[11,12],14],[[11,12],13],0,[12,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,15],13],[[9,15],14],[[9,15],13],0,[15,13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9,9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,[16,16],0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[17,17,17],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,9],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[17,17],0,0,0,0,0,[17,14],0,0,0,0,0,0,0,0,0,0,[16,16],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,9],[9,9],[9,14],[9,14],0,0,0,0,0,0,0,[[9,9],13],[9,14],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[18,19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9,14],0,[9,9],0,[9,14],[9,14],[9,14],[9,14],0,0,0,0,[9,9],[9,9],0,[[9,9],9],0,[9,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[19,19],[41,41],[42,42],[43,43],[44,44],[15,15],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[62,62],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[12,12],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[102,102],[103,103],[104,104],[105,105],[106,106],[107,107],[108,108],[18,18],[109,109],[110,110],[111,111],[112,112],[4,4],[113,113],[114,114],[115,115],[116,116],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[123,123],[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[137,137],[138,138],[139,139],[140,140],[141,141],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[150,150],[151,151],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[7,7],[5,5],[161,161],[162,162],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[179,179],[180,180],[181,181],[182,182],[183,183],[184,184],[185,185],[186,186],[187,187],[188,188],[189,189],[190,190],[191,191],[192,192],[193,193],[194,194],[195,195],[196,196],[197,197],[198,198],[199,199],[200,200],[201,201],[202,202],[203,203],[204,204],[205,205],[206,206],[207,207],[208,208],[209,209],[210,210],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[222,222],[223,223],[224,224],[225,225],[226,226],[227,227],[228,228],[229,229],[230,230],[231,231],[232,232],[233,233],[234,234],[235,235],[236,236],[237,237],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[238,239],[[241,[13,240]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[242,8],0,[[8,8],242],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[242,8],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[201,238],0,0,[201,243],0,[201,9],[201,244],[201,245],[201,244],[201,32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],[-1,[[241,[-2]]],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],[-1,246,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[731,1443,3276,3285,3744,4741,5161,6826,6827,6828,6829,7116,7117,9099,9100,9101,9102,9155],"p":[[8,"__u16",0],[8,"__u32",0],[8,"__u8",0],[5,"sock_filter",0],[5,"cmsghdr",0],[8,"c_uchar",0],[5,"msghdr",0],[8,"c_uint",0],[8,"c_int",0],[8,"size_t",0],[1,"usize"],[5,"cpu_set_t",0],[1,"tuple"],[1,"bool"],[5,"fd_set",0],[1,"u8"],[1,"u32"],[5,"sock_extended_err",0],[5,"sockaddr",0],[5,"group",0],[5,"utimbuf",0],[5,"timeval",0],[5,"timespec",0],[5,"rlimit",0],[5,"rusage",0],[5,"ipv6_mreq",0],[5,"hostent",0],[5,"iovec",0],[5,"pollfd",0],[5,"winsize",0],[5,"linger",0],[5,"sigval",0],[5,"itimerval",0],[5,"tms",0],[5,"servent",0],[5,"protoent",0],[5,"in_addr",0],[5,"ip_mreq",0],[5,"ip_mreqn",0],[5,"ip_mreq_source",0],[5,"sockaddr_in",0],[5,"sockaddr_in6",0],[5,"addrinfo",0],[5,"sockaddr_ll",0],[5,"tm",0],[5,"sched_param",0],[5,"Dl_info",0],[5,"lconv",0],[5,"in_pktinfo",0],[5,"ifaddrs",0],[5,"in6_rtmsg",0],[5,"arpreq",0],[5,"arpreq_old",0],[5,"arphdr",0],[5,"mmsghdr",0],[5,"epoll_event",0],[5,"sockaddr_un",0],[5,"sockaddr_storage",0],[5,"utsname",0],[5,"sigevent",0],[5,"glob_t",0],[5,"passwd",0],[5,"spwd",0],[5,"dqblk",0],[5,"signalfd_siginfo",0],[5,"itimerspec",0],[5,"fsid_t",0],[5,"packet_mreq",0],[5,"if_nameindex",0],[5,"msginfo",0],[5,"sembuf",0],[5,"input_event",0],[5,"input_id",0],[5,"input_absinfo",0],[5,"input_keymap_entry",0],[5,"input_mask",0],[5,"ff_replay",0],[5,"ff_trigger",0],[5,"ff_envelope",0],[5,"ff_constant_effect",0],[5,"ff_ramp_effect",0],[5,"ff_condition_effect",0],[5,"ff_periodic_effect",0],[5,"ff_rumble_effect",0],[5,"ff_effect",0],[5,"uinput_ff_upload",0],[5,"uinput_ff_erase",0],[5,"uinput_abs_setup",0],[5,"dl_phdr_info",0],[5,"Elf32_Ehdr",0],[5,"Elf64_Ehdr",0],[5,"Elf32_Sym",0],[5,"Elf64_Sym",0],[5,"Elf32_Phdr",0],[5,"Elf64_Phdr",0],[5,"Elf32_Shdr",0],[5,"Elf64_Shdr",0],[5,"ucred",0],[5,"mntent",0],[5,"posix_spawn_file_actions_t",0],[5,"posix_spawnattr_t",0],[5,"genlmsghdr",0],[5,"in6_pktinfo",0],[5,"arpd_request",0],[5,"inotify_event",0],[5,"fanotify_response",0],[5,"sockaddr_vm",0],[5,"regmatch_t",0],[5,"__c_anonymous_sockaddr_can_tp",0],[5,"__c_anonymous_sockaddr_can_j1939",0],[5,"can_filter",0],[5,"j1939_filter",0],[5,"sock_fprog",0],[5,"seccomp_data",0],[5,"seccomp_notif_sizes",0],[5,"seccomp_notif",0],[5,"seccomp_notif_resp",0],[5,"seccomp_notif_addfd",0],[5,"nlmsghdr",0],[5,"nlmsgerr",0],[5,"nlattr",0],[5,"file_clone_range",0],[5,"__c_anonymous_ifru_map",0],[5,"in6_ifreq",0],[5,"option",0],[5,"sctp_initmsg",0],[5,"sctp_sndrcvinfo",0],[5,"sctp_sndinfo",0],[5,"sctp_rcvinfo",0],[5,"sctp_nxtinfo",0],[5,"sctp_prinfo",0],[5,"sctp_authinfo",0],[5,"rlimit64",0],[5,"tls_crypto_info",0],[5,"tls12_crypto_info_aes_gcm_128",0],[5,"tls12_crypto_info_aes_gcm_256",0],[5,"tls12_crypto_info_chacha20_poly1305",0],[5,"sockaddr_nl",0],[5,"dirent",0],[5,"sockaddr_alg",0],[5,"uinput_setup",0],[5,"uinput_user_dev",0],[5,"af_alg_iv",0],[5,"mq_attr",0],[20,"__c_anonymous_ifr_ifru",0],[5,"ifreq",0],[20,"__c_anonymous_ifc_ifcu",0],[5,"ifconf",0],[5,"hwtstamp_config",0],[5,"dirent64",0],[5,"sched_attr",0],[5,"sock_txtime",0],[20,"__c_anonymous_sockaddr_can_can_addr",0],[5,"sockaddr_can",0],[5,"statx",0],[5,"statx_timestamp",0],[5,"aiocb",0],[5,"__exit_status",0],[5,"__timeval",0],[5,"glob64_t",0],[5,"termios",0],[5,"mallinfo",0],[5,"mallinfo2",0],[5,"nl_pktinfo",0],[5,"nl_mmap_req",0],[5,"nl_mmap_hdr",0],[5,"rtentry",0],[5,"timex",0],[5,"ntptimeval",0],[5,"regex_t",0],[5,"Elf64_Chdr",0],[5,"Elf32_Chdr",0],[5,"seminfo",0],[5,"ptrace_peeksiginfo_args",0],[5,"__c_anonymous_ptrace_syscall_info_entry",0],[5,"__c_anonymous_ptrace_syscall_info_exit",0],[5,"__c_anonymous_ptrace_syscall_info_seccomp",0],[5,"ptrace_syscall_info",0],[5,"sockaddr_xdp",0],[5,"xdp_ring_offset",0],[5,"xdp_mmap_offsets",0],[5,"xdp_ring_offset_v1",0],[5,"xdp_mmap_offsets_v1",0],[5,"xdp_umem_reg",0],[5,"xdp_umem_reg_v1",0],[5,"xdp_statistics",0],[5,"xdp_statistics_v1",0],[5,"xdp_options",0],[5,"xdp_desc",0],[5,"iocb",0],[20,"__c_anonymous_ptrace_syscall_info_data",0],[5,"utmpx",0],[5,"sigset_t",0],[5,"sysinfo",0],[5,"msqid_ds",0],[5,"semid_ds",0],[5,"sigaction",0],[5,"statfs",0],[5,"flock",0],[5,"flock64",0],[5,"siginfo_t",0],[5,"stack_t",0],[5,"stat",0],[5,"stat64",0],[5,"statfs64",0],[5,"statvfs64",0],[5,"pthread_attr_t",0],[5,"_libc_fpxreg",0],[5,"_libc_xmmreg",0],[5,"_libc_fpstate",0],[5,"user_regs_struct",0],[5,"user",0],[5,"mcontext_t",0],[5,"ipc_perm",0],[5,"shmid_ds",0],[5,"ptrace_rseq_configuration",0],[5,"user_fpregs_struct",0],[5,"ucontext_t",0],[5,"statvfs",0],[5,"max_align_t",0],[5,"clone_args",0],[5,"sem_t",0],[5,"termios2",0],[5,"pthread_mutexattr_t",0],[5,"pthread_rwlockattr_t",0],[5,"pthread_condattr_t",0],[5,"pthread_barrierattr_t",0],[5,"fanotify_event_metadata",0],[5,"pthread_cond_t",0],[5,"pthread_mutex_t",0],[5,"pthread_rwlock_t",0],[5,"pthread_barrier_t",0],[5,"can_frame",0],[5,"canfd_frame",0],[5,"canxl_frame",0],[5,"open_how",0],[5,"in6_addr",0],[6,"c_void",0],[5,"Formatter",9187],[5,"Error",9187],[6,"Result",9188],[8,"dev_t",0],[8,"pid_t",0],[8,"c_long",0],[8,"uid_t",0],[5,"TypeId",9189],[6,"DIR",0],[6,"FILE",0],[6,"fpos_t",0],[6,"timezone",0],[6,"fpos64_t",0]],"b":[]}],\
["log",{"doc":"A lightweight logging facade.","t":"PPPPPPGGKFFPFFFSFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNMNNNNNNNQNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNMQQHNNHNNNNNNNNNNNNNNHHHHHNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNQ","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_boxed_logger","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"],[183,"core::fmt"],[184,"core::cmp"],[185,"core::option"],[186,"core::fmt"],[187,"core::hash"],[188,"core::iter::traits::iterator"],[189,"alloc::boxed"],[190,"alloc::string"],[191,"core::any"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The source file containing the message, if it is a <code>&#39;static</code> …","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>Box&lt;Log&gt;</code>.","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","","","","","","","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,17,13,4,6,1,3,8,7,17,13,3,7,1,8,4,6,1,8,4,6,1,8,4,6,8,7,0,3,7,11,4,4,6,6,8,7,13,0,1,3,1,3,11,4,4,6,6,1,3,8,7,17,17,13,13,4,6,1,3,8,7,17,13,4,6,4,6,8,7,0,4,6,1,3,8,7,17,13,4,6,1,3,8,7,1,3,11,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,0,1,3,8,7,6,4,4,6,1,8,4,6,17,13,0,4,6,1,3,8,7,17,13,4,6,1,3,8,7,17,13,4,6,1,3,8,7,17,13,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[4,4],10],[[6,6],10],[[8,8],10],[[7,7],10],0,[[],3],[[],7],[[11,8],12],[[4,6],12],[[4,4],12],[[6,6],12],[[6,4],12],[[8,8],12],[[7,7],12],[[13,13],12],0,[1,[[14,[5]]]],[[3,[14,[5]]],3],[1,[[14,[5]]]],[[3,[14,[5]]],3],[11,9],[[4,15],16],[[4,15],16],[[6,15],16],[[6,15],16],[[1,15],16],[[3,15],16],[[8,15],16],[[7,15],16],[[17,15],16],[[17,15],16],[[13,15],16],[[13,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[18,[4,-1]]],[]],[5,[[18,[6,-1]]],[]],[[4,-1],9,19],[[6,-1],9,19],[[8,-1],9,19],[[7,-1],9,19],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[[21,[],[[20,[4]]]]]]]],[[],[[0,[[21,[],[[20,[6]]]]]]]],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[14,[22]]]],[[3,[14,[22]]],3],[[11,1],9],0,0,[[],11],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[14,[5]]]],[[3,[14,[5]]],3],[1,[[14,[5]]]],[[3,[14,[5]]],3],[[],3],[[],7],[[4,4],[[14,[10]]]],[[4,6],[[14,[10]]]],[[6,4],[[14,[10]]]],[[6,6],[[14,[10]]]],[[8,8],[[14,[10]]]],[[7,7],[[14,[10]]]],[[[23,[11]]],[[18,[9,17]]]],[11,[[18,[9,17]]]],[11,[[18,[9,17]]]],[6,9],[6,9],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[14,[4]]]],[4,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],0,[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0],"c":[],"p":[[5,"Record",0],[5,"Arguments",183],[5,"RecordBuilder",0],[6,"Level",0],[1,"str"],[6,"LevelFilter",0],[5,"MetadataBuilder",0],[5,"Metadata",0],[1,"tuple"],[6,"Ordering",184],[10,"Log",0],[1,"bool"],[5,"ParseLevelError",0],[6,"Option",185],[5,"Formatter",183],[8,"Result",183],[5,"SetLoggerError",0],[6,"Result",186],[10,"Hasher",187],[17,"Item"],[10,"Iterator",188],[1,"u32"],[5,"Box",189],[5,"String",190],[5,"TypeId",191]],"b":[[61,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[62,"impl-PartialEq-for-Level"],[63,"impl-PartialEq-for-LevelFilter"],[64,"impl-PartialEq%3CLevel%3E-for-LevelFilter"],[74,"impl-Display-for-Level"],[75,"impl-Debug-for-Level"],[76,"impl-Debug-for-LevelFilter"],[77,"impl-Display-for-LevelFilter"],[82,"impl-Debug-for-SetLoggerError"],[83,"impl-Display-for-SetLoggerError"],[84,"impl-Display-for-ParseLevelError"],[85,"impl-Debug-for-ParseLevelError"],[132,"impl-PartialOrd-for-Level"],[133,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[134,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[135,"impl-PartialOrd-for-LevelFilter"]]}],\
["logger",{"doc":"Custom logger module.","t":"FNNNNNNNNNNNNNNNNNN","n":["Logger","borrow","borrow_mut","default","enabled","flush","from","get_level","get_prefix","init","into","is_using_prefix","log","new","set_level","set_prefix","try_from","try_into","type_id"],"q":[[0,"logger"],[19,"log"],[20,"log"],[21,"log"],[22,"core::any"]],"d":["A custom logger struct that uses stdout to print logs.","","","","Check if current message level is enabled for logging.","Flush the logger. As stdout is used, no need to flush, so …","Returns the argument unchanged.","Get the current level of the logger.","Get the current prefix of the logger. If no prefix is set, …","Static method to initialize the logger with an optional …","Calls <code>U::from(self)</code>.","Get the current status of the prefix. If no prefix is set, …","Log the message.","Create a new global logger with default level set to …","Set the default level of the logger.","Enable the logger with a prefix after the time.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[1,2],3],[1,4],[-1,-1,[]],[1,5],[1,6],[1,4],[-1,-2,[],[]],[1,3],[[1,7],4],[[],1],[[1,5],1],[[1,6],1],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]]],"c":[],"p":[[5,"Logger",0],[5,"Metadata",19],[1,"bool"],[1,"tuple"],[6,"LevelFilter",19],[5,"String",20],[5,"Record",19],[6,"Result",21],[5,"TypeId",22]],"b":[]}],\
["mio",{"doc":"Mio is a fast, low-level I/O library for Rust focusing on …","t":"EFTFTFFTFNNNNNNNNNNNNNNNNNNNNNNNNCCNNNNNNNNNNCNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNCNFFFKNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNCNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNN","n":["Events","Interest","PRIORITY","Poll","READABLE","Registry","Token","WRITABLE","Waker","add","as_raw_fd","as_raw_fd","bitor","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deregister","eq","eq","event","features","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","guide","hash","into","into","into","into","into","is_aio","is_lio","is_priority","is_readable","is_writable","net","new","new","partial_cmp","partial_cmp","poll","register","registry","remove","reregister","to_owned","to_owned","try_clone","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unix","wake","Event","Events","Iter","Source","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","count","deregister","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","is_aio","is_empty","is_error","is_lio","is_priority","is_read_closed","is_readable","is_writable","is_write_closed","iter","next","register","reregister","size_hint","to_owned","to_owned","token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","SocketAddr","TcpListener","TcpStream","UdpSocket","UnixDatagram","UnixListener","UnixStream","accept","accept","as_abstract_namespace","as_pathname","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","bind","bind","bind","bind","bind_addr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","connect","connect","connect","connect","connect_addr","deregister","deregister","deregister","deregister","deregister","deregister","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_raw_fd","from_std","from_std","from_std","from_std","from_std","from_std","into","into","into","into","into","into","into","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","into_raw_fd","is_unnamed","join_multicast_v4","join_multicast_v6","leave_multicast_v4","leave_multicast_v6","local_addr","local_addr","local_addr","local_addr","local_addr","local_addr","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","nodelay","only_v6","pair","pair","peek","peek","peek_from","peer_addr","peer_addr","peer_addr","peer_addr","read","read","read","read","read_vectored","read_vectored","read_vectored","read_vectored","recv","recv","recv_from","recv_from","register","register","register","register","register","register","reregister","reregister","reregister","reregister","reregister","reregister","send","send","send_to","send_to","set_broadcast","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_ttl","set_ttl","set_ttl","shutdown","shutdown","shutdown","take_error","take_error","take_error","take_error","take_error","take_error","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_io","try_io","try_io","try_io","ttl","ttl","ttl","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbound","write","write","write","write","write_vectored","write_vectored","write_vectored","write_vectored","SourceFd","borrow","borrow_mut","deregister","fmt","from","into","pipe","register","reregister","try_from","try_into","type_id","Receiver","Sender","as_raw_fd","as_raw_fd","borrow","borrow","borrow_mut","borrow_mut","deregister","deregister","flush","flush","fmt","fmt","from","from","from","from","from","from_raw_fd","from_raw_fd","into","into","into_raw_fd","into_raw_fd","new","read","read","read_vectored","read_vectored","register","register","reregister","reregister","set_nonblocking","set_nonblocking","try_from","try_from","try_into","try_into","try_io","try_io","type_id","type_id","write","write","write_vectored","write_vectored"],"q":[[0,"mio"],[87,"mio::event"],[143,"mio::net"],[341,"mio::unix"],[354,"mio::unix::pipe"],[402,"std::os::fd::raw"],[403,"core::cmp"],[404,"std::io::error"],[405,"core::marker"],[406,"core::fmt"],[407,"core::fmt"],[408,"core::option"],[409,"core::time"],[410,"core::result"],[411,"core::any"],[412,"core::net::socket_addr"],[413,"std::path"],[414,"core::convert"],[415,"std::net::tcp"],[416,"std::net::tcp"],[417,"std::os::unix::net::datagram"],[418,"std::os::unix::net::listener"],[419,"std::os::unix::net::stream"],[420,"core::net::ip_addr"],[421,"core::net::ip_addr"],[422,"std::net"],[423,"std::io::error"],[424,"std::io"],[425,"std::process"]],"d":["","Interest used in registering.","Returns a <code>Interest</code> set representing priority completion …","Polls for readiness events on all registered values.","Returns a <code>Interest</code> set representing readable interests.","Registers I/O resources.","Associates readiness events with <code>event::Source</code>s.","Returns a <code>Interest</code> set representing writable interests.","Waker allows cross-thread waking of <code>Poll</code>.","Add together two <code>Interest</code>.","","","","","","","","","","","","","","","","","","","","","Deregister an <code>event::Source</code> with the <code>Poll</code> instance.","","","Readiness event types and utilities.","Mio’s optional features.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Getting started guide.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if <code>Interest</code> contains AIO readiness.","Returns true if <code>Interest</code> contains LIO readiness.","Returns true if <code>Interest</code> contains priority readiness.","Returns true if the value includes readable readiness.","Returns true if the value includes writable readiness.","Networking primitives.","Return a new <code>Poll</code> handle.","Create a new <code>Waker</code>.","","","Wait for readiness events","Register an <code>event::Source</code> with the <code>Poll</code> instance.","Create a separate <code>Registry</code> which can be used to register …","Removes <code>other</code> <code>Interest</code> from <code>self</code>.","Re-register an <code>event::Source</code> with the <code>Poll</code> instance.","","","Creates a new independently owned <code>Registry</code>.","","","","","","","","","","","","","","","","Unix only extensions.","Wake up the <code>Poll</code> associated with this <code>Waker</code>.","A readiness event.","A collection of readiness events.","<code>Events</code> iterator.","An event source that may be registered with <code>Registry</code>.","","","","","","","Returns the number of <code>Event</code> values that <code>self</code> can hold.","Clearing all <code>Event</code> values from container explicitly.","","","","","","Deregister <code>self</code> from the given <code>Registry</code> instance.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the event contains AIO readiness.","Returns <code>true</code> if <code>self</code> contains no <code>Event</code> values.","Returns true if the event contains error readiness.","Returns true if the event contains LIO readiness.","Returns true if the event contains priority readiness.","Returns true if the event contains read closed readiness.","Returns true if the event contains readable readiness.","Returns true if the event contains writable readiness.","Returns true if the event contains write closed readiness.","Returns an iterator over the <code>Event</code> values.","","Register <code>self</code> with the given <code>Registry</code> instance.","Re-register <code>self</code> with the given <code>Registry</code> instance.","","","","Returns the event’s token.","","","","","","","","","","Return a new <code>Events</code> capable of holding up to <code>capacity</code> …","An address associated with a <code>mio</code> specific Unix socket.","A structure representing a socket server","A non-blocking TCP stream between a local socket and a …","A User Datagram Protocol socket.","A Unix datagram socket.","A non-blocking Unix domain socket server.","A non-blocking Unix stream socket.","Accepts a new <code>TcpStream</code>.","Accepts a new incoming connection to this listener.","Returns the contents of this address if it is an abstract …","Returns the contents of this address if it is a <code>pathname</code> …","","","","","","","Convenience method to bind a new TCP listener to the …","Creates a UDP socket from the given address.","Creates a Unix datagram socket bound to the given path.","Creates a new <code>UnixListener</code> bound to the specified socket …","Creates a new <code>UnixListener</code> bound to the specified socket …","","","","","","","","","","","","","","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","Create a new TCP stream and issue a non-blocking connect …","Connects the UDP socket setting the default destination …","Connects the socket to the specified address.","Connects to the socket named by <code>path</code>.","Connects to the socket named by <code>address</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>RawFd</code> to a <code>TcpListener</code>.","Converts a <code>RawFd</code> to a <code>TcpStream</code>.","Converts a <code>RawFd</code> to a <code>UdpSocket</code>.","Converts a <code>RawFd</code> to a <code>UnixDatagram</code>.","Converts a <code>RawFd</code> to a <code>UnixListener</code>.","Converts a <code>RawFd</code> to a <code>UnixStream</code>.","Creates a new <code>TcpListener</code> from a standard <code>net::TcpListener</code>.","Creates a new <code>TcpStream</code> from a standard <code>net::TcpStream</code>.","Creates a new <code>UdpSocket</code> from a standard <code>net::UdpSocket</code>.","Creates a new <code>UnixDatagram</code> from a standard …","Creates a new <code>UnixListener</code> from a standard …","Creates a new <code>UnixStream</code> from a standard <code>net::UnixStream</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Returns <code>true</code> if the address is unnamed.","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","Returns the local socket address of this listener.","Returns the socket address of the local half of this TCP …","Returns the socket address that this socket was created …","Returns the address of this socket.","Returns the local socket address of this listener.","Returns the socket address of the local half of this …","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Get the value of the <code>IPV6_V6ONLY</code> option on this socket.","Create an unnamed pair of connected sockets.","Creates an unnamed pair of connected sockets.","Receives data on the socket from the remote address to …","Receives data from the socket, without removing it from …","Receives data from the socket, without removing it from …","Returns the socket address of the remote peer of this TCP …","Returns the socket address of the remote peer this socket …","Returns the address of this socket’s peer.","Returns the socket address of the remote half of this …","","","","","","","","","Receives data from the socket previously bound with …","Receives data from the socket.","Receives data from the socket. On success, returns the …","Receives data from the socket.","","","","","","","","","","","","","Sends data on the socket to the address previously bound …","Sends data on the socket to the socket’s peer.","Sends data on the socket to the given address. On success, …","Sends data on the socket to the specified address.","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Shuts down the read, write, or both halves of this …","Shut down the read, write, or both halves of this …","Shuts down the read, write, or both halves of this …","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","","","","","","","","","","","","","","","Execute an I/O operation ensuring that the socket receives …","Execute an I/O operation ensuring that the socket receives …","Execute an I/O operation ensuring that the socket receives …","Execute an I/O operation ensuring that the socket receives …","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","","","","","","","","Creates a Unix Datagram socket which is not bound to any …","","","","","","","","","Adapter for <code>RawFd</code> providing an <code>event::Source</code> …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Unix pipe.","","","","","","Receiving end of an Unix pipe.","Sending end of an Unix pipe.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new non-blocking Unix pipe.","","","","","","","","","Set the <code>Sender</code> into or out of non-blocking mode.","Set the <code>Receiver</code> into or out of non-blocking mode.","","","","","Execute an I/O operation ensuring that the socket receives …","Execute an I/O operation ensuring that the socket receives …","","","","","",""],"i":[0,0,1,0,1,0,0,1,0,1,2,4,1,1,2,4,1,6,14,2,4,1,6,14,1,6,1,6,1,6,4,1,6,0,0,2,4,1,6,14,2,4,1,6,14,0,6,2,4,1,6,14,1,1,1,1,1,0,2,14,1,6,2,4,2,1,4,1,6,4,2,4,1,6,14,2,4,1,6,14,2,4,1,6,14,0,14,0,0,0,0,17,22,23,17,22,23,17,17,22,23,22,23,23,9,17,22,23,17,22,23,17,22,23,17,23,22,17,22,22,22,22,22,22,22,17,23,9,9,23,22,23,22,17,22,23,17,22,23,17,22,23,17,0,0,0,0,0,0,0,24,27,29,29,24,25,33,34,27,28,24,33,34,27,27,29,24,25,33,34,27,28,29,24,25,33,34,27,28,33,25,33,34,28,28,24,25,33,34,27,28,25,25,28,28,29,24,25,33,34,27,28,29,24,25,33,34,27,28,24,25,33,34,27,28,24,25,33,34,27,28,29,24,25,33,34,27,28,24,25,33,34,27,28,29,33,33,33,33,24,25,33,34,27,28,33,33,33,25,33,34,28,25,33,33,25,33,34,28,25,25,28,28,25,25,28,28,33,34,33,34,24,25,33,34,27,28,24,25,33,34,27,28,33,34,33,34,33,33,33,33,25,24,25,33,25,34,28,24,25,33,34,27,28,29,24,25,33,34,27,28,29,24,25,33,34,27,28,25,33,34,28,24,25,33,29,24,25,33,34,27,28,34,25,25,28,28,25,25,28,28,0,51,51,51,51,51,51,0,51,51,51,51,51,0,0,52,53,52,53,52,53,52,53,52,52,52,53,52,52,53,53,53,52,53,52,53,52,53,0,53,53,53,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,52,52,52,52],"f":[0,0,0,0,0,0,0,0,0,[[1,1],1],[2,3],[4,3],[[1,1],1],[[1,1],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[6,6],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[1,1],7],[[6,6],7],[[4,-1],[[8,[5]]],[9,10]],[[1,1],11],[[6,6],11],0,0,[[2,12],13],[[4,12],13],[[1,12],13],[[6,12],13],[[14,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[6,-1],5,15],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,11],[1,11],[1,11],[1,11],[1,11],0,[[],[[8,[2]]]],[[4,6],[[8,[14]]]],[[1,1],[[16,[7]]]],[[6,6],[[16,[7]]]],[[2,17,[16,[18]]],[[8,[5]]]],[[4,-1,6,1],[[8,[5]]],[9,10]],[2,4],[[1,1],[[16,[1]]]],[[4,-1,6,1],[[8,[5]]],[9,10]],[-1,-2,[],[]],[-1,-2,[],[]],[4,[[8,[4]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],0,[14,[[8,[5]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,21],[17,5],[22,22],[23,23],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[23,21],[[9,4],[[8,[5]]]],[[17,12],13],[[22,12],13],[[23,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17,-1,[]],[-1,-2,[],[]],[22,11],[17,11],[22,11],[22,11],[22,11],[22,11],[22,11],[22,11],[22,11],[17,23],[23,[[16,[-1]]],[]],[[9,4,6,1],[[8,[5]]]],[[9,4,6,1],[[8,[5]]]],[23,[[5,[21,[16,[21]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[22,6],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[21,17],0,0,0,0,0,0,0,[24,[[8,[[5,[25,26]]]]]],[27,[[8,[[5,[28,29]]]]]],[29,[[16,[[31,[30]]]]]],[29,[[16,[32]]]],[24,3],[25,3],[33,3],[34,3],[27,3],[28,3],[26,[[8,[24]]]],[26,[[8,[33]]]],[-1,[[8,[34]]],[[35,[32]]]],[-1,[[8,[27]]],[[35,[32]]]],[29,[[8,[27]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,[[8,[11]]]],[26,[[8,[25]]]],[[33,26],[[8,[5]]]],[[34,-1],[[8,[5]]],[[35,[32]]]],[-1,[[8,[28]]],[[35,[32]]]],[29,[[8,[28]]]],[[24,4],[[8,[5]]]],[[25,4],[[8,[5]]]],[[33,4],[[8,[5]]]],[[34,4],[[8,[5]]]],[[27,4],[[8,[5]]]],[[28,4],[[8,[5]]]],[25,[[8,[5]]]],[25,[[8,[5]]]],[28,[[8,[5]]]],[28,[[8,[5]]]],[[29,12],13],[[24,12],13],[[25,12],13],[[33,12],13],[[34,12],13],[[27,12],13],[[28,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[3,24],[3,25],[3,33],[3,34],[3,27],[3,28],[36,24],[37,25],[38,33],[39,34],[40,27],[41,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,3],[25,3],[33,3],[34,3],[27,3],[28,3],[29,11],[[33,42,42],[[8,[5]]]],[[33,43,44],[[8,[5]]]],[[33,42,42],[[8,[5]]]],[[33,43,44],[[8,[5]]]],[24,[[8,[26]]]],[25,[[8,[26]]]],[33,[[8,[26]]]],[34,[[8,[29]]]],[27,[[8,[29]]]],[28,[[8,[29]]]],[33,[[8,[11]]]],[33,[[8,[11]]]],[33,[[8,[44]]]],[25,[[8,[11]]]],[33,[[8,[11]]]],[[],[[8,[[5,[34,34]]]]]],[[],[[8,[[5,[28,28]]]]]],[[25,[31,[30]]],[[8,[21]]]],[[33,[31,[30]]],[[8,[21]]]],[[33,[31,[30]]],[[8,[[5,[21,26]]]]]],[25,[[8,[26]]]],[33,[[8,[26]]]],[34,[[8,[29]]]],[28,[[8,[29]]]],[[25,[31,[30]]],[[8,[21]]]],[[25,[31,[30]]],[[8,[21]]]],[[28,[31,[30]]],[[8,[21]]]],[[28,[31,[30]]],[[8,[21]]]],[[25,[31,[45]]],[[8,[21]]]],[[25,[31,[45]]],[[8,[21]]]],[[28,[31,[45]]],[[8,[21]]]],[[28,[31,[45]]],[[8,[21]]]],[[33,[31,[30]]],[[8,[21]]]],[[34,[31,[30]]],[[8,[21]]]],[[33,[31,[30]]],[[8,[[5,[21,26]]]]]],[[34,[31,[30]]],[[8,[[5,[21,29]]]]]],[[24,4,6,1],[[8,[5]]]],[[25,4,6,1],[[8,[5]]]],[[33,4,6,1],[[8,[5]]]],[[34,4,6,1],[[8,[5]]]],[[27,4,6,1],[[8,[5]]]],[[28,4,6,1],[[8,[5]]]],[[24,4,6,1],[[8,[5]]]],[[25,4,6,1],[[8,[5]]]],[[33,4,6,1],[[8,[5]]]],[[34,4,6,1],[[8,[5]]]],[[27,4,6,1],[[8,[5]]]],[[28,4,6,1],[[8,[5]]]],[[33,[31,[30]]],[[8,[21]]]],[[34,[31,[30]]],[[8,[21]]]],[[33,[31,[30]],26],[[8,[21]]]],[[34,[31,[30]],-1],[[8,[21]]],[[35,[32]]]],[[33,11],[[8,[5]]]],[[33,11],[[8,[5]]]],[[33,11],[[8,[5]]]],[[33,44],[[8,[5]]]],[[25,11],[[8,[5]]]],[[24,44],[[8,[5]]]],[[25,44],[[8,[5]]]],[[33,44],[[8,[5]]]],[[25,46],[[8,[5]]]],[[34,46],[[8,[5]]]],[[28,46],[[8,[5]]]],[24,[[8,[[16,[47]]]]]],[25,[[8,[[16,[47]]]]]],[33,[[8,[[16,[47]]]]]],[34,[[8,[[16,[47]]]]]],[27,[[8,[[16,[47]]]]]],[28,[[8,[[16,[47]]]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[25,-2],[[8,[-1]]],[],[[49,[],[[48,[[8,[-1]]]]]]]],[[33,-2],[[8,[-1]]],[],[[49,[],[[48,[[8,[-1]]]]]]]],[[34,-2],[[8,[-1]]],[],[[49,[],[[48,[[8,[-1]]]]]]]],[[28,-2],[[8,[-1]]],[],[[49,[],[[48,[[8,[-1]]]]]]]],[24,[[8,[44]]]],[25,[[8,[44]]]],[33,[[8,[44]]]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[[],[[8,[34]]]],[[25,[31,[30]]],[[8,[21]]]],[[25,[31,[30]]],[[8,[21]]]],[[28,[31,[30]]],[[8,[21]]]],[[28,[31,[30]]],[[8,[21]]]],[[25,[31,[50]]],[[8,[21]]]],[[25,[31,[50]]],[[8,[21]]]],[[28,[31,[50]]],[[8,[21]]]],[[28,[31,[50]]],[[8,[21]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[51,4],[[8,[5]]]],[[51,12],13],[-1,-1,[]],[-1,-2,[],[]],0,[[51,4,6,1],[[8,[5]]]],[[51,4,6,1],[[8,[5]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,0,[52,3],[53,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[52,4],[[8,[5]]]],[[53,4],[[8,[5]]]],[52,[[8,[5]]]],[52,[[8,[5]]]],[[52,12],13],[[53,12],13],[54,52],[-1,-1,[]],[-1,-1,[]],[55,53],[56,53],[3,52],[3,53],[-1,-2,[],[]],[-1,-2,[],[]],[52,3],[53,3],[[],[[8,[[5,[52,53]]]]]],[[53,[31,[30]]],[[8,[21]]]],[[53,[31,[30]]],[[8,[21]]]],[[53,[31,[45]]],[[8,[21]]]],[[53,[31,[45]]],[[8,[21]]]],[[52,4,6,1],[[8,[5]]]],[[53,4,6,1],[[8,[5]]]],[[52,4,6,1],[[8,[5]]]],[[53,4,6,1],[[8,[5]]]],[[52,11],[[8,[5]]]],[[53,11],[[8,[5]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[[52,-2],[[8,[-1]]],[],[[49,[],[[48,[[8,[-1]]]]]]]],[[53,-2],[[8,[-1]]],[],[[49,[],[[48,[[8,[-1]]]]]]]],[-1,20,[]],[-1,20,[]],[[52,[31,[30]]],[[8,[21]]]],[[52,[31,[30]]],[[8,[21]]]],[[52,[31,[50]]],[[8,[21]]]],[[52,[31,[50]]],[[8,[21]]]]],"c":[],"p":[[5,"Interest",0],[5,"Poll",0],[8,"RawFd",402],[5,"Registry",0],[1,"tuple"],[5,"Token",0],[6,"Ordering",403],[8,"Result",404],[10,"Source",87],[10,"Sized",405],[1,"bool"],[5,"Formatter",406],[8,"Result",406],[5,"Waker",0],[10,"Hasher",407],[6,"Option",408],[5,"Events",87],[5,"Duration",409],[6,"Result",410],[5,"TypeId",411],[1,"usize"],[5,"Event",87],[5,"Iter",87],[5,"TcpListener",143],[5,"TcpStream",143],[6,"SocketAddr",412],[5,"UnixListener",143],[5,"UnixStream",143],[5,"SocketAddr",143],[1,"u8"],[1,"slice"],[5,"Path",413],[5,"UdpSocket",143],[5,"UnixDatagram",143],[10,"AsRef",414],[5,"TcpListener",415],[5,"TcpStream",415],[5,"UdpSocket",416],[5,"UnixDatagram",417],[5,"UnixListener",418],[5,"UnixStream",419],[5,"Ipv4Addr",420],[5,"Ipv6Addr",420],[1,"u32"],[5,"IoSliceMut",421],[6,"Shutdown",422],[5,"Error",404],[17,"Output"],[10,"FnOnce",423],[5,"IoSlice",421],[5,"SourceFd",341],[5,"Sender",354],[5,"Receiver",354],[5,"ChildStdin",424],[5,"ChildStderr",424],[5,"ChildStdout",424]],"b":[[191,"impl-Write-for-TcpStream"],[192,"impl-Write-for-%26TcpStream"],[193,"impl-Write-for-%26UnixStream"],[194,"impl-Write-for-UnixStream"],[259,"impl-Read-for-%26TcpStream"],[260,"impl-Read-for-TcpStream"],[261,"impl-Read-for-UnixStream"],[262,"impl-Read-for-%26UnixStream"],[263,"impl-Read-for-%26TcpStream"],[264,"impl-Read-for-TcpStream"],[265,"impl-Read-for-UnixStream"],[266,"impl-Read-for-%26UnixStream"],[333,"impl-Write-for-%26TcpStream"],[334,"impl-Write-for-TcpStream"],[335,"impl-Write-for-UnixStream"],[336,"impl-Write-for-%26UnixStream"],[337,"impl-Write-for-%26TcpStream"],[338,"impl-Write-for-TcpStream"],[339,"impl-Write-for-%26UnixStream"],[340,"impl-Write-for-UnixStream"],[364,"impl-Write-for-Sender"],[365,"impl-Write-for-%26Sender"],[371,"impl-From%3CChildStderr%3E-for-Receiver"],[372,"impl-From%3CChildStdout%3E-for-Receiver"],[380,"impl-Read-for-%26Receiver"],[381,"impl-Read-for-Receiver"],[382,"impl-Read-for-%26Receiver"],[383,"impl-Read-for-Receiver"],[398,"impl-Write-for-%26Sender"],[399,"impl-Write-for-Sender"],[400,"impl-Write-for-%26Sender"],[401,"impl-Write-for-Sender"]]}],\
["num_traits",{"doc":"Numeric traits for generic mathematics","t":"EEEEEEEEEEEEEPEEGEEREPEEKKKKEKKEFEEKEEEEEEEEEEEEEEEEENNNNCCEEHHHCNNNNNMCCNNOECCECENNNNNNEKKKMMMMKKKKMHMNNNNNMNNNNNMNNNNNNNMNNNNNMNNMMMMMMMMMMKKMMNMNMMMNKNNMMNNMMNNNNNNNNMNMMMMMNNNNMMMNKKTKTKNMHMNNHMKMMMMNMMNMMMMMMMNMMMCCCCCCCCRRKKKMMNMMNKKKKKKKKMMMMMMMMKKMNMMNMKRMKKRMMKKKMMMKKKKMMMMMKKKKKKMMMMMMRKHHMKKHMHMMMHM","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","ConstOne","ConstZero","Empty","Euclid","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","sign","signum","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","TotalOrder","abs","ceil","classify","epsilon","floor","fract","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","is_subnormal","max","max_value","min","min_positive_value","min_value","nan","neg_infinity","neg_zero","powi","recip","round","signum","to_degrees","to_radians","total_cmp","trunc","ConstOne","ConstZero","ONE","One","ZERO","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_div_rem_euclid","checked_rem_euclid","div_euclid","div_rem_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":[[0,"num_traits"],[89,"num_traits::bounds"],[96,"num_traits::cast"],[131,"num_traits::float"],[184,"num_traits::identities"],[198,"num_traits::int"],[218,"num_traits::ops"],[226,"num_traits::ops::bytes"],[237,"num_traits::ops::checked"],[253,"num_traits::ops::euclid"],[261,"num_traits::ops::inv"],[264,"num_traits::ops::mul_add"],[269,"num_traits::ops::overflowing"],[275,"num_traits::ops::saturating"],[284,"num_traits::ops::wrapping"],[296,"num_traits::pow"],[301,"num_traits::sign"],[311,"core::cmp"],[312,"core::fmt"],[313,"core::fmt"],[314,"core::any"],[315,"core::marker"],[316,"core::option"],[317,"core::num"],[318,"core::cmp"],[319,"core::ops::arith"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Trait for floating point numbers that provide an …","Computes the absolute value of <code>self</code>. Returns …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns epsilon, a small positive value.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns positive infinity.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns NaN.","Returns negative infinity.","Returns <code>-0.0</code>.","Raise a number to an integer power.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Return the ordering between <code>self</code> and <code>other</code>.","Return the integer part of a number.","Defines an associated constant representing the …","Defines an associated constant representing the additive …","The multiplicative identity element of <code>Self</code>, <code>1</code>.","Defines a multiplicative identity element for <code>Self</code>.","The additive identity element of <code>Self</code>, <code>0</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Returns both the quotient and remainder from checked …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Returns both the quotient and remainder from Euclidean …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,9,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,9,0,0,2,5,5,0,0,0,0,0,0,2,5,2,5,2,5,0,0,0,0,12,13,12,14,0,0,0,0,15,0,18,21,21,21,21,21,21,21,21,21,21,21,21,21,21,19,19,19,19,19,19,19,19,19,19,19,19,19,19,34,34,34,34,34,34,34,34,34,34,0,0,34,34,34,34,34,34,34,34,34,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,39,35,0,0,80,0,81,0,41,42,0,41,41,42,0,42,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,0,0,0,48,45,0,0,0,45,45,45,48,48,48,0,0,0,0,0,0,0,0,49,50,51,52,53,54,55,56,0,0,57,57,57,58,58,58,0,60,60,0,0,61,61,62,0,0,0,63,64,65,0,0,0,0,66,67,68,66,69,0,0,0,0,0,0,70,71,72,73,74,75,78,0,0,0,78,0,0,0,79,0,79,79,79,0,79],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[-1,-1,-1],-1,1],[[-1,-1],-1,1],[[-1,-1],-1,1],0,[[2,3],4],[[5,3],4],[[5,3],4],[-1,-1,[]],[-1,-1,[]],[[6,7],[[10,[[9,[],[[8,[-1]]]],-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,0,0,0,[[],12],[[],13],[[],12],[[],14],0,0,0,0,[15,-1,16],[-1,[[17,[-2]]],18,18],[-1,[[17,[18]]],19],[20,[[17,[21]]]],[22,[[17,[21]]]],[23,[[17,[21]]]],[24,[[17,[21]]]],[25,[[17,[21]]]],[26,[[17,[21]]]],[27,[[17,[21]]]],[28,[[17,[21]]]],[29,[[17,[21]]]],[30,[[17,[21]]]],[7,[[17,[21]]]],[31,[[17,[21]]]],[32,[[17,[21]]]],[33,[[17,[21]]]],[19,[[17,[20]]]],[19,[[17,[22]]]],[19,[[17,[23]]]],[19,[[17,[24]]]],[19,[[17,[25]]]],[19,[[17,[26]]]],[19,[[17,[27]]]],[19,[[17,[28]]]],[19,[[17,[29]]]],[19,[[17,[30]]]],[19,[[17,[7]]]],[19,[[17,[31]]]],[19,[[17,[32]]]],[19,[[17,[33]]]],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],0,0,[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],0,[35,35],[35,35],[35,36],[[],35],[35,35],[35,35],[[],35],[35,[[37,[31,24,27]]]],[35,38],[35,38],[35,38],[35,38],[35,38],[35,38],[35,38],[[35,35],35],[[],35],[[35,35],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[35,25],35],[35,35],[35,35],[35,35],[35,35],[35,35],[[39,39],40],[35,35],0,0,0,0,0,0,[41,38],[42,38],[[],-1,41],[[],41],[41,37],[42,37],[[],-1,42],[[],42],0,[43,7],[43,7],[43,43],[43,43],[43,7],[43,7],[[43,7],43],[43,43],[[43,7],43],[[43,7],43],[[43,7],43],[[43,7],43],[43,43],[43,43],[43,43],[43,7],[43,7],[[43,7],43],[[43,7],43],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[45,[],[[44,[-1]]]]],[46,47]],[-1,[[45,[],[[44,[-1]]]]],[46,47]],[-1,[[45,[],[[44,[-1]]]]],[46,47]],[[[48,[],[[44,[-1]]]]],-1,46],[[[48,[],[[44,[-1]]]]],-1,46],[[[48,[],[[44,[-1]]]]],-1,46],0,0,0,0,0,0,0,0,[[49,49],[[17,[49]]]],[[50,50],[[17,[50]]]],[[51,51],[[17,[51]]]],[52,[[17,[52]]]],[[53,53],[[17,[53]]]],[[54,7],[[17,[54]]]],[[55,7],[[17,[55]]]],[[56,56],[[17,[56]]]],0,0,[[57,57],[[17,[57]]]],[[57,57],[[17,[[37,[57,57]]]]]],[[57,57],[[17,[57]]]],[[58,58],58],[[58,58],[[37,[58,58]]]],[[58,58],58],0,0,[[[60,[],[[59,[-1]]]]],-1,[]],0,0,0,[[[61,[],[[59,[-1]]]],-2,-3],-1,[],[],[]],[[62,-1,-2],37,[],[]],0,0,0,[[63,63],[[37,[63,38]]]],[[64,64],[[37,[64,38]]]],[[65,65],[[37,[65,38]]]],0,0,0,0,[[66,66],66],[[67,67],67],[[68,68],68],[[66,66],66],[[69,69],69],0,0,0,0,0,0,[[70,70],70],[[71,71],71],[72,72],[[73,7],73],[[74,7],74],[[75,75],75],0,0,[[-1,33],[[17,[-1]]],[76,41,51]],[[-1,33],-1,[76,41,[77,[],[[59,[]]]]]],[[[78,[],[[59,[-1]]]],-2],-1,[],[]],0,0,[-1,-1,79],[79,79],[[-1,-1],-1,79],[[79,79],79],[79,38],[79,38],[-1,-1,79],[79,79]],"c":[],"p":[[10,"PartialOrd",311],[6,"FloatErrorKind",0],[5,"Formatter",312],[8,"Result",312],[5,"ParseFloatError",0],[1,"str"],[1,"u32"],[17,"FromStrRadixErr"],[10,"Num",0],[6,"Result",313],[5,"TypeId",314],[10,"Bounded",89],[10,"UpperBounded",89],[10,"LowerBounded",89],[10,"AsPrimitive",96],[10,"Copy",315],[6,"Option",316],[10,"NumCast",96],[10,"ToPrimitive",96],[1,"f32"],[10,"FromPrimitive",96],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"isize"],[1,"u128"],[1,"u16"],[1,"u64"],[1,"u8"],[1,"usize"],[10,"FloatConst",131],[10,"FloatCore",131],[6,"FpCategory",317],[1,"tuple"],[1,"bool"],[10,"TotalOrder",131],[6,"Ordering",311],[10,"One",184],[10,"Zero",184],[10,"PrimInt",198],[17,"Bytes"],[10,"FromBytes",226],[10,"NumBytes",226],[10,"Sized",315],[10,"ToBytes",226],[10,"CheckedAdd",237],[10,"CheckedDiv",237],[10,"CheckedMul",237],[10,"CheckedNeg",237],[10,"CheckedRem",237],[10,"CheckedShl",237],[10,"CheckedShr",237],[10,"CheckedSub",237],[10,"CheckedEuclid",253],[10,"Euclid",253],[17,"Output"],[10,"Inv",261],[10,"MulAdd",264],[10,"MulAddAssign",264],[10,"OverflowingAdd",269],[10,"OverflowingMul",269],[10,"OverflowingSub",269],[10,"Saturating",275],[10,"SaturatingAdd",275],[10,"SaturatingMul",275],[10,"SaturatingSub",275],[10,"WrappingAdd",284],[10,"WrappingMul",284],[10,"WrappingNeg",284],[10,"WrappingShl",284],[10,"WrappingShr",284],[10,"WrappingSub",284],[10,"Clone",318],[10,"Mul",319],[10,"Pow",296],[10,"Signed",301],[10,"ConstOne",184],[10,"ConstZero",184]],"b":[[66,"impl-Display-for-ParseFloatError"],[67,"impl-Debug-for-ParseFloatError"]]}],\
["pin_project_lite",{"doc":"A lightweight version of pin-project written with …","t":"Q","n":["pin_project"],"q":[[0,"pin_project_lite"]],"d":["A macro that creates a projection type covering all the …"],"i":[0],"f":[0],"c":[],"p":[],"b":[]}],\
["ppv_lite86",{"doc":"","t":"KKKKKKKKKKRKKKKKKKKKKKKKMMQQQMMMMMMNNNNMMMMMMMMMMMMMMMMMMMMMMMMMKRKRKRKRKRKRKRKRKRKRMNNMMMNNEEEMMMCIIFFFFFFIIIFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNUUUNNNNNNNNNNNNNNN","n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"ppv_lite86"],[99,"ppv_lite86::x86_64"],[269,"core::clone"],[270,"core::marker"],[271,"core::result"],[272,"core::any"]],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to take …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,4,6,7,4,6,18,18,18,18,18,32,32,32,32,32,32,33,32,32,34,34,34,35,35,35,36,36,36,36,36,36,36,7,37,38,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,40,18,18,41,31,31,18,18,0,0,0,42,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,56,57,58,56,57,58,43,44,45,46,47,48,49,50,51,52,53,55,56,56,57,57,58,53,55,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,57,58,57,58,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58,56,0,0,0,43,44,45,46,47,48,49,50,51,52,53,55,56,57,58],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[],[[1,[-1]]]],[2,[],[[1,[-1]]]]],-1,[]],[3,3],0,0,0,[[4,5],-1,[]],[[6,5],-1,[]],[-1,7,[]],[[4,-1,5],4,[]],[[6,-1,5],6,[]],[[],[[18,[],[[8,[-1]],[9,[-2]],[10,[-3]],[11,[-4]],[12,[-5]],[13,[-6]],[14,[-7]],[15,[-8]],[16,[-9]],[17,[-10]]]]],19,20,21,22,23,24,25,26,27,28],[[[18,[],[[8,[-1]],[9,[-2]],[10,[-3]],[11,[-4]],[12,[-5]],[13,[-6]],[14,[-7]],[15,[-8]],[16,[-9]],[17,[-10]]]],[30,[29]]],-11,19,20,21,22,23,24,25,26,27,28,31],[[[18,[],[[8,[-1]],[9,[-2]],[10,[-3]],[11,[-4]],[12,[-5]],[13,[-6]],[14,[-7]],[15,[-8]],[16,[-9]],[17,[-10]]]],[30,[29]]],-11,19,20,21,22,23,24,25,26,27,28,31],[[[18,[],[[8,[-1]],[9,[-2]],[10,[-3]],[11,[-4]],[12,[-5]],[13,[-6]],[14,[-7]],[15,[-8]],[16,[-9]],[17,[-10]]]],[30,[29]]],-11,19,20,21,22,23,24,25,26,27,28,31],[[[18,[],[[8,[-1]],[9,[-2]],[10,[-3]],[11,[-4]],[12,[-5]],[13,[-6]],[14,[-7]],[15,[-8]],[16,[-9]],[17,[-10]]]],[30,[29]]],-11,19,20,21,22,23,24,25,26,27,28,31],[32,32],[32,32],[32,32],[32,32],[32,32],[32,32],[33,33],[32,32],[32,32],[34,34],[34,34],[34,34],[35,35],[35,35],[35,35],[36,36],[36,36],[36,36],[36,36],[36,36],[36,36],[36,36],[7,-1,[]],[37,-1,[]],[[38,38,38,38],[[39,[38,38,38,38]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,40,[]],[[[18,[],[[8,[-1]],[9,[-2]],[10,[-3]],[11,[-4]],[12,[-5]],[13,[-6]],[14,[-7]],[15,[-8]],[16,[-9]],[17,[-10]]]],-11],-12,19,20,21,22,23,24,25,26,27,28,[],[[40,[-11]]]],[[[18,[],[[8,[-1]],[9,[-2]],[10,[-3]],[11,[-4]],[12,[-5]],[13,[-6]],[14,[-7]],[15,[-8]],[16,[-9]],[17,[-10]]]],-11],-12,19,20,21,22,23,24,25,26,27,28,[],[[40,[-11]]]],[-1,41,[]],[[[30,[29]]],31],[[[30,[29]]],31],[[[18,[],[[8,[-1]],[9,[-2]],[10,[-3]],[11,[-4]],[12,[-5]],[13,[-6]],[14,[-7]],[15,[-8]],[16,[-9]],[17,[-10]]]],-11],-12,19,20,21,22,23,24,25,26,27,28,[],[[7,[-11]]]],[[[18,[],[[8,[-1]],[9,[-2]],[10,[-3]],[11,[-4]],[12,[-5]],[13,[-6]],[14,[-7]],[15,[-8]],[16,[-9]],[17,[-10]]]],-11],-12,19,20,21,22,23,24,25,26,27,28,[],[[7,[-11]]]],0,0,0,[42,-1,[]],[[31,[30,[29]]],39],[[31,[30,[29]]],39],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[[[53,[-1,-2,-3]]],[[53,[-1,-2,-3]]],54,54,54],[[[55,[-1]]],[[55,[-1]]],54],[56,56],[57,57],[58,58],[[],56],[[],57],[[],58],[[56,56],59],[[57,57],59],[[58,58],59],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[60,[5]]],56],[[[60,[61]]],57],[-1,-1,[]],[-1,-1,[]],[[],[[53,[-1,-2,-3]]],62,62,62],[[],[[55,[-1]]],62],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[60,[56]]],57],[[[60,[56]]],58],[57,[[60,[56]]]],[58,[[60,[56]]]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,[[63,[-2]]],[],[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[56,56],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[17,"Output"],[10,"AndNot",0],[10,"BSwap",0],[10,"Vec2",0],[1,"u32"],[10,"Vec4",0],[10,"MultiLane",0],[17,"u32x4"],[17,"u64x2"],[17,"u128x1"],[17,"u32x4x2"],[17,"u64x2x2"],[17,"u64x4"],[17,"u128x2"],[17,"u32x4x4"],[17,"u64x2x4"],[17,"u128x4"],[10,"Machine",0],[10,"u32x4",0],[10,"u64x2",0],[10,"u128x1",0],[10,"u32x4x2",0],[10,"u64x2x2",0],[10,"u64x4",0],[10,"u128x2",0],[10,"u32x4x4",0],[10,"u64x2x4",0],[10,"u128x4",0],[1,"u8"],[1,"slice"],[10,"StoreBytes",0],[10,"RotateEachWord32",0],[10,"RotateEachWord64",0],[10,"Words4",0],[10,"LaneWords4",0],[10,"Swap64",0],[10,"Vector",0],[10,"Vec4Ext",0],[1,"tuple"],[10,"Store",0],[10,"UnsafeFrom",0],[10,"VZip",0],[5,"YesS3",99],[5,"NoS3",99],[5,"YesS4",99],[5,"NoS4",99],[5,"YesA1",99],[5,"NoA1",99],[5,"YesA2",99],[5,"NoA2",99],[5,"YesNI",99],[5,"NoNI",99],[5,"SseMachine",99],[10,"Clone",269],[5,"Avx2Machine",99],[20,"vec128_storage",99],[20,"vec256_storage",99],[20,"vec512_storage",99],[1,"bool"],[1,"array"],[1,"u64"],[10,"Copy",270],[6,"Result",271],[5,"TypeId",272]],"b":[]}],\
["proc_macro2",{"doc":"github crates-io docs-rs","t":"PPPGFPFPPFFPPPFPGFFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNFENNNNNNNNNNNNNN","n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delim_span","delimiter","eq","eq","eq","eq","extend","extend","extra","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","resolved_at","set_span","set_span","set_span","set_span","set_span","source_text","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","DelimSpan","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","join","open","to_owned","try_from","try_into","type_id","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":[[0,"proc_macro2"],[228,"proc_macro2::extra"],[243,"proc_macro2::token_stream"],[259,"core::cmp"],[260,"core::marker"],[261,"core::convert"],[262,"core::iter::traits::collect"],[263,"core::fmt"],[264,"core::fmt"],[265,"proc_macro"],[266,"core::hash"],[267,"core::option"],[268,"alloc::string"],[269,"core::ops::range"],[270,"core::any"]],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns an object that holds this group’s <code>span_open()</code> and","Returns the punctuation used as the delimiter for this …","","","","","","","Items which do not have a correspondence to any API in the …","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the source text behind a span. This preserves the …","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","An object that holds a <code>Group</code>’s <code>span_open()</code> and …","","","","","Returns a span for the closing punctuation of the group …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns a span covering the entire delimited group.","Returns a span for the opening punctuation of the group …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[11,10,10,0,0,8,0,8,11,0,0,8,10,10,0,8,0,0,0,0,1,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,6,5,7,6,8,9,10,1,11,12,5,7,6,8,9,10,1,11,12,5,12,7,9,9,10,11,12,12,7,7,0,5,5,5,5,24,24,7,7,6,8,8,9,9,10,1,1,11,12,12,5,5,24,7,7,7,6,6,8,8,8,8,8,9,10,1,11,12,5,7,7,7,5,12,5,5,5,5,5,5,5,5,5,5,24,7,6,8,9,10,1,11,12,5,7,7,5,5,6,6,6,7,9,1,12,12,12,6,8,9,1,12,5,6,1,24,8,9,1,12,5,9,9,9,5,5,7,6,8,9,10,1,11,12,5,24,7,8,9,1,12,5,0,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,24,7,6,8,9,10,1,11,12,5,5,5,5,5,5,5,5,5,5,5,6,5,5,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[3]]],5],[[],6],[2,5],[7,7],[6,6],[8,8],[9,9],[10,10],[1,1],[11,11],[12,12],[5,5],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[12,12],14],[[],7],[9,15],[9,10],[[10,10],16],[[11,11],16],[[12,-1],16,[17,[19,[18]]]],[[12,12],16],[[7,-1],13,[[21,[],[[20,[8]]]]]],[[7,-1],13,[[21,[],[[20,[7]]]]]],0,[22,5],[22,5],[23,5],[23,5],[[24,25],26],[[24,25],26],[[7,25],26],[[7,25],26],[[6,25],26],[[8,25],26],[[8,25],26],[[9,25],26],[[9,25],26],[[10,25],26],[[1,25],26],[[1,25],26],[[11,25],26],[[12,25],26],[[12,25],26],[[5,25],26],[[5,25],26],[-1,-1,[]],[-1,-1,[]],[27,7],[8,7],[28,6],[-1,-1,[]],[1,8],[-1,-1,[]],[12,8],[5,8],[9,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,7,[[21,[],[[20,[7]]]]]],[-1,7,[[21,[],[[20,[8]]]]]],[18,[[29,[7,24]]]],[18,[[29,[5,24]]]],[[12,-1],13,30],[31,5],[31,5],[32,5],[32,5],[33,5],[33,5],[34,5],[34,5],[35,5],[35,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,36],[7,16],[37,5],[37,5],[[6,6],[[38,[6]]]],[[6,6],6],[[],6],[[],7],[[10,7],9],[[2,11],1],[[18,6],12],[[18,6],12],[[12,12],[[38,[14]]]],[[6,6],6],[[8,6],13],[[9,6],13],[[1,6],13],[[12,6],13],[[5,6],13],[6,[[38,[39]]]],[1,11],[24,6],[8,6],[9,6],[1,6],[12,6],[5,6],[9,6],[9,6],[9,7],[18,5],[[5,-1],[[38,[6]]],[[41,[40]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],0,[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[-1,42,[]],[43,5],[43,5],[44,5],[44,5],[45,5],[45,5],[46,5],[46,5],[3,5],[3,5],[6,28],[40,5],[40,5],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],13,[],[]],[15,6],[[15,25],26],[-1,-1,[]],[-1,-2,[],[]],[15,6],[15,6],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],13,[],[]],[[36,25],26],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,[[38,[8]]]],[36,[[13,[40,[38,[40]]]]]],[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,42,[]]],"c":[],"p":[[5,"Punct",0],[1,"char"],[1,"u8"],[1,"slice"],[5,"Literal",0],[5,"Span",0],[5,"TokenStream",0],[6,"TokenTree",0],[5,"Group",0],[6,"Delimiter",0],[6,"Spacing",0],[5,"Ident",0],[1,"tuple"],[6,"Ordering",259],[5,"DelimSpan",228],[1,"bool"],[10,"Sized",260],[1,"str"],[10,"AsRef",261],[17,"Item"],[10,"IntoIterator",262],[1,"f32"],[1,"f64"],[5,"LexError",0],[5,"Formatter",263],[8,"Result",263],[5,"TokenStream",264],[5,"Span",264],[6,"Result",265],[10,"Hasher",266],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[5,"IntoIter",243],[1,"isize"],[6,"Option",267],[5,"String",268],[1,"usize"],[10,"RangeBounds",269],[5,"TypeId",270],[1,"u128"],[1,"u16"],[1,"u32"],[1,"u64"]],"b":[[68,"impl-PartialEq%3CT%3E-for-Ident"],[69,"impl-PartialEq-for-Ident"],[70,"impl-Extend%3CTokenTree%3E-for-TokenStream"],[71,"impl-Extend%3CTokenStream%3E-for-TokenStream"],[77,"impl-Debug-for-LexError"],[78,"impl-Display-for-LexError"],[79,"impl-Debug-for-TokenStream"],[80,"impl-Display-for-TokenStream"],[82,"impl-Debug-for-TokenTree"],[83,"impl-Display-for-TokenTree"],[84,"impl-Debug-for-Group"],[85,"impl-Display-for-Group"],[87,"impl-Debug-for-Punct"],[88,"impl-Display-for-Punct"],[90,"impl-Debug-for-Ident"],[91,"impl-Display-for-Ident"],[92,"impl-Debug-for-Literal"],[93,"impl-Display-for-Literal"],[96,"impl-From%3CTokenStream%3E-for-TokenStream"],[97,"impl-From%3CTokenTree%3E-for-TokenStream"],[100,"impl-From%3CPunct%3E-for-TokenTree"],[102,"impl-From%3CIdent%3E-for-TokenTree"],[103,"impl-From%3CLiteral%3E-for-TokenTree"],[104,"impl-From%3CGroup%3E-for-TokenTree"],[111,"impl-FromIterator%3CTokenStream%3E-for-TokenStream"],[112,"impl-FromIterator%3CTokenTree%3E-for-TokenStream"]]}],\
["quote",{"doc":"github crates-io docs-rs","t":"KKKMMMMMQNNQQNNNNM","n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":[[0,"quote"],[18,"proc_macro2"],[19,"core::convert"],[20,"core::iter::traits::collect"],[21,"core::fmt"],[22,"core::fmt"]],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,1,1,1,1,7,0,6,6,0,0,7,7,6,6,6],"f":[0,0,0,[[1,-1],2,[[4,[3]]]],[[1,-1],2,5],[[1,-1,-2],2,5,6],[[1,-1,-2],2,5,6],[[7,8],9],0,[6,10],[6,10],0,0,[7,[[12,[11]]]],[7,[[12,[11]]]],[6,10],[6,10],[[6,10],2]],"c":[],"p":[[10,"TokenStreamExt",0],[1,"tuple"],[6,"TokenTree",18],[10,"Into",19],[10,"IntoIterator",20],[10,"ToTokens",0],[10,"IdentFragment",0],[5,"Formatter",21],[8,"Result",21],[5,"TokenStream",18],[5,"Span",18],[6,"Option",22]],"b":[]}],\
["raft",{"doc":"The Raft consensus algorithm implementation.","t":"CPPPFGNNNNNNNNNNNNNNNNNNNNNNNNN","n":["node","Candidate","Follower","Leader","Node","Status","borrow","borrow","borrow_mut","borrow_mut","current_term","eq","fmt","from","from","into","into","is_leader","is_leader","new","socket_addr","status","timeout","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"raft"],[1,"raft::node"],[31,"core::fmt"],[32,"core::fmt"],[33,"core::result"],[34,"core::any"]],"d":["In Raft, each server is represented as a node <code>Node</code>.","Candidate status.","Follower status. The default status of a new node.","Leader status.","A Raft node that represents a server in the cluster.","All possible status (states) of a Raft node.","","","","","Get the current term of the node.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the node is a leader.","","Create a new node with <code>Status::Follower</code> status.","Get the IP address of the node.","Get the current status of the node.","","","","","","","","",""],"i":[0,3,3,3,0,0,1,3,1,3,1,3,3,1,3,1,3,1,3,1,1,1,1,1,3,1,3,1,3,1,3],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,3],4],[[3,5],6],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,4],[3,4],[7,1],[1,7],[1,3],[1,8],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Node",1],[1,"u128"],[6,"Status",1],[1,"bool"],[5,"Formatter",31],[8,"Result",31],[6,"SocketAddr",32],[1,"tuple"],[6,"Result",33],[5,"TypeId",34]],"b":[]}],\
["rand",{"doc":"Utilities for random number generation","t":"TKFKTKKRKNNNCNNMNNNNNNNMNNNNNNNNNNNMMCHNNCNNNNNCNNHNMNNMNNNNPFFGFFKKPPPFFFFPFGFMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNCKKKRFFFFFKRMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEECKFNNNNNNNNNNEEEEEEEEEEEFFFCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNRKFKNNMNMNNMMNMMNNCNNNNMMNNNNNGGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNN","n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","AllWeightsZero","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InvalidProbability","InvalidWeight","NoItem","Open01","OpenClosed01","Slice","Standard","TooMany","Uniform","WeightedError","WeightedIndex","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","new","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","update_weights","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","WeightedError","WeightedIndex","alias_method","Weight","WeightedIndex","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","StdRng","ThreadRng","adapter","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_rng","from_seed","into","into","into","mock","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"rand"],[60,"rand::distributions"],[328,"rand::distributions::uniform"],[473,"rand::distributions::weighted"],[476,"rand::distributions::weighted::alias_method"],[488,"rand::prelude"],[499,"rand::rngs"],[560,"rand::rngs::adapter"],[608,"rand::rngs::mock"],[627,"rand::seq"],[657,"rand::seq::index"],[710,"core::num::nonzero"],[711,"core::option"],[712,"core::marker"],[713,"core::fmt"],[714,"core::fmt"],[715,"getrandom::error"],[716,"core::default"],[717,"core::convert"],[718,"core::error"],[719,"alloc::boxed"],[720,"core::convert"],[721,"alloc::string"],[722,"core::any"],[723,"core::clone"],[724,"core::cmp"],[725,"core::cmp"],[726,"core::ops::range"],[727,"core::iter::traits::collect"],[728,"core::ops::arith"],[729,"core::num::nonzero"],[730,"core::time"],[731,"alloc::vec"],[732,"rand_core::block"],[733,"std::io"],[734,"core::ops::index"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","All items in the provided weight collection are zero.","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Too many weights are provided (length greater than <code>u32::MAX</code>…","Sample values uniformly between two bounds.","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling of discrete items","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","Update a subset of weights, without changing the number of …","","","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,16,0,1,1,1,0,4,4,8,1,1,1,1,1,16,16,16,4,4,4,4,4,4,4,4,1,1,1,8,8,0,0,1,8,0,4,4,4,4,16,0,1,1,0,1,6,4,4,8,1,1,1,1,47,0,0,0,0,0,0,0,40,47,47,0,0,0,0,47,0,0,0,36,37,38,39,40,32,52,41,42,37,43,45,47,48,38,39,40,32,52,41,42,37,43,45,47,48,38,39,40,41,42,37,43,45,47,48,38,39,40,41,42,37,43,45,47,48,38,39,40,45,47,48,39,40,40,32,52,41,42,37,43,45,47,47,48,38,39,40,32,52,41,42,37,43,45,47,48,48,48,38,39,39,40,32,52,41,42,37,43,45,47,48,38,32,31,31,39,43,45,32,31,39,52,41,41,42,42,37,43,45,48,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,31,31,36,36,32,39,40,41,42,37,43,45,47,48,38,40,47,39,40,32,52,41,42,37,43,45,47,48,38,39,40,32,52,41,42,37,43,45,47,48,38,39,40,32,52,41,42,37,43,45,47,48,38,0,45,39,40,32,52,41,42,37,43,45,47,48,38,0,0,0,0,21,0,0,0,0,0,0,81,75,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,78,76,77,78,79,76,77,78,79,76,77,78,79,22,81,48,76,76,76,76,76,76,76,76,76,76,76,76,77,78,78,79,81,48,76,76,76,76,76,76,76,76,76,76,76,76,77,78,78,79,81,76,76,76,76,76,76,76,76,76,76,76,76,77,78,78,79,22,81,76,76,76,76,76,76,76,76,76,76,76,76,78,78,81,76,76,76,76,76,76,76,76,76,76,76,76,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,76,77,78,79,0,0,0,0,0,83,83,83,83,83,83,83,83,83,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,87,33,86,87,33,86,87,33,86,87,33,86,87,33,86,33,87,86,87,33,86,87,33,86,87,33,87,87,86,87,33,0,86,87,33,86,87,33,86,87,33,86,87,33,86,87,33,86,87,33,86,87,33,86,87,33,0,0,0,88,90,93,88,90,93,88,88,88,90,88,90,93,93,88,90,93,88,90,93,88,90,88,90,88,90,88,88,93,88,93,90,88,90,93,88,90,93,88,90,93,88,90,93,88,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,95,0,0,0,97,97,95,96,95,96,96,95,95,96,95,95,97,97,0,97,97,97,97,95,95,97,97,97,97,97,0,0,0,99,101,100,99,101,100,99,100,99,100,99,99,101,100,99,99,99,101,100,99,99,101,100,99,101,100,99,99,99,99,101,100,0,0,101,100,99,100,99,101,100,99,101,100,99,101,100,99,101,100],"f":[0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,[[3,[2]]]],0,[[4,-1],5,[6,7]],[[4,-1],5,[6,7]],[[8,[10,[9]]],5],[[1,11],[[13,[5,12]]]],[[1,11],[[13,[5,12]]]],[2,1],[14,1],[-1,-1,[]],[[],[[16,[],[[15,[-1]]]]],[7,17,[18,[[10,[9]]]]]],[-1,[[13,[[16,[],[[15,[-2]]]],1]]],8,[7,17,[18,[[10,[9]]]]]],[-1,[[16,[],[[15,[-1]]]]],[7,17,[18,[[10,[9]]]]]],[4,-1,[]],[4,-1,[]],[[4,19],20],[[4,19],20],[[4,-2],-1,21,[[22,[-1]]]],[[4,-2],-1,21,[[22,[-1]]]],[[4,23,23],20],[[4,23,23],20],[1,24],[-1,-2,[],[]],[-1,1,[[26,[[25,[24]]]]]],[8,23],[8,27],0,[[],-1,[]],[1,[[3,[28]]]],[[8,[10,[9]]],[[13,[29,30]]]],0,[[4,-2],-1,[],[[31,[-1]]]],[[4,-2],-1,[],[[31,[-1]]]],[[4,-2],[[32,[-2,4,-1]]],[],[[31,[-1]]]],[[4,-2],[[32,[-2,4,-1]]],[],[[31,[-1]]]],[27,[[16,[],[[15,[-1]]]]],[7,17,[18,[[10,[9]]]]]],0,[1,[[3,[24]]]],[1,[[25,[24]]]],[[],33],[-1,34,[]],[[6,-1],[[13,[5,1]]],[4,7]],[[4,-1],[[13,[5,1]]],[6,7]],[[4,-1],[[13,[5,1]]],[6,7]],[[8,[10,[9]]],[[13,[5,1]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[36,-1,34,29],5,[4,7]],[[37,-1,34,29],5,[4,7]],[[38,-1,34,29],5,[4,7]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,39],[40,40],[41,41],[42,42],[37,37],[[[43,[-1]]],[[43,[-1]]],44],[[[45,[-1]]],[[45,[-1]]],[44,21,46]],[47,47],[[[48,[-1]]],[[48,[-1]]],[44,21]],[38,38],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[39,39],20],[[40,40],20],[[[45,[-1]],[45,[-1]]],20,[49,21,46]],[[47,47],20],[[[48,[-1]],[48,[-1]]],20,[49,21]],[[39,11],50],[[40,11],50],[[40,11],50],[[[32,[-1,-2,-3]],11],50,51,51,51],[[[52,[-1,-2,-3,-4]],11],50,51,51,51,51],[[41,11],50],[[42,11],50],[[37,11],50],[[[43,[-1]],11],50,51],[[[45,[-1]],11],50,[51,21,46]],[[47,11],50],[[47,11],50],[[[48,[-1]],11],50,[51,21]],[[38,11],50],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[53,[-1]]],[[48,[-1]]],21],[[[54,[-1]]],[[48,[-1]]],21],[-1,-1,[]],[[23,23],[[13,[39,40]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[31,-3],[[52,[31,-3,-1,-2]]],[],[],[[56,[-1],[[55,[-2]]]]]],[[31,-3],[[52,[31,-3,-1,-2]]],[],[],[[56,[-1],[[55,[-2]]]]]],[19,[[13,[39,40]]]],[[[10,[-1]]],[[13,[[43,[-1]],0]]],[]],[-1,[[13,[[45,[-2]],47]]],57,[58,44,17,21,46]],[[[32,[-2,-3,-1]]],[[3,[-1]]],[],[[31,[-1]]],4],[[31,-1],-2,[4,7],[]],[[39,-1],20,[4,7]],[[[52,[-2,-4,-1,-3]],-5],-3,[],[[31,[-1]]],[],[[56,[-1],[[55,[-3]]]]],[4,7]],[[41,-1],59,[4,7]],[[41,-1],19,[4,7]],[[42,-1],59,[4,7]],[[42,-1],19,[4,7]],[[37,-1],9,[4,7]],[[[43,[-1]],-2],-1,[],[4,7]],[[[45,[-1]],-2],29,[21,46],[4,7]],[[[48,[-1]],-2],-1,21,[4,7]],[[38,-1],2,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],61,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],23,[4,7]],[[38,-1],62,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[5,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[5,[-2,-3,-4,-5,-6,-7,-8]]],[4,7],[],[],[],[],[],[],[]],[[38,-1],63,[4,7]],[[38,-1],64,[4,7]],[[38,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[4,7],[],[],[],[],[],[],[],[],[],[],[],[]],[[38,-1],65,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[5,[-2,-3,-4,-5]]],[4,7],[],[],[],[]],[[38,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9]]],[4,7],[],[],[],[],[],[],[],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[5,[-2,-3,-4,-5,-6]]],[4,7],[],[],[],[],[]],[[38,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[4,7],[],[],[],[],[],[],[],[],[],[]],[[38,-1],27,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],28,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],29,[4,7]],[[38,-1],66,[4,7]],[[38,-1],67,[4,7]],[[38,-1],19,[4,7]],[[38,-1],68,[4,7]],[[38,-1],[[3,[-2]]],[4,7],[]],[[38,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[4,7],[],[],[],[],[],[],[],[],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],69,[4,7]],[[38,-1],70,[4,7]],[[38,-1],[[71,[-2]]],[4,7],[]],[[38,-1],20,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],59,[4,7]],[[38,-1],[[5,[-2,-3,-4,-5,-6,-7]]],[4,7],[],[],[],[],[],[]],[[38,-1],72,[4,7]],[[38,-1],9,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],73,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[5,[-2,-3]]],[4,7],[],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[5,[-2,-3,-4]]],[4,7],[],[],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],5,[4,7]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],74,[4,7]],[[38,-1],[[5,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[4,7],[],[],[],[],[],[],[],[],[],[],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[38,-1],[[60,[-2]]],[4,7],[]],[[31,-1],[[32,[31,-1,-2]]],4,[]],[[31,-1],[[32,[31,-1,-2]]],4,[]],[[36,-1,29],34,[4,7]],[[36,-1,29],34,[4,7]],[[[32,[-2,-3,-1]]],[[5,[29,[3,[29]]]]],[],[[31,[-1]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,34,[]],[-1,34,[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],0,[[[45,[-1]],[10,[[5,[29,-1]]]]],[[13,[5,47]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[75,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[76,[-1]]],[[76,[-1]]],44],[77,77],[[[78,[-1]]],[[78,[-1]]],44],[79,79],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[76,[-1]],[76,[-1]]],20,49],[[[78,[-1]],[78,[-1]]],20,49],[[[76,[-1]],11],50,51],[[77,11],50],[[[78,[-1]],11],50,51],[[79,11],50],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[22,20],[[-2,-3],[[81,[],[[80,[-1]]]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[48,[-1]]],21,[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[70]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[73]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[61]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[29]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[72]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[28]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[74]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[27]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[65]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[9]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[69]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[23]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],77,[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[78,[59]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[78,[19]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],79,[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[81,[],[[80,[-1]]]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[48,[-1]]],21,[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[74]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[29]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[23]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[73]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[69]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[27]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[9]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[65]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[72]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[70]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[28]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[76,[61]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],77,[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[78,[59]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],[[78,[19]]],[],[[75,[-1]],7],[[75,[-1]],7]],[[-2,-3],79,[],[[75,[-1]],7],[[75,[-1]],7]],[[[81,[],[[80,[-1]]]],-2],-1,[],[4,7]],[[[76,[72]],-1],-2,[4,7],[]],[[[76,[61]],-1],-2,[4,7],[]],[[[76,[69]],-1],-2,[4,7],[]],[[[76,[73]],-1],-2,[4,7],[]],[[[76,[23]],-1],-2,[4,7],[]],[[[76,[65]],-1],-2,[4,7],[]],[[[76,[27]],-1],-2,[4,7],[]],[[[76,[9]],-1],-2,[4,7],[]],[[[76,[70]],-1],-2,[4,7],[]],[[[76,[29]],-1],-2,[4,7],[]],[[[76,[28]],-1],-2,[4,7],[]],[[[76,[74]],-1],-2,[4,7],[]],[[77,-1],-2,[4,7],[]],[[[78,[19]],-1],-2,[4,7],[]],[[[78,[59]],-1],-2,[4,7],[]],[[79,-1],82,[4,7]],[[22,-1],-2,[8,7],[]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[[-2,-3,-4],-1,[],[[75,[-1]],7],[[75,[-1]],7],[4,7]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[83,[-1]],11],50,[51,84]],[-1,-1,[]],[-1,-2,[],[]],[[[85,[-1]]],[[13,[[83,[-1]],47]]],84],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[86,86],[87,87],[33,33],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],86],[[],33],[[87,87],20],[[86,[10,[9]]],5],[[87,[10,[9]]],5],[[33,[10,[9]]],5],[[86,11],[[13,[5,12]]]],[[87,11],50],[[33,11],50],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[13,[87,1]]],8],[-1,87,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[86,23],[87,23],[33,23],[86,27],[87,27],[33,27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[86,[10,[9]]],[[13,[5,1]]]],[[87,[10,[9]]],[[13,[5,1]]]],[[33,[10,[9]]],[[13,[5,1]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[88,[-1,-2]]],[[88,[-1,-2]]],[89,16,44],[8,44]],[[-1,-2],5,[],[]],[[[90,[-1]],[10,[9]]],5,91],[[[88,[-1,-2]],[10,[9]]],5,[[89,[],[[92,[23]]]],16],8],[[[90,[-1]],11],50,51],[[93,11],50],[[93,11],50],[[[88,[-1,-2]],11],50,[89,16,51],[8,51]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[90,[-1]]],91],[[-1,27,-2],[[88,[-1,-2]]],[89,16],8],[[[90,[-1]]],23,91],[[[88,[-1,-2]]],23,[[89,[],[[92,[23]]]],16],8],[[[90,[-1]]],27,91],[[[88,[-1,-2]]],27,[[89,[],[[92,[23]]]],16],8],[[[88,[-1,-2]]],[[13,[5,1]]],[89,16],8],[93,[[3,[24]]]],[-1,-2,[],[]],[-1,34,[]],[[[90,[-1]],[10,[9]]],[[13,[5,1]]],91],[[[88,[-1,-2]],[10,[9]]],[[13,[5,1]]],[[89,[],[[92,[23]]]],16],8],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[94,94],[[-1,-2],5,[],[]],[[94,94],20],[[94,[10,[9]]],5],[[94,11],50],[-1,-1,[]],[-1,-2,[],[]],[[27,27],94],[94,23],[94,27],[-1,-2,[],[]],[[94,[10,[9]]],[[13,[5,1]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[95,[],[[92,[-1]]]],-2],[[3,[-1]]],[],[4,7]],[[96,-1],[[3,[-2]]],[4,7],[]],[[[95,[],[[92,[-1]]]],-2,29],[[97,[[95,[],[[92,[-1]]]],-1]]],[],[4,7]],[[96,-1,29],[[85,[-2]]],[4,7],[]],[[96,-1,[10,[-2]]],29,[4,7],[]],[[[95,[],[[92,[-1]]]],-2,29,-4],[[13,[[97,[[95,[],[[92,[-1]]]],-1]],47]]],[],[4,7],[[26,[19]]],[[56,[-1],[[55,[-3]]]]]],[[[95,[],[[92,[-1]]]],-2],[[3,[-1]]],[],[4,7]],[[96,-1],[[3,[-2]]],[4,7],[]],[[[95,[],[[92,[-1]]]],-2,-5],[[13,[-1,47]]],[],[4,7],[],[[75,[-3]]],[[56,[-1],[[55,[-4]]]]]],[[[95,[],[[92,[-1]]]],-2,-5],[[13,[-1,47]]],[],[4,7],[],[[75,[-3]]],[[56,[-1],[[55,[-4]]]]]],[[[97,[-1,-2]],11],50,[51,7],51],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[97,[-2,-1]]],29,[],[[98,[29],[[55,[-1]]]],7]],[[[97,[-2,-1]]],[[3,[-3]]],[],[[98,[29],[[55,[-1]]]],7],[]],[[[95,[],[[92,[-1]]]],-2,29],[[5,[[10,[-1]],[10,[-1]]]]],[],[4,7]],[[[95,[],[[92,[-1]]]],-2],5,[],[4,7]],[[[97,[-2,-1]]],[[5,[29,[3,[29]]]]],[],[[98,[29],[[55,[-1]]]],7]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,35,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[99,99],[100,100],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[99,99],20],[[99,11],50],[[101,11],50],[[100,11],50],[[[85,[23]]],99],[-1,-1,[]],[[[85,[29]]],99],[-1,-1,[]],[-1,-1,[]],[[99,29],29],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[99,100],[-1,-2,[],[]],[-1,-2,[],[]],[99,[[85,[29]]]],[99,20],[99,101],[99,29],[101,[[3,[29]]]],[100,[[3,[-1]]],[]],[[-1,29,29],99,[4,7]],[[-1,29,-3,29],[[13,[99,47]]],[4,7],[[26,[19]]],[[56,[29],[[55,[-2]]]]]],[101,[[5,[29,[3,[29]]]]]],[100,[[5,[29,[3,[29]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,35,[]],[-1,35,[]],[-1,35,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[327,473,474,475,476,477,480,483,560,561],"p":[[5,"Error",0],[5,"NonZeroU32",710],[6,"Option",711],[10,"Rng",0],[1,"tuple"],[10,"Fill",0],[10,"Sized",712],[10,"RngCore",0],[1,"u8"],[1,"slice"],[5,"Formatter",713],[5,"Error",713],[6,"Result",714],[5,"Error",715],[17,"Seed"],[10,"SeedableRng",0],[10,"Default",716],[10,"AsMut",717],[1,"f64"],[1,"bool"],[10,"SampleUniform",328],[10,"SampleRange",328],[1,"u32"],[10,"Error",718],[5,"Box",719],[10,"Into",717],[1,"u64"],[1,"i32"],[1,"usize"],[5,"Error",720],[10,"Distribution",60],[5,"DistIter",60],[5,"ThreadRng",499],[5,"String",721],[5,"TypeId",722],[10,"DistString",60],[5,"Alphanumeric",60],[5,"Standard",60],[5,"Bernoulli",60],[6,"BernoulliError",60],[5,"OpenClosed01",60],[5,"Open01",60],[5,"Slice",60],[10,"Clone",723],[5,"WeightedIndex",60],[10,"PartialOrd",724],[6,"WeightedError",60],[5,"Uniform",60],[10,"PartialEq",724],[8,"Result",713],[10,"Debug",713],[5,"DistMap",60],[5,"RangeInclusive",725],[5,"Range",725],[17,"Output"],[10,"Fn",726],[10,"IntoIterator",727],[10,"AddAssign",728],[1,"f32"],[1,"array"],[1,"i8"],[5,"NonZeroU16",710],[5,"NonZeroU8",710],[1,"char"],[1,"u16"],[5,"NonZeroU64",710],[5,"NonZeroU128",710],[5,"NonZeroUsize",710],[1,"i64"],[1,"i16"],[5,"Wrapping",729],[1,"i128"],[1,"isize"],[1,"u128"],[10,"SampleBorrow",328],[5,"UniformInt",328],[5,"UniformChar",328],[5,"UniformFloat",328],[5,"UniformDuration",328],[17,"X"],[10,"UniformSampler",328],[5,"Duration",730],[5,"WeightedIndex",476],[10,"Weight",476],[5,"Vec",731],[5,"OsRng",499],[5,"StdRng",499],[5,"ReseedingRng",560],[10,"BlockRngCore",732],[5,"ReadRng",560],[10,"Read",733],[17,"Item"],[5,"ReadError",560],[5,"StepRng",608],[10,"SliceRandom",627],[10,"IteratorRandom",627],[5,"SliceChooseIter",627],[10,"Index",734],[6,"IndexVec",657],[6,"IndexVecIntoIter",657],[6,"IndexVecIter",657]],"b":[[16,"impl-Display-for-Error"],[17,"impl-Debug-for-Error"],[18,"impl-From%3CNonZeroU32%3E-for-Error"],[19,"impl-From%3CError%3E-for-Error"],[132,"impl-Display-for-BernoulliError"],[133,"impl-Debug-for-BernoulliError"],[141,"impl-Debug-for-WeightedError"],[142,"impl-Display-for-WeightedError"],[156,"impl-From%3CRangeInclusive%3CX%3E%3E-for-Uniform%3CX%3E"],[157,"impl-From%3CRange%3CX%3E%3E-for-Uniform%3CX%3E"],[182,"impl-Distribution%3Cf32%3E-for-OpenClosed01"],[183,"impl-Distribution%3Cf64%3E-for-OpenClosed01"],[184,"impl-Distribution%3Cf32%3E-for-Open01"],[185,"impl-Distribution%3Cf64%3E-for-Open01"],[190,"impl-Distribution%3CNonZeroU32%3E-for-Standard"],[191,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[192,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[193,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[194,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[195,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[196,"impl-Distribution%3Ci8%3E-for-Standard"],[197,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[198,"impl-Distribution%3Cu32%3E-for-Standard"],[199,"impl-Distribution%3CNonZeroU16%3E-for-Standard"],[200,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[201,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[202,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[203,"impl-Distribution%3C(A,)%3E-for-Standard"],[204,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[205,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[206,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Standard"],[207,"impl-Distribution%3CNonZeroU8%3E-for-Standard"],[208,"impl-Distribution%3Cchar%3E-for-Standard"],[209,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Standard"],[210,"impl-Distribution%3Cu16%3E-for-Standard"],[211,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[212,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[213,"impl-Distribution%3C(A,+B,+C,+D)%3E-for-Standard"],[214,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Standard"],[215,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[216,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[217,"impl-Distribution%3C(A,+B,+C,+D,+E)%3E-for-Standard"],[218,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Standard"],[219,"impl-Distribution%3Cu64%3E-for-Standard"],[220,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[221,"impl-Distribution%3Ci32%3E-for-Standard"],[222,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[223,"impl-Distribution%3Cusize%3E-for-Standard"],[224,"impl-Distribution%3CNonZeroU64%3E-for-Standard"],[225,"impl-Distribution%3CNonZeroU128%3E-for-Standard"],[226,"impl-Distribution%3Cf64%3E-for-Standard"],[227,"impl-Distribution%3CNonZeroUsize%3E-for-Standard"],[228,"impl-Distribution%3COption%3CT%3E%3E-for-Standard"],[229,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Standard"],[230,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[231,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[232,"impl-Distribution%3Ci64%3E-for-Standard"],[233,"impl-Distribution%3Ci16%3E-for-Standard"],[234,"impl-Distribution%3CWrapping%3CT%3E%3E-for-Standard"],[235,"impl-Distribution%3Cbool%3E-for-Standard"],[236,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[237,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[238,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[239,"impl-Distribution%3Cf32%3E-for-Standard"],[240,"impl-Distribution%3C(A,+B,+C,+D,+E,+F)%3E-for-Standard"],[241,"impl-Distribution%3Ci128%3E-for-Standard"],[242,"impl-Distribution%3Cu8%3E-for-Standard"],[243,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[244,"impl-Distribution%3Cisize%3E-for-Standard"],[245,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[246,"impl-Distribution%3C(A,+B)%3E-for-Standard"],[247,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[248,"impl-Distribution%3C(A,+B,+C)%3E-for-Standard"],[249,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[250,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[251,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[252,"impl-Distribution%3C()%3E-for-Standard"],[253,"impl-Distribution%3C%5BT;+32%5D%3E-for-Standard"],[254,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[255,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[256,"impl-Distribution%3Cu128%3E-for-Standard"],[257,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Standard"],[258,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[259,"impl-Distribution%3C%5BT;+(%24n+-+1)%5D%3E-for-Standard"],[373,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[374,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[375,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[376,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[377,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[378,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[379,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[380,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[381,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[382,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[383,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[384,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[386,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[387,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[391,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[392,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[393,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[394,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[395,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[396,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[397,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[398,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[399,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[400,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[401,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[402,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[404,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[405,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[408,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[409,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[410,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[411,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[412,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[413,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[414,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[415,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[416,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[417,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[418,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[419,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[421,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[422,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[426,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[427,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[428,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[429,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[430,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[431,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[432,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[433,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[434,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[435,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[436,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[437,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[438,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[439,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[441,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[442,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[443,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[444,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[445,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[446,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[447,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[448,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[449,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[450,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[451,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[452,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[575,"impl-Debug-for-ReadError"],[576,"impl-Display-for-ReadError"],[674,"impl-From%3CVec%3Cu32%3E%3E-for-IndexVec"],[676,"impl-From%3CVec%3Cusize%3E%3E-for-IndexVec"]]}],\
["rand_chacha",{"doc":"The ChaCha random number generator.","t":"FFFFFFIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","as_rngcore","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"rand_chacha"],[129,"rand_core"],[130,"core::fmt"],[131,"core::fmt"],[132,"core::result"],[133,"core::any"]],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,3,4,5,5,6,7,7,2,3,4,5,6,7,2,4,6,3,5,7,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,3,5,7,0,3,5,7,3,5,7,2,3,4,5,6,7,3,5,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[2,2],9],[[3,3],9],[[4,4],9],[[5,5],9],[[6,6],9],[[7,7],9],[[3,[11,[10]]],8],[[5,[11,[10]]],8],[[7,[11,[10]]],8],[[2,12],13],[[3,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[-1,-1,[]],[-1,-1,[]],[2,3],[-1,-1,[]],[4,5],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[6,7],[-1,2,[]],[-1,3,[]],[-1,4,[]],[-1,5,[]],[-1,6,[]],[-1,7,[]],[[2,-1],8,[]],[[4,-1],8,[]],[[6,-1],8,[]],[3,[[14,[10]]]],[5,[[14,[10]]]],[7,[[14,[10]]]],[3,15],[5,15],[7,15],[3,16],[5,16],[7,16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,17],[5,17],[7,17],[3,15],[5,15],[7,15],0,[[3,15],8],[[5,15],8],[[7,15],8],[[3,16],8],[[5,16],8],[[7,16],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,[11,[10]]],[[19,[8,18]]]],[[5,[11,[10]]],[[19,[8,18]]]],[[7,[11,[10]]],[[19,[8,18]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[10,"RngCore",129],[5,"ChaCha20Core",0],[5,"ChaCha20Rng",0],[5,"ChaCha12Core",0],[5,"ChaCha12Rng",0],[5,"ChaCha8Core",0],[5,"ChaCha8Rng",0],[1,"tuple"],[1,"bool"],[1,"u8"],[1,"slice"],[5,"Formatter",130],[8,"Result",130],[1,"array"],[1,"u64"],[1,"u128"],[1,"u32"],[5,"Error",131],[6,"Result",132],[5,"TypeId",133]],"b":[]}],\
["rand_core",{"doc":"Random number generation traits","t":"TKKFTFKRKMNCNNNNNNNNMNNNNNNNNNNMCNNNCNMNMNNNNNNNNMNNNNNNNFFKRRNNNNNNNNNOONNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHH","n":["CUSTOM_START","CryptoRng","CryptoRngCore","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","as_rngcore","as_rngcore","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","as_rngcore","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":[[0,"rand_core"],[57,"rand_core::block"],[110,"rand_core::impls"],[116,"rand_core::le"],[118,"core::num::nonzero"],[119,"core::option"],[120,"core::fmt"],[121,"core::fmt"],[122,"core::marker"],[123,"core::default"],[124,"core::convert"],[125,"core::result"],[126,"core::error"],[127,"alloc::boxed"],[128,"core::convert"],[129,"alloc::string"],[130,"core::any"],[131,"core::clone"],[132,"core::fmt"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","An extension trait that is automatically implemented for …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Upcast to an <code>RngCore</code> trait object.","","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[5,0,0,0,5,0,0,14,0,1,3,0,5,3,5,3,3,3,5,3,2,3,5,5,3,5,5,5,3,14,14,14,0,5,5,3,0,5,2,3,2,3,5,2,14,5,5,3,5,2,3,5,3,5,3,5,3,0,0,0,31,31,29,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,31,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[1,2],[-1,2,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[[-1,-2],4,[],[]],[5,[[7,[6]]]],[[],3],[[2,[9,[8]]],4],[[3,[9,[8]]],4],[[5,10],11],[[5,10],11],[[3,10],11],[-1,-1,[]],[12,5],[6,5],[-1,-1,[]],[[],[[14,[],[[13,[-1]]]]],[15,16,[17,[[9,[8]]]]]],[-1,[[18,[[14,[],[[13,[-2]]]],5]]],2,[15,16,[17,[[9,[8]]]]]],[-1,[[14,[],[[13,[-1]]]]],[15,16,[17,[[9,[8]]]]]],0,[5,19],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,5,[[21,[[20,[19]]]]]],[2,22],[3,22],[2,23],[3,23],[5,[[7,[24]]]],[[2,[9,[8]]],[[18,[25,26]]]],[23,[[14,[],[[13,[-1]]]]],[15,16,[17,[[9,[8]]]]]],[5,[[7,[19]]]],[5,[[20,[19]]]],[-1,-2,[],[]],[-1,27,[]],[[2,[9,[8]]],[[18,[4,5]]]],[[3,[9,[8]]],[[18,[4,5]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],0,0,0,0,0,[-1,2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[29,[-1]]],[[29,[-1]]],[30,31,15]],[[[32,[-1]]],[[32,[-1]]],[30,31,15]],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],0,0,[[[29,[-1]],[9,[8]]],4,[[31,[],[[33,[22]]]]]],[[[32,[-1]],[9,[8]]],4,[[31,[],[[33,[23]]]]]],[[[29,[-1]],10],11,[31,34]],[[[32,[-1]],10],11,[31,34]],[-1,-1,[]],[-1,-1,[]],[-1,[[18,[[29,[-2]],5]]],2,[31,14]],[-1,[[18,[[32,[-2]],5]]],2,[31,14]],[-1,[[29,[-2]]],[],[31,14]],[-1,[[32,[-2]]],[],[31,14]],[[[31,[],[[33,[-1]],[35,[-2]]]],-2],4,[],[[36,[[9,[-1]]]],[17,[[9,[-1]]]],16]],[[[29,[-1]],25],4,31],[[[32,[-1]],25],4,31],[[[29,[-1]]],25,31],[[[32,[-1]]],25,31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[29,[-1]]],31],[-1,[[32,[-1]]],31],[[[29,[-1]]],22,[[31,[],[[33,[22]]]]]],[[[32,[-1]]],22,[[31,[],[[33,[23]]]]]],[[[29,[-1]]],23,[[31,[],[[33,[22]]]]]],[[[32,[-1]]],23,[[31,[],[[33,[23]]]]]],[[[29,[-1]]],4,31],[[[32,[-1]]],4,31],[23,[[29,[-1]]],[31,14]],[23,[[32,[-1]]],[31,14]],[-1,-2,[],[]],[-1,-2,[],[]],[[[29,[-1]],[9,[8]]],[[18,[4,5]]],[[31,[],[[33,[22]]]]]],[[[32,[-1]],[9,[8]]],[[18,[4,5]]],[[31,[],[[33,[23]]]]]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,28,[]],[-1,28,[]],[[-1,[9,[8]]],4,[2,15]],[[[9,[22]],[9,[8]]],[[4,[25,25]]]],[[[9,[23]],[9,[8]]],[[4,[25,25]]]],[-1,22,[2,15]],[-1,23,[2,15]],[-1,23,[2,15]],[[[9,[8]],[9,[22]]],4],[[[9,[8]],[9,[23]]],4]],"c":[],"p":[[10,"CryptoRngCore",0],[10,"RngCore",0],[5,"OsRng",0],[1,"tuple"],[5,"Error",0],[5,"NonZeroU32",118],[6,"Option",119],[1,"u8"],[1,"slice"],[5,"Formatter",120],[8,"Result",120],[5,"Error",121],[17,"Seed"],[10,"SeedableRng",0],[10,"Sized",122],[10,"Default",123],[10,"AsMut",124],[6,"Result",125],[10,"Error",126],[5,"Box",127],[10,"Into",124],[1,"u32"],[1,"u64"],[1,"i32"],[1,"usize"],[5,"Error",128],[5,"String",129],[5,"TypeId",130],[5,"BlockRng",57],[10,"Clone",131],[10,"BlockRngCore",57],[5,"BlockRng64",57],[17,"Item"],[10,"Debug",120],[17,"Results"],[10,"AsRef",124]],"b":[[22,"impl-Display-for-Error"],[23,"impl-Debug-for-Error"],[26,"impl-From%3CError%3E-for-Error"],[27,"impl-From%3CNonZeroU32%3E-for-Error"]]}],\
["rpc",{"doc":"RPC (Remote Procedure Call)","t":"IIPPFFIIKKFNNNNNNNNNNNNMMNNNNNNNNNNNNNMMNNNNNMMNNNNNNNNNNN","n":["Byte","Bytes","Err","Ok","PingRequest","PingResponse","PingService","Result","RpcRequest","RpcResponse","Service","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","from","from","from","handle_request","into","into","into","new","new","new","send_request","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"rpc"],[58,"core::clone"],[59,"core::net::socket_addr"],[60,"alloc::string"],[61,"core::result"],[62,"core::any"]],"d":["","","Contains the error value","Contains the success value","","","","","Trait for RPC request.","Trait for RPC response.","RPC service.","","","","","","","","","","","","","Deserialize the request from <code>Bytes</code>.","Deserialize the response from <code>Bytes</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new service.","","","Send a request to the service.","Serialize the request into <code>Bytes</code>.","Serialize the response into <code>Bytes</code>.","","","","","","Convert the request into a <code>String</code>.","Convert the response into a <code>String</code>.","","","","","","","","","","",""],"i":[0,0,9,9,0,0,0,0,0,0,0,1,5,6,1,5,6,1,5,6,1,5,6,2,4,5,6,1,5,6,1,1,5,6,1,5,6,1,2,4,5,6,1,5,6,2,4,5,6,1,5,6,1,5,6,1,5,6],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],[[1,[-1,-2]]],[2,3],[4,3]],[5,5],[6,6],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[8,2],[8,4],[8,5],[8,6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[1,[-1,-2]]],[[9,[7]]],2,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[10,-1,-2],[[1,[-1,-2]]],2,4],[11,5],[11,6],[[[1,[-1,-2]],10],[[9,[-2]]],2,4],[2,8],[4,8],[5,8],[6,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,11],[4,11],[5,11],[6,11],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]]],"c":[],"p":[[5,"Service",0],[10,"RpcRequest",0],[10,"Clone",58],[10,"RpcResponse",0],[5,"PingRequest",0],[5,"PingResponse",0],[1,"tuple"],[8,"Bytes",0],[8,"Result",0],[6,"SocketAddr",59],[5,"String",60],[6,"Result",61],[5,"TypeId",62]],"b":[]}],\
["server",{"doc":"The binary target of dracon.","t":"HHHH","n":["handle_ping","main","read_config","send_ping"],"q":[[0,"server"],[4,"tokio::net::tcp::stream"],[5,"core::net::socket_addr"],[6,"std::collections::hash::set"],[7,"std::io::error"],[8,"std::path"],[9,"core::convert"]],"d":["","","Read the configuration file and return a set of sockets.",""],"i":[0,0,0,0],"f":[[[1,2],3],[[],3],[-1,[[5,[[4,[2]]]]],[[7,[6]]]],[2,3]],"c":[],"p":[[5,"TcpStream",4],[6,"SocketAddr",5],[1,"tuple"],[5,"HashSet",6],[8,"Result",7],[5,"Path",8],[10,"AsRef",9]],"b":[]}],\
["socket2",{"doc":"Utilities for creating and using sockets.","t":"PTTTFTTTTPGTFFFTFTFTTTFFFTFFTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Address","DCCP","DCCP","DGRAM","Domain","ICMPV4","ICMPV6","IPV4","IPV6","Index","InterfaceIndexOrAddress","MPTCP","MaybeUninitSlice","MsgHdr","MsgHdrMut","PACKET","Protocol","RAW","RecvFlags","SCTP","SEQPACKET","STREAM","SockAddr","SockRef","Socket","TCP","TcpKeepalive","Type","UDP","UDPLITE","UNIX","VSOCK","accept","accept4","accept_raw","as_abstract_namespace","as_fd","as_pathname","as_ptr","as_raw_fd","as_socket","as_socket_ipv4","as_socket_ipv6","as_storage","as_unix","as_vsock_address","attach_filter","bind","bind_device","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","cloexec","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","connect","connect_timeout","cookie","cork","cpu_affinity","dccp_available_ccids","dccp_cur_mps","dccp_qpolicy_txqlen","dccp_recv_cscov","dccp_send_cscov","dccp_server_timewait","dccp_service","dccp_tx_ccid","dccp_xx_ccid","deref","deref","deref_mut","detach_filter","device","domain","domain","eq","eq","eq","eq","eq","family","flags","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_address","freebind","freebind_ipv6","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw_fd","hash","header_included","into","into","into","into","into","into","into","into","into","into","into","into","into_raw_fd","ip_transparent","is_end_of_record","is_ipv4","is_ipv6","is_listener","is_out_of_band","is_truncated","is_unix","is_unnamed","join_multicast_v4","join_multicast_v4_n","join_multicast_v6","join_ssm_v4","keepalive","keepalive_interval","keepalive_retries","keepalive_time","leave_multicast_v4","leave_multicast_v4_n","leave_multicast_v6","leave_ssm_v4","len","linger","listen","local_addr","mark","mss","multicast_all_v4","multicast_all_v6","multicast_hops_v6","multicast_if_v4","multicast_if_v6","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","new","new","new","new","new","new","new_raw","nodelay","nonblocking","nonblocking","only_v6","original_dst","original_dst_ipv6","out_of_band_inline","pair","pair_raw","peek","peek_from","peek_sender","peer_addr","protocol","quickack","read","read","read_timeout","read_vectored","read_vectored","recv","recv_buffer_size","recv_from","recv_from_vectored","recv_from_vectored_with_flags","recv_from_with_flags","recv_out_of_band","recv_tclass_v6","recv_tos","recv_vectored","recv_vectored_with_flags","recv_with_flags","recvmsg","reuse_address","reuse_port","send","send_buffer_size","send_out_of_band","send_to","send_to_vectored","send_to_vectored_with_flags","send_to_with_flags","send_vectored","send_vectored_with_flags","send_with_flags","sendfile","sendmsg","set_broadcast","set_cloexec","set_cork","set_cpu_affinity","set_dccp_ccid","set_dccp_qpolicy_txqlen","set_dccp_recv_cscov","set_dccp_send_cscov","set_dccp_server_timewait","set_dccp_service","set_freebind","set_freebind_ipv6","set_header_included","set_ip_transparent","set_keepalive","set_length","set_linger","set_mark","set_mss","set_multicast_all_v4","set_multicast_all_v6","set_multicast_hops_v6","set_multicast_if_v4","set_multicast_if_v6","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_nonblocking","set_only_v6","set_out_of_band_inline","set_quickack","set_read_timeout","set_recv_buffer_size","set_recv_tclass_v6","set_recv_tos","set_reuse_address","set_reuse_port","set_send_buffer_size","set_tclass_v6","set_tcp_congestion","set_tcp_keepalive","set_tcp_user_timeout","set_thin_linear_timeouts","set_tos","set_ttl","set_unicast_hops_v6","set_write_timeout","shutdown","take_error","tclass_v6","tcp_congestion","tcp_user_timeout","thin_linear_timeouts","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","tos","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_init","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttl","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicast_hops_v6","unix","vsock","with_addr","with_addr","with_buffers","with_buffers","with_control","with_control","with_flags","with_interval","with_retries","with_time","write","write","write_timeout","write_vectored","write_vectored"],"q":[[0,"socket2"],[382,"std::io::error"],[383,"libc::unix"],[384,"core::option"],[385,"std::os::fd::owned"],[386,"std::path"],[387,"libc::unix::linux_like"],[388,"core::net::socket_addr"],[389,"core::net::socket_addr"],[390,"libc::unix::linux_like::linux"],[391,"core::time"],[392,"core::mem::maybe_uninit"],[393,"alloc::vec"],[394,"libc::unix::linux_like"],[395,"core::fmt"],[396,"std::os::unix::net::stream"],[397,"std::net::tcp"],[398,"std::net::udp"],[399,"std::os::fd::owned"],[400,"std::os::fd::owned"],[401,"core::net::ip_addr"],[402,"core::net::ip_addr"],[403,"std::io"],[404,"std::os::fd::raw"],[405,"std::net"],[406,"std::io::error"],[407,"core::ops::function"],[408,"core::any"],[409,"core::convert"]],"d":["An address assigned to an interface.","Type corresponding to <code>SOCK_DCCP</code>.","Protocol corresponding to <code>DCCP</code>.","Type corresponding to <code>SOCK_DGRAM</code>.","Specification of the communication domain for a socket.","Protocol corresponding to <code>ICMPv4</code>.","Protocol corresponding to <code>ICMPv6</code>.","Domain for IPv4 communication, corresponding to <code>AF_INET</code>.","Domain for IPv6 communication, corresponding to <code>AF_INET6</code>.","An interface index.","A local interface specified by its index or an address …","Protocol corresponding to <code>MPTCP</code>.","A version of <code>IoSliceMut</code> that allows the buffer to be …","Configuration of a <code>sendmsg(2)</code> system call.","Configuration of a <code>recvmsg(2)</code> system call.","Domain for low-level packet interface, corresponding to …","Protocol specification used for creating sockets via …","Type corresponding to <code>SOCK_RAW</code>.","Flags for incoming messages.","Protocol corresponding to <code>SCTP</code>.","Type corresponding to <code>SOCK_SEQPACKET</code>.","Type corresponding to <code>SOCK_STREAM</code>.","The address of a socket.","A reference to a <code>Socket</code> that can be used to configure …","Owned wrapper around a system socket.","Protocol corresponding to <code>TCP</code>.","Configures a socket’s TCP keepalive parameters.","Specification of communication semantics on a socket.","Protocol corresponding to <code>UDP</code>.","Protocol corresponding to <code>UDPLITE</code>.","Domain for Unix socket communication, corresponding to …","Domain for low-level VSOCK interface, corresponding to …","Accept a new incoming connection from this listener.","Accept a new incoming connection from this listener.","Accept a new incoming connection from this listener.","Returns this address as a slice of bytes representing an …","","Returns this address as a <code>Path</code> reference if it is an …","Returns a raw pointer to the address.","","Returns this address as a <code>SocketAddr</code> if it is in the …","Returns this address as a <code>SocketAddrV4</code> if it is in the …","Returns this address as a <code>SocketAddrV6</code> if it is in the …","Retuns the address as the storage.","Returns this address as Unix <code>SocketAddr</code> if it is an <code>AF_UNIX</code>…","Returns this address VSOCK CID/port if it is in the …","Attach Berkeley Packet Filter(BPF) on this socket.","Binds this socket to the specified address.","Sets the value for the <code>SO_BINDTODEVICE</code> option on this …","","","","","","","","","","","","","","","","","","","","","","","","","Get the value of the <code>SO_BROADCAST</code> option for this socket.","Set <code>SOCK_CLOEXEC</code> on the <code>Type</code>.","","","","","","","","","","","","","Initiate a connection on this socket to the specified …","Initiate a connection on this socket to the specified …","Gets the value for the <code>SO_COOKIE</code> option on this socket.","Get the value of the <code>TCP_CORK</code> option on this socket.","Get the value of the <code>SO_INCOMING_CPU</code> option on this socket.","Get the value of the <code>DCCP_SOCKOPT_AVAILABLE_CCIDS</code> option …","Get the value of the <code>DCCP_SOCKOPT_GET_CUR_MPS</code> option on …","Get the value of the <code>DCCP_SOCKOPT_QPOLICY_TXQLEN</code> on this …","Get the value of the <code>DCCP_SOCKOPT_RECV_CSCOV</code> option on …","Get the value of the <code>DCCP_SOCKOPT_SEND_CSCOV</code> option on …","Get the value of the <code>DCCP_SOCKOPT_SERVER_TIMEWAIT</code> option …","Get the value of the <code>DCCP_SOCKOPT_SERVICE</code> option on this …","Get the value of the <code>DCCP_SOCKOPT_TX_CCID</code> option on this …","Get the value of the <code>DCCP_SOCKOPT_RX_CCID</code> option on this …","","","","Detach Berkeley Packet Filter(BPF) from this socket.","Gets the value for the <code>SO_BINDTODEVICE</code> option on this …","Returns the <code>Domain</code> of this socket by checking the <code>SO_DOMAIN</code>…","Returns this address’s <code>Domain</code>.","","","","","","Returns this address’s family.","Returns the flags of the message.","","","","","","","","","","","","","","","Returns the correct domain for <code>address</code>.","Get the value of the <code>IP_FREEBIND</code> option on this socket.","Get the value of the <code>IPV6_FREEBIND</code> option on this socket.","","","","","","","","Returns the argument unchanged.","The caller must ensure <code>S</code> is actually a socket.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Get the value of the <code>IP_HDRINCL</code> option on this socket.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Get the value of the <code>IP_TRANSPARENT</code> option on this socket.","Check if the message terminates a record.","Returns true if this address is in the <code>AF_INET</code> (IPv4) …","Returns true if this address is in the <code>AF_INET6</code> (IPv6) …","Returns <code>true</code> if <code>listen(2)</code> was called on this socket by …","Check if the message contains out-of-band data.","Check if the message contains a truncated datagram.","Returns true if this address is of a unix socket (for …","Returns true if this address is an unnamed address from …","Join a multicast group using <code>IP_ADD_MEMBERSHIP</code> option on …","Join a multicast group using <code>IP_ADD_MEMBERSHIP</code> option on …","Join a multicast group using <code>IPV6_ADD_MEMBERSHIP</code> option on …","Join a multicast SSM channel using <code>IP_ADD_SOURCE_MEMBERSHIP</code>…","Get the value of the <code>SO_KEEPALIVE</code> option on this socket.","Get the value of the <code>TCP_KEEPINTVL</code> option on this socket.","Get the value of the <code>TCP_KEEPCNT</code> option on this socket.","Get the value of the <code>TCP_KEEPIDLE</code> option on this socket.","Leave a multicast group using <code>IP_DROP_MEMBERSHIP</code> option on …","Leave a multicast group using <code>IP_DROP_MEMBERSHIP</code> option on …","Leave a multicast group using <code>IPV6_DROP_MEMBERSHIP</code> option …","Leave a multicast group using <code>IP_DROP_SOURCE_MEMBERSHIP</code> …","Returns the size of this address in bytes.","Get the value of the <code>SO_LINGER</code> option on this socket.","Mark a socket as ready to accept incoming connection …","Returns the socket address of the local half of this …","Gets the value for the <code>SO_MARK</code> option on this socket.","Gets the value of the <code>TCP_MAXSEG</code> option on this socket.","Get the value of the <code>IP_MULTICAST_ALL</code> option for this …","Get the value of the <code>IPV6_MULTICAST_ALL</code> option for this …","Get the value of the <code>IPV6_MULTICAST_HOPS</code> option for this …","Get the value of the <code>IP_MULTICAST_IF</code> option for this …","Get the value of the <code>IPV6_MULTICAST_IF</code> option for this …","Get the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Get the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Get the value of the <code>IP_MULTICAST_TTL</code> option for this …","Creates a new socket and sets common flags.","Creates a new <code>MaybeUninitSlice</code> wrapping a byte slice.","Create a new <code>MsgHdr</code> with all empty/zero fields.","Create a new <code>MsgHdrMut</code> with all empty/zero fields.","Create a <code>SockAddr</code> from the underlying storage and its …","Returns a new, empty set of TCP keepalive parameters.","Creates a new socket ready to be configured.","Get the value of the <code>TCP_NODELAY</code> option on this socket.","Returns true if this socket is set to nonblocking mode, …","Set <code>SOCK_NONBLOCK</code> on the <code>Type</code>.","Get the value of the <code>IPV6_V6ONLY</code> option for this socket.","Get the value for the <code>SO_ORIGINAL_DST</code> option on this …","Get the value for the <code>IP6T_SO_ORIGINAL_DST</code> option on this …","Get value for the <code>SO_OOBINLINE</code> option on this socket.","Creates a pair of sockets which are connected to each …","Creates a pair of sockets which are connected to each …","Receives data on the socket from the remote adress to …","Receives data from the socket, without removing it from …","Retrieve the sender for the data at the head of the …","Returns the socket address of the remote peer of this …","Returns the <code>Protocol</code> of this socket by checking the …","Get the value of the <code>TCP_QUICKACK</code> option on this socket.","","","Get value for the <code>SO_RCVTIMEO</code> option on this socket.","","","Receives data on the socket from the remote address to …","Get value for the <code>SO_RCVBUF</code> option on this socket.","Receives data from the socket. On success, returns the …","Receives data from the socket. Returns the amount of bytes …","Identical to <code>recv_from_vectored</code> but allows for …","Identical to <code>recv_from</code> but allows for specification of …","Receives out-of-band (OOB) data on the socket from the …","Get the value of the <code>IPV6_RECVTCLASS</code> option for this …","Get the value of the <code>IP_RECVTOS</code> option for this socket.","Receives data on the socket from the remote address to …","Identical to <code>recv_vectored</code> but allows for specification of …","Identical to <code>recv</code> but allows for specification of …","Receive a message from a socket using a message structure.","Get the value of the <code>SO_REUSEADDR</code> option on this socket.","Get the value of the <code>SO_REUSEPORT</code> option on this socket.","Sends data on the socket to a connected peer.","Get the value of the <code>SO_SNDBUF</code> option on this socket.","Sends out-of-band (OOB) data on the socket to connected …","Sends data on the socket to the given address. On success, …","Send data to a peer listening on <code>addr</code>. Returns the amount …","Identical to <code>send_to_vectored</code> but allows for specification …","Identical to <code>send_to</code> but allows for specification of …","Send data to the connected peer. Returns the amount of …","Identical to <code>send_vectored</code> but allows for specification of …","Identical to <code>send</code> but allows for specification of …","Copies data between a <code>file</code> and this socket using the …","Send a message on a socket using a message structure.","Set the value of the <code>SO_BROADCAST</code> option for this socket.","Sets <code>CLOEXEC</code> on the socket.","Set the value of the <code>TCP_CORK</code> option on this socket.","Set value for the <code>SO_INCOMING_CPU</code> option on this socket.","Set value for the <code>DCCP_SOCKOPT_CCID</code> option on this socket.","Set value for the <code>DCCP_SOCKOPT_QPOLICY_TXQLEN</code> option on …","Set the value of the <code>DCCP_SOCKOPT_RECV_CSCOV</code> option on …","Set value for the <code>DCCP_SOCKOPT_SEND_CSCOV</code> option on this …","Set value for the <code>DCCP_SOCKOPT_SERVER_TIMEWAIT</code> option on …","Set value for the <code>DCCP_SOCKOPT_SERVICE</code> option on this …","Set value for the <code>IP_FREEBIND</code> option on this socket.","Set value for the <code>IPV6_FREEBIND</code> option on this socket.","Set the value of the <code>IP_HDRINCL</code> option on this socket.","Set the value of the <code>IP_TRANSPARENT</code> option on this socket.","Set value for the <code>SO_KEEPALIVE</code> option on this socket.","Set the length of the address.","Set value for the <code>SO_LINGER</code> option on this socket.","Sets the value for the <code>SO_MARK</code> option on this socket.","Sets the value of the <code>TCP_MAXSEG</code> option on this socket.","Set the value of the <code>IP_MULTICAST_ALL</code> option for this …","Set the value of the <code>IPV6_MULTICAST_ALL</code> option for this …","Set the value of the <code>IPV6_MULTICAST_HOPS</code> option for this …","Set the value of the <code>IP_MULTICAST_IF</code> option for this …","Set the value of the <code>IPV6_MULTICAST_IF</code> option for this …","Set the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Set the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Set the value of the <code>IP_MULTICAST_TTL</code> option for this …","Set the value of the <code>TCP_NODELAY</code> option on this socket.","Moves this socket into or out of nonblocking mode.","Set the value for the <code>IPV6_V6ONLY</code> option on this socket.","Set value for the <code>SO_OOBINLINE</code> option on this socket.","Set the value of the <code>TCP_QUICKACK</code> option on this socket.","Set value for the <code>SO_RCVTIMEO</code> option on this socket.","Set value for the <code>SO_RCVBUF</code> option on this socket.","Set the value of the <code>IPV6_RECVTCLASS</code> option for this …","Set the value of the <code>IP_RECVTOS</code> option for this socket.","Set value for the <code>SO_REUSEADDR</code> option on this socket.","Set value for the <code>SO_REUSEPORT</code> option on this socket.","Set value for the <code>SO_SNDBUF</code> option on this socket.","Set the value of the <code>IPV6_TCLASS</code> option for this socket.","Set the value of the <code>TCP_CONGESTION</code> option for this socket.","Set parameters configuring TCP keepalive probes for this …","Set the value of the <code>TCP_USER_TIMEOUT</code> option on this …","Set the value of the <code>TCP_THIN_LINEAR_TIMEOUTS</code> option on …","Set the value of the <code>IP_TOS</code> option for this socket.","Set the value of the <code>IP_TTL</code> option for this socket.","Set the value for the <code>IPV6_UNICAST_HOPS</code> option on this …","Set value for the <code>SO_SNDTIMEO</code> option on this socket.","Shuts down the read, write, or both halves of this …","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>IPV6_TCLASS</code> option for this socket.","Get the value of the <code>TCP_CONGESTION</code> option for this socket.","Get the value of the <code>TCP_USER_TIMEOUT</code> option on this …","Get the value of the <code>TCP_THIN_LINEAR_TIMEOUTS</code> option on …","","","","","","","Get the value of the <code>IP_TOS</code> option for this socket.","Creates a new independently owned handle to the underlying …","","","","","","","","","","","","","Initialise a <code>SockAddr</code> by calling the function <code>init</code>.","","","","","","","","","","","","","Get the value of the <code>IP_TTL</code> option for this socket.","Returns the <code>Type</code> of this socket by checking the <code>SO_TYPE</code> …","","","","","","","","","","","","","Get the value of the <code>IPV6_UNICAST_HOPS</code> option for this …","Constructs a <code>SockAddr</code> with the family <code>AF_UNIX</code> and the …","Constructs a <code>SockAddr</code> with the family <code>AF_VSOCK</code> and the …","Set the address (name) of the message.","Set the mutable address (name) of the message.","Set the buffer(s) of the message.","Set the mutable buffer(s) of the message.","Set the control buffer of the message.","Set the mutable control buffer of the message.","Set the flags of the message.","Set the value of the <code>TCP_KEEPINTVL</code> option. On Windows, …","Set the value of the <code>TCP_KEEPCNT</code> option.","Set the amount of time after which TCP keepalive probes …","","","Get value for the <code>SO_SNDTIMEO</code> option on this socket.","",""],"i":[37,20,22,20,0,22,22,21,21,37,0,22,0,0,0,21,0,20,0,22,20,20,0,0,0,22,0,0,22,22,21,21,1,1,1,2,1,2,2,1,2,2,2,2,2,2,1,1,1,1,28,29,36,33,2,37,21,20,22,23,24,1,28,29,36,33,2,37,21,20,22,23,24,1,20,2,21,20,22,23,24,2,21,20,22,23,24,1,1,1,1,1,1,1,1,1,1,1,1,1,1,28,29,29,1,1,1,2,2,21,20,22,23,2,33,1,1,1,28,29,36,33,2,37,21,20,22,23,24,21,1,1,1,1,1,1,1,1,1,1,28,28,29,36,33,2,2,2,2,37,21,21,20,20,22,22,23,24,1,2,1,1,28,29,36,33,2,37,21,20,22,23,24,1,1,23,2,2,1,23,23,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,29,36,33,2,24,1,1,1,20,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,21,20,22,23,24,1,1,1,28,29,36,33,2,37,21,20,22,23,24,2,1,28,29,36,33,2,37,21,20,22,23,24,1,1,1,28,29,36,33,2,37,21,20,22,23,24,1,2,2,36,33,36,33,36,33,36,24,24,24,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[[3,[1,2]]]]]],[[1,5],[[4,[[3,[1,2]]]]]],[1,[[4,[[3,[1,2]]]]]],[2,[[8,[[7,[6]]]]]],[1,9],[2,[[8,[10]]]],[2,11],[1,5],[2,[[8,[12]]]],[2,[[8,[13]]]],[2,[[8,[14]]]],[2,15],[2,[[8,[16]]]],[2,[[8,[[3,[17,17]]]]]],[[1,[7,[18]]],[[4,[3]]]],[[1,2],[[4,[3]]]],[[1,[8,[[7,[6]]]]],[[4,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[19]]]],[20,20],[2,2],[21,21],[20,20],[22,22],[23,23],[24,24],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,2],[[4,[3]]]],[[1,2,25],[[4,[3]]]],[1,[[4,[26]]]],[1,[[4,[19]]]],[1,[[4,[27]]]],[1,[[4,[0]]]],[1,[[4,[17]]]],[1,[[4,[17]]]],[1,[[4,[17]]]],[1,[[4,[17]]]],[1,[[4,[19]]]],[1,[[4,[17]]]],[1,[[4,[17]]]],[1,[[4,[17]]]],[28,-1,[]],[29,[[7,[[30,[6]]]]]],[29,[[7,[[30,[6]]]]]],[1,[[4,[3]]]],[1,[[4,[[8,[[31,[6]]]]]]]],[1,[[4,[21]]]],[2,21],[[2,2],19],[[21,21],19],[[20,20],19],[[22,22],19],[[23,23],19],[2,32],[33,23],[1,[[4,[3]]]],[1,[[4,[3]]]],[[1,34],35],[[28,34],35],[[29,34],35],[[36,34],35],[[33,34],35],[[2,34],35],[[37,34],35],[[21,34],35],[[20,34],35],[[22,34],35],[[23,34],35],[[24,34],35],[12,21],[1,[[4,[19]]]],[1,[[4,[19]]]],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[-1,-1,[]],[-1,28,45],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[13,2],[-1,-1,[]],[14,2],[12,2],[-1,-1,[]],[-1,-1,[]],[5,21],[5,20],[-1,-1,[]],[5,22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,1],[[2,-1],3,46],[1,[[4,[19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,5],[1,[[4,[19]]]],[23,19],[2,19],[2,19],[1,[[4,[19]]]],[23,19],[23,19],[2,19],[2,19],[[1,47,47],[[4,[3]]]],[[1,47,37],[[4,[3]]]],[[1,48,17],[[4,[3]]]],[[1,47,47,47],[[4,[3]]]],[1,[[4,[19]]]],[1,[[4,[25]]]],[1,[[4,[17]]]],[1,[[4,[25]]]],[[1,47,47],[[4,[3]]]],[[1,47,37],[[4,[3]]]],[[1,48,17],[[4,[3]]]],[[1,47,47,47],[[4,[3]]]],[2,49],[1,[[4,[[8,[25]]]]]],[[1,5],[[4,[3]]]],[1,[[4,[2]]]],[1,[[4,[17]]]],[1,[[4,[17]]]],[1,[[4,[19]]]],[1,[[4,[19]]]],[1,[[4,[17]]]],[1,[[4,[47]]]],[1,[[4,[17]]]],[1,[[4,[19]]]],[1,[[4,[19]]]],[1,[[4,[17]]]],[[21,20,[8,[22]]],[[4,[1]]]],[[[7,[[30,[6]]]]],29],[[],36],[[],33],[[15,49],2],[[],24],[[21,20,[8,[22]]],[[4,[1]]]],[1,[[4,[19]]]],[1,[[4,[19]]]],[20,20],[1,[[4,[19]]]],[1,[[4,[2]]]],[1,[[4,[2]]]],[1,[[4,[19]]]],[[21,20,[8,[22]]],[[4,[[3,[1,1]]]]]],[[21,20,[8,[22]]],[[4,[[3,[1,1]]]]]],[[1,[7,[[30,[6]]]]],[[4,[27]]]],[[1,[7,[[30,[6]]]]],[[4,[[3,[27,2]]]]]],[1,[[4,[2]]]],[1,[[4,[2]]]],[1,[[4,[[8,[22]]]]]],[1,[[4,[19]]]],[[1,[7,[6]]],[[4,[27]]]],[[1,[7,[6]]],[[4,[27]]]],[1,[[4,[[8,[25]]]]]],[[1,[7,[50]]],[[4,[27]]]],[[1,[7,[50]]],[[4,[27]]]],[[1,[7,[[30,[6]]]]],[[4,[27]]]],[1,[[4,[27]]]],[[1,[7,[[30,[6]]]]],[[4,[[3,[27,2]]]]]],[[1,[7,[29]]],[[4,[[3,[27,23,2]]]]]],[[1,[7,[29]],5],[[4,[[3,[27,23,2]]]]]],[[1,[7,[[30,[6]]]],5],[[4,[[3,[27,2]]]]]],[[1,[7,[[30,[6]]]]],[[4,[27]]]],[1,[[4,[19]]]],[1,[[4,[19]]]],[[1,[7,[29]]],[[4,[[3,[27,23]]]]]],[[1,[7,[29]],5],[[4,[[3,[27,23]]]]]],[[1,[7,[[30,[6]]]],5],[[4,[27]]]],[[1,33,5],[[4,[27]]]],[1,[[4,[19]]]],[1,[[4,[19]]]],[[1,[7,[6]]],[[4,[27]]]],[1,[[4,[27]]]],[[1,[7,[6]]],[[4,[27]]]],[[1,[7,[6]],2],[[4,[27]]]],[[1,[7,[51]],2],[[4,[27]]]],[[1,[7,[51]],2,5],[[4,[27]]]],[[1,[7,[6]],2,5],[[4,[27]]]],[[1,[7,[51]]],[[4,[27]]]],[[1,[7,[51]],5],[[4,[27]]]],[[1,[7,[6]],5],[[4,[27]]]],[[1,-1,27,[8,[52]]],[[4,[27]]],53],[[1,36,5],[[4,[27]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,27],[[4,[3]]]],[[1,6],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[2,49],3],[[1,[8,[25]]],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,47],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,[8,[25]]],[[4,[3]]]],[[1,27],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,27],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,[7,[6]]],[[4,[3]]]],[[1,24],[[4,[3]]]],[[1,[8,[25]]],[[4,[3]]]],[[1,19],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,17],[[4,[3]]]],[[1,[8,[25]]],[[4,[3]]]],[[1,54],[[4,[3]]]],[1,[[4,[[8,[55]]]]]],[1,[[4,[17]]]],[1,[[4,[[31,[6]]]]]],[1,[[4,[[8,[25]]]]]],[1,[[4,[19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[4,[17]]]],[1,[[4,[1]]]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-2,[[4,[[3,[-1,2]]]]],[],[[58,[15,49],[[57,[[4,[-1]]]]]]]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[1,[[4,[17]]]],[1,[[4,[20]]]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[1,[[4,[17]]]],[-1,[[4,[2]]],[[60,[10]]]],[[17,17],2],[[36,2],36],[[33,2],33],[[36,[7,[51]]],36],[[33,[7,[29]]],33],[[36,[7,[6]]],36],[[33,[7,[[30,[6]]]]],33],[[36,5],36],[[24,25],24],[[24,17],24],[[24,25],24],[[1,[7,[6]]],[[4,[27]]]],[[1,[7,[6]]],[[4,[27]]]],[1,[[4,[[8,[25]]]]]],[[1,[7,[51]]],[[4,[27]]]],[[1,[7,[51]]],[[4,[27]]]]],"c":[],"p":[[5,"Socket",0],[5,"SockAddr",0],[1,"tuple"],[8,"Result",382],[8,"c_int",383],[1,"u8"],[1,"slice"],[6,"Option",384],[5,"BorrowedFd",385],[5,"Path",386],[5,"sockaddr",387],[6,"SocketAddr",388],[5,"SocketAddrV4",388],[5,"SocketAddrV6",388],[5,"sockaddr_storage",387],[5,"SocketAddr",389],[1,"u32"],[5,"sock_filter",390],[1,"bool"],[5,"Type",0],[5,"Domain",0],[5,"Protocol",0],[5,"RecvFlags",0],[5,"TcpKeepalive",0],[5,"Duration",391],[1,"u64"],[1,"usize"],[5,"SockRef",0],[5,"MaybeUninitSlice",0],[20,"MaybeUninit",392],[5,"Vec",393],[8,"sa_family_t",387],[5,"MsgHdrMut",0],[5,"Formatter",394],[8,"Result",394],[5,"MsgHdr",0],[6,"InterfaceIndexOrAddress",0],[5,"TcpStream",395],[5,"UnixStream",396],[5,"TcpListener",395],[5,"UnixListener",397],[5,"UdpSocket",398],[5,"OwnedFd",385],[5,"UnixDatagram",399],[10,"AsFd",385],[10,"Hasher",400],[5,"Ipv4Addr",401],[5,"Ipv6Addr",401],[8,"socklen_t",390],[5,"IoSliceMut",402],[5,"IoSlice",402],[5,"NonZeroUsize",403],[10,"AsRawFd",404],[6,"Shutdown",405],[5,"Error",382],[6,"Result",406],[17,"Output"],[10,"FnOnce",407],[5,"TypeId",408],[10,"AsRef",409]],"b":[[115,"impl-Write-for-%26Socket"],[116,"impl-Write-for-Socket"],[132,"impl-From%3CTcpStream%3E-for-Socket"],[133,"impl-From%3CUnixStream%3E-for-Socket"],[134,"impl-From%3CTcpListener%3E-for-Socket"],[135,"impl-From%3CUnixListener%3E-for-Socket"],[136,"impl-From%3CUdpSocket%3E-for-Socket"],[137,"impl-From%3COwnedFd%3E-for-Socket"],[138,"impl-From%3CUnixDatagram%3E-for-Socket"],[145,"impl-From%3CSocketAddrV4%3E-for-SockAddr"],[147,"impl-From%3CSocketAddrV6%3E-for-SockAddr"],[148,"impl-From%3CSocketAddr%3E-for-SockAddr"],[231,"impl-Read-for-%26Socket"],[232,"impl-Read-for-Socket"],[234,"impl-Read-for-%26Socket"],[235,"impl-Read-for-Socket"],[377,"impl-Write-for-Socket"],[378,"impl-Write-for-%26Socket"],[380,"impl-Write-for-Socket"],[381,"impl-Write-for-%26Socket"]]}],\
["syn",{"doc":"github crates-io docs-rs","t":"FPPPPFFPPPFPFPPGFPPFFGPPPPPPPFPPFPPPPPPPPPPPPPPPPPFFPPGFFFPPFPPPPPPFGPFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFPFPGFFGFFFPPPPPGPGFFFFPPGGFPPPPPPFPPPFGFFFFGPFPPPPPPGPFFFFFFFFFFFFFFFFPPFPPPPFPGPPFFFFFFFFPFPPFPPPPPPPPGPPGGFFPPPPPPPPPPPPPPPPPPPPPPPPPPFGFFFFFFFFFFFFFFFFFPPPPPGFFFPPFPPGFPPPPPPPPPPIPGPPPPFPPPPGGFPPPPPPPQPPPFGGFFFFPPPPPPPFGPPPPPPPPPFFFFFFFFFGFFFFFFFPGPPPPPPPPFFFFFGFFPPPPPPPPPFGFGPPPOOOOOOOOOOOOOOONOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOQOOOOOOOQOCOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOONNOOOOOOOOOOOOQQONNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOCOOOOOOOOOONNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOONOOOOOOONNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNOOOOOOOOOOONOOOONOOONOOOOONOOOOOOOOOOOOOOOOONOOOOCOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOQCHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNHNQNNNNNNNQQNHNNNNNNNNOOOOOOOOONNOOOOOOOOOOOOOOOCOOOOOOONOOOONNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOCNOOOOOOOOOOONNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOONOOOOOOOONNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNOFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMTMFNNNNONNHONNNNPFFFPRKFIKKIFNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKMMPFFFFGFFFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKMFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFKFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Abi","Add","AddAssign","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssocConst","AssocConst","AssocType","AssocType","Async","AttrStyle","Attribute","Await","BareFn","BareFnArg","BareVariadic","BinOp","Binary","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Block","Bool","BoundLifetimes","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivAssign","Enum","Enum","Eq","Err","Error","Expr","Expr","ExprArray","ExprAssign","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprConst","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprInfer","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldMutability","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemFn","ImplItemMacro","ImplItemType","ImplRestriction","ImplTrait","Index","Index","Infer","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeParam","List","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","LocalInit","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","MetaList","MetaNameValue","MethodCall","Mod","Mul","MulAssign","Mut","Name","NameValue","Named","Named","Ne","Neg","Never","None","None","None","None","Not","Ok","Or","Or","Outer","Paren","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatConst","PatIdent","PatLit","PatMacro","PatOr","PatParen","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Receiver","Receiver","Reference","Reference","Reference","Rem","RemAssign","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Shl","ShlAssign","Shr","ShrAssign","Signature","Slice","Slice","Static","Static","StaticMutability","Stmt","StmtMacro","Str","Struct","Struct","Struct","Struct","Sub","SubAssign","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemFn","TraitItemMacro","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","comma","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","const_token","const_token","constness","constness","content","continue_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","delimiter","discriminant","diverge","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","elems","else_branch","end","end","enum_token","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","is_none","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","len","len","len","let_token","let_token","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","loop_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","mac","make_where_clause","match_token","member","member","member","meta","meta","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","name","named","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args","parse_args_with","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_mod_style","parse_multi","parse_multi_with_leading_vert","parse_named","parse_nested_meta","parse_nested_meta","parse_outer","parse_quote","parse_quote_spanned","parse_single","parse_str","parse_turbofish","parse_unnamed","parse_with","parse_with_earlier_boundary_rule","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","punctuated","qself","qself","qself","qself","qself","qself","question_token","receiver","receiver","reference","rename","rename","require_ident","require_list","require_name_value","require_path_only","rest","rest","restriction","return_token","right","right","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","start","start","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_token","Cursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","partial_cmp","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","ParseNestedMeta","borrow","borrow_mut","error","from","input","into","parse_nested_meta","parser","path","try_from","try_into","type_id","value","Err","Error","Lookahead1","Nothing","Ok","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_any_delimiter","parse_str","parse_terminated","peek","peek","peek2","peek3","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AnyDelimiter","Speculative","advance_to","parse_any_delimiter","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","pop_punct","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","Spanned","span","Abstract","And","AndAnd","AndEq","As","Async","At","Auto","Await","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Comma","Const","Continue","Crate","Default","Do","Dollar","Dot","DotDot","DotDotDot","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Minus","MinusEq","Mod","Move","Mut","Ne","Not","Or","OrEq","OrOr","Override","Paren","PathSep","Percent","PercentEq","Plus","PlusEq","Pound","Priv","Pub","Question","RArrow","Ref","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Slash","SlashEq","Star","StarEq","Static","Struct","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"syn"],[3636,"syn::buffer"],[3670,"syn::ext"],[3674,"syn::meta"],[3688,"syn::parse"],[3784,"syn::parse::discouraged"],[3788,"syn::punctuated"],[3950,"syn::spanned"],[3952,"syn::token"],[5637,"core::str::traits"],[5638,"core::cmp"],[5639,"core::convert"],[5640,"core::marker"],[5641,"core::fmt"],[5642,"core::fmt"],[5643,"core::fmt"],[5644,"core::convert"],[5645,"core::hash"],[5646,"proc_macro2"],[5647,"proc_macro2"],[5648,"core::ops::function"],[5649,"proc_macro2::extra"],[5650,"alloc::string"],[5651,"core::any"],[5652,"proc_macro2"],[5653,"proc_macro2"],[5654,"core::ops::function"],[5655,"core::default"]],"d":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0..=10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","An equality constraint on an associated constant: the …","An equality constraint on an associated constant: the …","A binding (equality constraint) on an associated type: the …","A binding (equality constraint) on an associated type: the …","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute, like <code>#[repr(transparent)]</code>.","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","The variadic argument of a function pointer like …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const block: <code>const { ... }</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","The <code>==</code> operator (equality)","Contains the error value","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expression, with or without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a += b</code>.","A blocked scope: <code>{ ... }</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A const block: <code>const { ... }</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Unused, but reserved for RFC 3323 restrictions.","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An associated function within the definition of a trait.","An associated function within an impl block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","An associated function within an impl block.","A macro invocation within an impl block.","An associated type within an impl block.","Unused, but reserved for RFC 3323 restrictions.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","The inferred value of a const generic argument, denoted <code>_</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime parameter: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","The expression assigned in a local <code>let</code> binding, including …","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in pattern position.","A macro invocation in statement position.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","The never type: <code>!</code>.","","","","","The <code>!</code> operator for logical inversion","Contains the success value","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized pattern: <code>(A | B)</code>.","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A const block: <code>const { ... }</code>.","A pattern that binds a new variable: …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A pattern that matches any one of a set of cases.","A parenthesized pattern: <code>(A | B)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","The <code>self</code> argument of an associated method.","The <code>self</code> argument of an associated method.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference pattern: <code>&amp;mut var</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A dynamically sized slice type: <code>[T]</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","The mutability of an <code>Item::Static</code> or <code>ForeignItem::Static</code>.","A statement, usually ending in a semicolon.","A macro invocation in statement position.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","An associated function within the definition of a trait.","A macro invocation within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A particular type is returned.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","Tokens in type position not interpreted by Syn.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","","","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(A, B)</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeParam&gt; over the …","","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeParam&gt; over the …","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","Facility for interpreting structured content inside of an …","","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","See <code>Attribute::parse_args</code>.","Parse the arguments to the attribute using the given …","See <code>Attribute::parse_args_with</code>.","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parse a <code>Path</code> containing no path arguments on any of its …","Parse a pattern, possibly involving <code>|</code>, but not a leading <code>|</code>.","Parse a pattern, possibly involving <code>|</code>, possibly including a","Parses a named (braced struct) field.","Parse the arguments to the attribute, expecting it to …","See <code>Attribute::parse_nested_meta</code>.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a pattern that does <em>not</em> involve <code>|</code> at the top level.","Parse a string of Rust code into the chosen syntax tree …","Parse <code>::&lt;…&gt;</code> with mandatory leading <code>::</code>.","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","An alternative to the primary <code>Expr::parse</code> parser (from the …","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the path that identifies the interpretation of …","Returns the path that begins this structured meta item.","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","An error if this path is not a single ident, as defined in …","Error if this is a <code>Meta::Path</code> or <code>Meta::NameValue</code>.","Error if this is a <code>Meta::Path</code> or <code>Meta::List</code>.","Error if this is a <code>Meta::List</code> or <code>Meta::NameValue</code>.","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementseturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","In some positions, types may not contain the <code>+</code> character, …","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Context for parsing a single property in the conventional …","","","Report that the attribute’s content did not conform to …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Used when parsing <code>list(...)</code> syntax <strong>if</strong> the content inside …","Make a parser that is usable with <code>parse_macro_input!</code> in a …","","","","","Used when parsing <code>key = &quot;value&quot;</code> syntax.","Contains the error value","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","Contains the success value","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","The source location of the error.","Returns the <code>Span</code> of the next token in the parse stream, or …","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support manipulating …","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","Returns the delimiter, the span of the delimiter token, …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","<strong>A punctuated sequence of syntax tree nodes of type <code>T</code> </strong>…","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Removes the trailing punctuation from this punctuated …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>become</code>","<code>box</code>","<code>{</code>…<code>}</code>","<code>[</code>…<code>]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>-</code>","<code>-=</code>","<code>mod</code>","<code>move</code>","<code>mut</code>","<code>!=</code>","<code>!</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(</code>…<code>)</code>","<code>::</code>","<code>%</code>","<code>%=</code>","<code>+</code>","<code>+=</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>/</code>","<code>/=</code>","<code>*</code>","<code>*=</code>","<code>static</code>","<code>struct</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,136,136,136,153,0,0,26,169,26,0,154,0,154,26,0,0,26,169,0,0,0,26,136,136,136,136,136,136,0,26,128,0,135,135,26,128,128,26,26,128,70,26,26,73,85,112,117,138,154,0,0,154,26,0,0,0,0,187,137,0,136,136,22,85,136,6,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,26,0,0,0,0,0,0,0,128,85,107,112,117,0,26,0,0,0,0,0,85,136,0,0,0,101,26,101,169,136,70,0,138,26,85,0,0,0,0,0,0,0,169,0,26,26,169,161,12,128,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,26,0,73,78,82,154,0,13,0,26,138,0,0,0,0,0,0,0,0,165,0,26,136,0,26,85,107,112,117,138,165,169,0,26,80,0,0,0,0,26,85,136,136,126,101,13,17,65,136,137,169,80,126,153,163,137,6,136,138,12,26,135,138,169,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,26,101,138,169,0,0,0,0,169,161,0,26,138,0,0,123,26,138,169,136,136,101,26,138,161,0,26,0,136,136,136,136,0,138,169,85,107,0,0,0,128,22,26,85,138,136,136,0,78,85,85,0,0,0,0,0,0,0,169,26,26,26,138,169,138,0,0,73,82,85,107,112,117,138,154,187,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,26,22,85,17,17,65,26,85,0,0,0,0,0,0,0,0,26,78,85,107,112,117,128,138,169,0,0,0,0,26,138,26,90,122,171,54,142,180,10,34,50,155,152,49,35,104,160,1,29,36,122,16,20,21,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,48,49,50,51,52,52,53,53,54,55,56,57,58,59,60,61,62,63,64,67,69,71,74,75,76,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,108,109,110,111,113,114,115,116,118,119,120,121,124,125,139,140,141,142,143,144,145,146,147,148,149,150,166,168,185,186,96,30,134,176,30,39,3,5,3,5,29,32,37,37,59,62,89,119,36,40,47,63,69,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,84,74,75,83,84,97,115,158,173,182,18,24,49,57,87,90,91,96,106,145,164,0,11,27,43,55,144,170,181,0,33,0,139,29,36,140,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,10,102,155,20,67,68,74,75,76,83,84,86,94,96,109,113,115,118,124,148,150,158,69,125,186,42,63,72,72,37,37,76,86,113,118,179,36,122,93,38,88,0,0,21,72,77,153,75,76,113,114,115,91,118,119,120,14,134,16,167,57,143,30,39,50,125,186,182,170,172,177,179,180,181,27,60,144,146,147,183,42,53,53,24,87,8,8,10,65,66,15,28,45,75,76,86,94,97,98,118,120,156,157,167,33,35,40,41,43,45,49,51,54,55,56,58,61,64,67,86,94,118,167,0,88,184,69,16,23,25,57,95,99,145,8,8,8,10,65,66,3,5,122,171,40,77,8,8,8,8,8,8,8,9,1,2,10,11,12,13,13,13,13,14,15,16,17,17,17,18,19,20,21,21,21,21,22,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,65,65,66,66,67,68,69,70,71,72,73,73,73,73,74,75,75,76,77,78,78,78,79,80,81,82,82,82,83,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,101,101,101,101,101,102,103,104,105,106,107,107,107,107,107,108,109,110,111,112,112,112,112,112,113,114,115,116,117,117,117,117,117,118,119,120,121,122,123,123,123,124,125,126,127,128,128,128,128,128,128,128,128,129,130,131,132,3,3,5,5,133,134,135,136,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,140,141,142,143,144,145,146,147,148,149,150,151,151,152,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,34,21,86,87,91,95,96,97,98,99,110,113,115,118,120,122,156,157,158,151,41,172,72,77,155,160,69,8,10,65,66,10,16,20,21,75,76,86,87,88,92,93,94,95,96,97,98,99,102,103,104,109,110,113,115,118,120,122,139,152,156,157,158,42,91,173,40,162,43,66,166,36,122,159,171,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,17,17,17,17,153,151,153,71,90,91,96,106,17,17,32,33,38,40,47,63,100,151,140,28,31,17,55,170,45,166,124,74,83,180,72,36,77,79,84,171,72,53,53,46,46,47,72,77,155,160,48,48,92,111,116,121,168,175,72,49,39,67,150,0,11,50,93,79,36,20,54,94,109,124,139,142,179,180,68,184,185,186,18,8,10,74,128,129,130,131,132,3,5,133,8,31,61,36,36,36,122,159,171,72,19,34,50,51,60,79,122,141,146,147,159,162,171,177,183,0,0,0,8,10,13,14,15,16,18,19,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,128,129,129,130,131,132,3,5,133,134,136,137,148,151,152,154,155,159,161,164,165,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,187,0,8,11,14,11,14,134,134,0,11,0,151,138,138,20,11,14,11,0,0,138,0,155,20,129,26,164,26,8,10,40,45,69,125,141,142,148,150,166,11,13,14,15,52,52,57,79,134,145,147,162,178,160,11,81,162,0,52,52,57,145,147,178,58,122,50,124,88,104,151,13,13,13,57,145,96,56,28,31,151,124,91,93,23,55,86,88,92,94,95,97,98,100,108,109,110,111,113,114,115,116,118,120,121,166,168,170,8,10,128,129,130,131,132,3,5,133,71,89,108,114,119,8,8,8,9,1,2,10,10,11,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,128,129,129,130,130,131,131,132,132,3,3,5,5,133,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,66,133,0,72,105,179,53,53,94,109,164,23,95,11,139,128,129,130,131,132,3,5,96,42,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,10,3,5,8,9,1,2,10,11,13,14,15,16,17,18,19,20,21,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,132,3,5,133,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,164,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,0,129,130,131,132,3,5,133,14,134,91,96,97,100,102,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,59,50,20,35,76,86,94,98,109,113,118,120,124,148,156,160,185,8,9,1,2,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,3,5,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,72,72,98,110,115,120,44,149,174,25,99,19,8,62,90,91,93,96,122,171,100,129,130,131,132,133,15,133,157,122,171,24,87,20,21,86,87,88,89,93,94,95,96,97,98,99,100,108,109,110,118,119,120,72,81,63,169,173,182,187,64,0,0,226,226,227,226,227,227,227,227,227,227,226,227,227,227,226,227,227,227,226,226,227,227,227,227,227,227,226,227,226,227,226,227,0,231,231,231,0,220,220,220,220,220,220,220,0,220,220,220,220,220,6,0,0,0,6,218,0,0,0,0,0,0,0,234,232,236,234,235,241,232,236,234,235,241,234,232,235,232,235,232,234,235,0,234,236,234,235,232,232,232,234,234,234,232,232,236,234,235,241,232,236,234,235,241,232,232,232,234,234,232,232,215,234,218,241,218,234,218,234,236,234,234,234,232,234,234,232,232,235,232,234,232,236,234,235,241,232,236,234,235,241,232,236,234,235,241,0,0,245,246,251,0,0,0,0,0,0,0,0,251,242,248,253,249,250,208,209,251,242,248,253,249,250,208,209,251,242,242,248,249,250,208,251,242,242,248,249,250,208,251,251,242,242,242,242,242,242,242,248,253,249,250,208,209,251,242,242,242,242,242,242,248,253,249,250,208,209,251,242,242,242,248,253,249,250,208,209,242,251,251,242,242,242,242,242,242,248,253,249,250,208,209,242,251,248,253,249,250,208,209,248,253,249,250,208,209,242,242,242,242,242,242,242,242,251,251,242,242,242,248,253,249,250,208,209,242,251,242,248,249,250,208,251,242,251,242,242,248,253,249,250,208,209,251,242,248,253,249,250,208,209,251,242,248,253,249,250,208,209,251,251,251,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,199,304,307,308,310,311,312,313,317,321,324,325,328,329,333,335,337,338,340,345,347,349,199,304,307,308,310,311,312,313,317,321,324,325,328,329,333,335,337,338,340,345,347,349,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,256,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,350,351,352,199,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,256,350,351,352,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,256,199,257,258,259,260,261,262,263,264,265,266,202,267,268,269,270,271,198,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,197,201,290,291,200,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352],"fc":[],"p":[[5,"TypeGenerics",0],[5,"Turbofish",0],[5,"LitInt",0],[1,"str"],[5,"LitFloat",0],[8,"Result",3688],[10,"FromStr",5637],[5,"Ident",0],[5,"ImplGenerics",0],[5,"Lifetime",0],[5,"Attribute",0],[6,"AttrStyle",0],[6,"Meta",0],[5,"MetaList",0],[5,"MetaNameValue",0],[5,"Variant",0],[6,"Fields",0],[5,"FieldsNamed",0],[5,"FieldsUnnamed",0],[5,"Field",0],[5,"DeriveInput",0],[6,"Data",0],[5,"DataStruct",0],[5,"DataEnum",0],[5,"DataUnion",0],[6,"Expr",0],[5,"ExprArray",0],[5,"ExprAssign",0],[5,"ExprAsync",0],[5,"ExprAwait",0],[5,"ExprBinary",0],[5,"ExprBlock",0],[5,"ExprBreak",0],[5,"ExprCall",0],[5,"ExprCast",0],[5,"ExprClosure",0],[5,"ExprConst",0],[5,"ExprContinue",0],[5,"ExprField",0],[5,"ExprForLoop",0],[5,"ExprGroup",0],[5,"ExprIf",0],[5,"ExprIndex",0],[5,"ExprInfer",0],[5,"ExprLet",0],[5,"ExprLit",0],[5,"ExprLoop",0],[5,"ExprMacro",0],[5,"ExprMatch",0],[5,"ExprMethodCall",0],[5,"ExprParen",0],[5,"ExprPath",0],[5,"ExprRange",0],[5,"ExprReference",0],[5,"ExprRepeat",0],[5,"ExprReturn",0],[5,"ExprStruct",0],[5,"ExprTry",0],[5,"ExprTryBlock",0],[5,"ExprTuple",0],[5,"ExprUnary",0],[5,"ExprUnsafe",0],[5,"ExprWhile",0],[5,"ExprYield",0],[6,"Member",0],[5,"Index",0],[5,"FieldValue",0],[5,"Label",0],[5,"Arm",0],[6,"RangeLimits",0],[5,"File",0],[5,"Generics",0],[6,"GenericParam",0],[5,"LifetimeParam",0],[5,"TypeParam",0],[5,"ConstParam",0],[5,"BoundLifetimes",0],[6,"TypeParamBound",0],[5,"TraitBound",0],[6,"TraitBoundModifier",0],[5,"WhereClause",0],[6,"WherePredicate",0],[5,"PredicateLifetime",0],[5,"PredicateType",0],[6,"Item",0],[5,"ItemConst",0],[5,"ItemEnum",0],[5,"ItemExternCrate",0],[5,"ItemFn",0],[5,"ItemForeignMod",0],[5,"ItemImpl",0],[5,"ItemMacro",0],[5,"ItemMod",0],[5,"ItemStatic",0],[5,"ItemStruct",0],[5,"ItemTrait",0],[5,"ItemTraitAlias",0],[5,"ItemType",0],[5,"ItemUnion",0],[5,"ItemUse",0],[6,"UseTree",0],[5,"UsePath",0],[5,"UseName",0],[5,"UseRename",0],[5,"UseGlob",0],[5,"UseGroup",0],[6,"ForeignItem",0],[5,"ForeignItemFn",0],[5,"ForeignItemStatic",0],[5,"ForeignItemType",0],[5,"ForeignItemMacro",0],[6,"TraitItem",0],[5,"TraitItemConst",0],[5,"TraitItemFn",0],[5,"TraitItemType",0],[5,"TraitItemMacro",0],[6,"ImplItem",0],[5,"ImplItemConst",0],[5,"ImplItemFn",0],[5,"ImplItemType",0],[5,"ImplItemMacro",0],[5,"Signature",0],[6,"FnArg",0],[5,"Receiver",0],[5,"Variadic",0],[6,"StaticMutability",0],[6,"ImplRestriction",0],[6,"Lit",0],[5,"LitStr",0],[5,"LitByteStr",0],[5,"LitByte",0],[5,"LitChar",0],[5,"LitBool",0],[5,"Macro",0],[6,"MacroDelimiter",0],[6,"BinOp",0],[6,"UnOp",0],[6,"Pat",0],[5,"PatIdent",0],[5,"PatOr",0],[5,"PatParen",0],[5,"PatReference",0],[5,"PatRest",0],[5,"PatSlice",0],[5,"PatStruct",0],[5,"PatTuple",0],[5,"PatTupleStruct",0],[5,"PatType",0],[5,"PatWild",0],[5,"FieldPat",0],[5,"Path",0],[5,"PathSegment",0],[6,"PathArguments",0],[6,"GenericArgument",0],[5,"AngleBracketedGenericArguments",0],[5,"AssocType",0],[5,"AssocConst",0],[5,"Constraint",0],[5,"ParenthesizedGenericArguments",0],[5,"QSelf",0],[6,"Visibility",0],[5,"VisRestricted",0],[6,"FieldMutability",0],[5,"Block",0],[6,"Stmt",0],[5,"Local",0],[5,"LocalInit",0],[5,"StmtMacro",0],[6,"Type",0],[5,"TypeArray",0],[5,"TypeBareFn",0],[5,"TypeGroup",0],[5,"TypeImplTrait",0],[5,"TypeInfer",0],[5,"TypeMacro",0],[5,"TypeNever",0],[5,"TypeParen",0],[5,"TypePath",0],[5,"TypePtr",0],[5,"TypeReference",0],[5,"TypeSlice",0],[5,"TypeTraitObject",0],[5,"TypeTuple",0],[5,"Abi",0],[5,"BareFnArg",0],[5,"BareVariadic",0],[6,"ReturnType",0],[1,"tuple"],[6,"Ordering",5638],[1,"bool"],[10,"AsRef",5639],[10,"Sized",5640],[5,"Formatter",5641],[5,"Error",5641],[6,"Result",5642],[8,"Result",5641],[5,"SelfType",3952],[5,"Extern",3952],[5,"Underscore",3952],[5,"Super",3952],[5,"SelfValue",3952],[5,"Crate",3952],[1,"usize"],[5,"Literal",5643],[10,"Into",5639],[6,"Option",5644],[10,"Hasher",5645],[5,"Iter",3788],[5,"IterMut",3788],[5,"Span",5643],[1,"u8"],[1,"slice"],[1,"char"],[5,"TokenStream",5646],[10,"Parse",3688],[8,"ParseStream",3688],[5,"TokenStream",5643],[10,"Parser",3688],[5,"Vec",5647],[5,"ParseNestedMeta",3674],[17,"Output"],[10,"FnMut",5648],[5,"DelimSpan",5649],[5,"String",5650],[5,"TypeId",5651],[5,"TokenBuffer",3636],[5,"Cursor",3636],[6,"Delimiter",5643],[5,"Punct",5643],[6,"TokenTree",5643],[10,"IdentExt",3670],[5,"Error",3688],[10,"Display",5641],[5,"ParseBuffer",3688],[5,"StepCursor",3688],[5,"Lookahead1",3688],[17,"Item"],[10,"IntoIterator",5652],[5,"LexError",5643],[10,"ToTokens",5653],[5,"Nothing",3688],[5,"Punctuated",3788],[10,"Peek",3688],[10,"FnOnce",5648],[10,"Speculative",3784],[10,"AnyDelimiter",3784],[10,"Clone",5654],[5,"Pairs",3788],[5,"IntoPairs",3788],[5,"IntoIter",3788],[6,"Pair",3788],[10,"Default",5655],[5,"PairsMut",3788],[10,"Token",3952],[10,"Spanned",3950],[5,"Group",3952],[5,"Abstract",3952],[5,"As",3952],[5,"Async",3952],[5,"Auto",3952],[5,"Await",3952],[5,"Become",3952],[5,"Box",3952],[5,"Break",3952],[5,"Const",3952],[5,"Continue",3952],[5,"Default",3952],[5,"Do",3952],[5,"Dyn",3952],[5,"Else",3952],[5,"Enum",3952],[5,"Final",3952],[5,"Fn",3952],[5,"For",3952],[5,"If",3952],[5,"Impl",3952],[5,"In",3952],[5,"Let",3952],[5,"Loop",3952],[5,"Macro",3952],[5,"Match",3952],[5,"Mod",3952],[5,"Move",3952],[5,"Mut",3952],[5,"Override",3952],[5,"Priv",3952],[5,"Pub",3952],[5,"Ref",3952],[5,"Return",3952],[5,"Static",3952],[5,"Struct",3952],[5,"Trait",3952],[5,"Try",3952],[5,"Type",3952],[5,"Typeof",3952],[5,"Union",3952],[5,"Unsafe",3952],[5,"Unsized",3952],[5,"Use",3952],[5,"Virtual",3952],[5,"Where",3952],[5,"While",3952],[5,"Yield",3952],[5,"And",3952],[5,"AndAnd",3952],[5,"AndEq",3952],[5,"At",3952],[5,"Caret",3952],[5,"CaretEq",3952],[5,"Colon",3952],[5,"Comma",3952],[5,"Dollar",3952],[5,"Dot",3952],[5,"DotDot",3952],[5,"DotDotDot",3952],[5,"DotDotEq",3952],[5,"Eq",3952],[5,"EqEq",3952],[5,"FatArrow",3952],[5,"Ge",3952],[5,"Gt",3952],[5,"LArrow",3952],[5,"Le",3952],[5,"Lt",3952],[5,"Minus",3952],[5,"MinusEq",3952],[5,"Ne",3952],[5,"Not",3952],[5,"Or",3952],[5,"OrEq",3952],[5,"OrOr",3952],[5,"PathSep",3952],[5,"Percent",3952],[5,"PercentEq",3952],[5,"Plus",3952],[5,"PlusEq",3952],[5,"Pound",3952],[5,"Question",3952],[5,"RArrow",3952],[5,"Semi",3952],[5,"Shl",3952],[5,"ShlEq",3952],[5,"Shr",3952],[5,"ShrEq",3952],[5,"Slash",3952],[5,"SlashEq",3952],[5,"Star",3952],[5,"StarEq",3952],[5,"Tilde",3952],[5,"Brace",3952],[5,"Bracket",3952],[5,"Paren",3952]],"b":[[1388,"impl-PartialEq%3CT%3E-for-Ident"],[1389,"impl-PartialEq-for-Ident"],[1437,"impl-IdentFragment-for-Ident"],[1438,"impl-Display-for-Ident"],[1439,"impl-Debug-for-Ident"],[1449,"impl-From%3CSelfType%3E-for-Ident"],[1450,"impl-From%3CExtern%3E-for-Ident"],[1451,"impl-From%3CUnderscore%3E-for-Ident"],[1452,"impl-From%3CSuper%3E-for-Ident"],[1453,"impl-From%3CSelfValue%3E-for-Ident"],[1454,"impl-From%3CCrate%3E-for-Ident"],[1462,"impl-From%3CMetaNameValue%3E-for-Meta"],[1463,"impl-From%3CPath%3E-for-Meta"],[1464,"impl-From%3CMetaList%3E-for-Meta"],[1469,"impl-From%3CFieldsNamed%3E-for-Fields"],[1471,"impl-From%3CFieldsUnnamed%3E-for-Fields"],[1475,"impl-From%3CItemStruct%3E-for-DeriveInput"],[1476,"impl-From%3CItemEnum%3E-for-DeriveInput"],[1478,"impl-From%3CItemUnion%3E-for-DeriveInput"],[1483,"impl-From%3CExprGroup%3E-for-Expr"],[1484,"impl-From%3CExprBinary%3E-for-Expr"],[1485,"impl-From%3CExprField%3E-for-Expr"],[1486,"impl-From%3CExprReference%3E-for-Expr"],[1487,"impl-From%3CExprWhile%3E-for-Expr"],[1488,"impl-From%3CExprParen%3E-for-Expr"],[1489,"impl-From%3CExprLoop%3E-for-Expr"],[1490,"impl-From%3CExprReturn%3E-for-Expr"],[1491,"impl-From%3CExprRepeat%3E-for-Expr"],[1492,"impl-From%3CExprIf%3E-for-Expr"],[1493,"impl-From%3CExprLit%3E-for-Expr"],[1494,"impl-From%3CExprAsync%3E-for-Expr"],[1495,"impl-From%3CExprTuple%3E-for-Expr"],[1496,"impl-From%3CExprCall%3E-for-Expr"],[1497,"impl-From%3CExprAssign%3E-for-Expr"],[1498,"impl-From%3CExprConst%3E-for-Expr"],[1499,"impl-From%3CExprInfer%3E-for-Expr"],[1500,"impl-From%3CExprRange%3E-for-Expr"],[1501,"impl-From%3CExprTry%3E-for-Expr"],[1502,"impl-From%3CExprContinue%3E-for-Expr"],[1503,"impl-From%3CExprBlock%3E-for-Expr"],[1504,"impl-From%3CExprYield%3E-for-Expr"],[1505,"impl-From%3CExprLet%3E-for-Expr"],[1506,"impl-From%3CExprIndex%3E-for-Expr"],[1507,"impl-From%3CExprStruct%3E-for-Expr"],[1508,"impl-From%3CExprArray%3E-for-Expr"],[1509,"impl-From%3CExprTryBlock%3E-for-Expr"],[1510,"impl-From%3CExprPath%3E-for-Expr"],[1511,"impl-From%3CExprCast%3E-for-Expr"],[1512,"impl-From%3CExprClosure%3E-for-Expr"],[1513,"impl-From%3CExprBreak%3E-for-Expr"],[1514,"impl-From%3CExprMethodCall%3E-for-Expr"],[1515,"impl-From%3CExprAwait%3E-for-Expr"],[1516,"impl-From%3CExprUnary%3E-for-Expr"],[1517,"impl-From%3CExprForLoop%3E-for-Expr"],[1518,"impl-From%3CExprMacro%3E-for-Expr"],[1519,"impl-From%3CExprUnsafe%3E-for-Expr"],[1520,"impl-From%3CExprMatch%3E-for-Expr"],[1560,"impl-From%3Cusize%3E-for-Member"],[1561,"impl-From%3CIdent%3E-for-Member"],[1563,"impl-From%3CIndex%3E-for-Member"],[1573,"impl-From%3CLifetimeParam%3E-for-GenericParam"],[1574,"impl-From%3CConstParam%3E-for-GenericParam"],[1575,"impl-From%3CTypeParam%3E-for-GenericParam"],[1581,"impl-From%3CLifetime%3E-for-TypeParamBound"],[1582,"impl-From%3CTraitBound%3E-for-TypeParamBound"],[1587,"impl-From%3CPredicateLifetime%3E-for-WherePredicate"],[1589,"impl-From%3CPredicateType%3E-for-WherePredicate"],[1592,"impl-From%3CItemExternCrate%3E-for-Item"],[1593,"impl-From%3CItemTraitAlias%3E-for-Item"],[1594,"impl-From%3CItemConst%3E-for-Item"],[1596,"impl-From%3CItemStruct%3E-for-Item"],[1597,"impl-From%3CItemFn%3E-for-Item"],[1598,"impl-From%3CItemMod%3E-for-Item"],[1599,"impl-From%3CItemUse%3E-for-Item"],[1600,"impl-From%3CItemEnum%3E-for-Item"],[1601,"impl-From%3CDeriveInput%3E-for-Item"],[1602,"impl-From%3CItemType%3E-for-Item"],[1603,"impl-From%3CItemStatic%3E-for-Item"],[1604,"impl-From%3CItemForeignMod%3E-for-Item"],[1605,"impl-From%3CItemUnion%3E-for-Item"],[1606,"impl-From%3CItemMacro%3E-for-Item"],[1607,"impl-From%3CItemTrait%3E-for-Item"],[1608,"impl-From%3CItemImpl%3E-for-Item"],[1624,"impl-From%3CUseGlob%3E-for-UseTree"],[1625,"impl-From%3CUsePath%3E-for-UseTree"],[1627,"impl-From%3CUseRename%3E-for-UseTree"],[1628,"impl-From%3CUseName%3E-for-UseTree"],[1629,"impl-From%3CUseGroup%3E-for-UseTree"],[1635,"impl-From%3CForeignItemMacro%3E-for-ForeignItem"],[1636,"impl-From%3CForeignItemStatic%3E-for-ForeignItem"],[1637,"impl-From%3CForeignItemFn%3E-for-ForeignItem"],[1639,"impl-From%3CForeignItemType%3E-for-ForeignItem"],[1644,"impl-From%3CTraitItemMacro%3E-for-TraitItem"],[1646,"impl-From%3CTraitItemConst%3E-for-TraitItem"],[1647,"impl-From%3CTraitItemFn%3E-for-TraitItem"],[1648,"impl-From%3CTraitItemType%3E-for-TraitItem"],[1653,"impl-From%3CImplItemConst%3E-for-ImplItem"],[1655,"impl-From%3CImplItemMacro%3E-for-ImplItem"],[1656,"impl-From%3CImplItemFn%3E-for-ImplItem"],[1657,"impl-From%3CImplItemType%3E-for-ImplItem"],[1663,"impl-From%3CPatType%3E-for-FnArg"],[1664,"impl-From%3CReceiver%3E-for-FnArg"],[1670,"impl-From%3CLitInt%3E-for-Lit"],[1671,"impl-From%3CLitStr%3E-for-Lit"],[1673,"impl-From%3CLitBool%3E-for-Lit"],[1674,"impl-From%3CLitByte%3E-for-Lit"],[1675,"impl-From%3CLitChar%3E-for-Lit"],[1676,"impl-From%3CLitFloat%3E-for-Lit"],[1677,"impl-From%3CLitByteStr%3E-for-Lit"],[1691,"impl-From%3CPatRest%3E-for-Pat"],[1692,"impl-From%3CExprLit%3E-for-Pat"],[1693,"impl-From%3CPatOr%3E-for-Pat"],[1694,"impl-From%3CPatReference%3E-for-Pat"],[1695,"impl-From%3CPatParen%3E-for-Pat"],[1696,"impl-From%3CExprRange%3E-for-Pat"],[1697,"impl-From%3CPatIdent%3E-for-Pat"],[1698,"impl-From%3CPatStruct%3E-for-Pat"],[1699,"impl-From%3CPatTuple%3E-for-Pat"],[1700,"impl-From%3CPatTupleStruct%3E-for-Pat"],[1702,"impl-From%3CPatType%3E-for-Pat"],[1703,"impl-From%3CExprConst%3E-for-Pat"],[1704,"impl-From%3CPatSlice%3E-for-Pat"],[1705,"impl-From%3CExprMacro%3E-for-Pat"],[1706,"impl-From%3CPatWild%3E-for-Pat"],[1707,"impl-From%3CExprPath%3E-for-Pat"],[1740,"impl-From%3CTypeGroup%3E-for-Type"],[1741,"impl-From%3CTypeReference%3E-for-Type"],[1742,"impl-From%3CTypeMacro%3E-for-Type"],[1743,"impl-From%3CTypeImplTrait%3E-for-Type"],[1744,"impl-From%3CTypeNever%3E-for-Type"],[1746,"impl-From%3CTypeInfer%3E-for-Type"],[1747,"impl-From%3CTypePtr%3E-for-Type"],[1748,"impl-From%3CTypeArray%3E-for-Type"],[1749,"impl-From%3CTypeTuple%3E-for-Type"],[1750,"impl-From%3CTypeSlice%3E-for-Type"],[1751,"impl-From%3CTypeBareFn%3E-for-Type"],[1752,"impl-From%3CTypeParen%3E-for-Type"],[1753,"impl-From%3CTypeTraitObject%3E-for-Type"],[1754,"impl-From%3CTypePath%3E-for-Type"],[2032,"impl-IntoIterator-for-Fields"],[2033,"impl-IntoIterator-for-%26mut+Fields"],[2034,"impl-IntoIterator-for-%26Fields"],[2256,"impl-Parse-for-LitStr"],[2257,"impl-LitStr"],[2416,"impl-IdentFragment-for-Ident"],[2418,"impl-Ident"],[3726,"impl-Display-for-Error"],[3727,"impl-Debug-for-Error"],[3728,"impl-Display-for-ParseBuffer%3C\'a%3E"],[3729,"impl-Debug-for-ParseBuffer%3C\'a%3E"],[3743,"impl-IntoIterator-for-%26Error"],[3744,"impl-IntoIterator-for-Error"],[3831,"impl-Extend%3CT%3E-for-Punctuated%3CT,+P%3E"],[3832,"impl-Extend%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[3843,"impl-FromIterator%3CT%3E-for-Punctuated%3CT,+P%3E"],[3844,"impl-FromIterator%3CPair%3CT,+P%3E%3E-for-Punctuated%3CT,+P%3E"],[3856,"impl-IntoIterator-for-Punctuated%3CT,+P%3E"],[3857,"impl-IntoIterator-for-%26mut+Punctuated%3CT,+P%3E"],[3858,"impl-IntoIterator-for-%26Punctuated%3CT,+P%3E"]]}],\
["tokio",{"doc":"A runtime for writing reliable network applications …","t":"CQXCQCQECCQXCQTKKKKKKKKFFFFTTTFEEFFFTTTTTFFFFEEFFFTTTFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNHHHNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNMNNNMNNNNNMNNNNNNNNNNMNNNNNNNNNMNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNHHNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFKFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNINNNNNNNNNNNNNNNNNNNNICNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNINNFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNFPFFPFGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNHNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNHFNNNNNNNNNNNPPEFFGPFFNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNHHNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["io","join","main","net","pin","runtime","select","spawn","stream","task","task_local","test","time","try_join","ALL","AsyncBufRead","AsyncBufReadExt","AsyncRead","AsyncReadExt","AsyncSeek","AsyncSeekExt","AsyncWrite","AsyncWriteExt","BufReader","BufStream","BufWriter","DuplexStream","EMPTY","ERROR","ERROR","Empty","Error","ErrorKind","Interest","Join","Lines","PRIORITY","PRIORITY","READABLE","READABLE","READ_CLOSED","ReadBuf","ReadHalf","Ready","Repeat","Result","SeekFrom","Sink","Split","Take","WRITABLE","WRITABLE","WRITE_CLOSED","WriteHalf","add","advance","advance_mut","assume_init","bitand","bitor","bitor","bitor_assign","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","capacity","chain","chain","chunk_mut","clear","clone","clone","clone_into","clone_into","cmp","consume","consume","consume","consume","consume","consume","consume","consume","copy","copy_bidirectional","copy_buf","drop","duplex","empty","eq","eq","fill_buf","fill_buf","filled","filled_mut","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_pin_mut","get_ref","get_ref","get_ref","get_ref","get_ref","initialize_unfilled","initialize_unfilled_to","initialized","initialized_mut","inner_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","is_empty","is_error","is_error","is_pair_of","is_pair_of","is_priority","is_priority","is_read_closed","is_readable","is_readable","is_writable","is_writable","is_write_closed","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","join","limit","lines","lines","new","new","new","new","next_line","next_segment","partial_cmp","poll_complete","poll_complete","poll_complete","poll_complete","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_fill_buf","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_flush","poll_next_line","poll_next_segment","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_read","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_shutdown","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","poll_write_vectored","put_slice","read","read","read_buf","read_buf","read_exact","read_exact","read_f32","read_f32","read_f32_le","read_f32_le","read_f64","read_f64","read_f64_le","read_f64_le","read_i128","read_i128","read_i128_le","read_i128_le","read_i16","read_i16","read_i16_le","read_i16_le","read_i32","read_i32","read_i32_le","read_i32_le","read_i64","read_i64","read_i64_le","read_i64_le","read_i8","read_i8","read_line","read_line","read_to_end","read_to_end","read_to_string","read_to_string","read_u128","read_u128","read_u128_le","read_u128_le","read_u16","read_u16","read_u16_le","read_u16_le","read_u32","read_u32","read_u32_le","read_u32_le","read_u64","read_u64","read_u64_le","read_u64_le","read_u8","read_u8","read_until","read_until","reader","reader_mut","reader_pin_mut","remaining","remaining_mut","remove","repeat","rewind","rewind","seek","seek","set_filled","set_limit","shutdown","shutdown","sink","split","split","split","start_seek","start_seek","start_seek","start_seek","stream_position","stream_position","sub","take","take","take","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfilled_mut","uninit","unix","unsplit","with_capacity","with_capacity","with_capacity","write","write","write_all","write_all","write_all_buf","write_all_buf","write_buf","write_buf","write_f32","write_f32","write_f32_le","write_f32_le","write_f64","write_f64","write_f64_le","write_f64_le","write_i128","write_i128","write_i128_le","write_i128_le","write_i16","write_i16","write_i16_le","write_i16_le","write_i32","write_i32","write_i32_le","write_i32_le","write_i64","write_i64","write_i64_le","write_i64_le","write_i8","write_i8","write_u128","write_u128","write_u128_le","write_u128_le","write_u16","write_u16","write_u16_le","write_u16_le","write_u32","write_u32","write_u32_le","write_u32_le","write_u64","write_u64","write_u64_le","write_u64_le","write_u8","write_u8","write_vectored","write_vectored","writer","writer_mut","writer_pin_mut","AsyncFd","AsyncFdReadyGuard","AsyncFdReadyMutGuard","TryIoError","as_fd","as_raw_fd","async_io","async_io_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_ready","clear_ready","clear_ready_matching","clear_ready_matching","drop","fmt","fmt","fmt","fmt","from","from","from","from","get_inner","get_inner","get_inner_mut","get_mut","get_mut","get_ref","get_ref","get_ref","into","into","into","into","into_inner","new","poll_read_ready","poll_read_ready_mut","poll_write_ready","poll_write_ready_mut","readable","readable_mut","ready","ready","ready","ready_mut","retain_ready","retain_ready","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_io","try_io","type_id","type_id","type_id","type_id","with_interest","writable","writable_mut","TcpListener","TcpSocket","TcpStream","ToSocketAddrs","UdpSocket","UnixDatagram","UnixListener","UnixSocket","UnixStream","accept","accept","as_fd","as_fd","as_fd","as_fd","as_fd","as_fd","as_fd","as_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","async_io","async_io","async_io","async_io","bind","bind","bind","bind","bind","bind","bind_device","bind_device","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","connect","connect","connect","connect","connect","connect","datagram","device","device","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_raw_fd","from_raw_fd","from_std","from_std","from_std","from_std","from_std","from_std","from_std_stream","into","into","into","into","into","into","into","into","into_raw_fd","into_raw_fd","into_split","into_split","into_std","into_std","into_std","into_std","into_std","into_std","is_write_vectored","is_write_vectored","join_multicast_v4","join_multicast_v6","keepalive","leave_multicast_v4","leave_multicast_v6","linger","linger","listen","listen","local_addr","local_addr","local_addr","local_addr","local_addr","local_addr","local_addr","lookup_host","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","new_datagram","new_stream","new_v4","new_v6","nodelay","nodelay","pair","pair","peek","peek_from","peek_sender","peer_addr","peer_addr","peer_addr","peer_addr","peer_cred","poll_accept","poll_accept","poll_flush","poll_flush","poll_peek","poll_peek_from","poll_peek_sender","poll_read","poll_read","poll_read_ready","poll_read_ready","poll_recv","poll_recv","poll_recv_from","poll_recv_from","poll_recv_ready","poll_recv_ready","poll_send","poll_send","poll_send_ready","poll_send_ready","poll_send_to","poll_send_to","poll_shutdown","poll_shutdown","poll_write","poll_write","poll_write_ready","poll_write_ready","poll_write_vectored","poll_write_vectored","readable","readable","readable","readable","ready","ready","ready","ready","recv","recv","recv_buf","recv_buf","recv_buf_from","recv_buf_from","recv_buffer_size","recv_from","recv_from","reuseaddr","reuseport","send","send","send_buffer_size","send_to","send_to","set_broadcast","set_keepalive","set_linger","set_linger","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_nodelay","set_recv_buffer_size","set_reuseaddr","set_reuseport","set_send_buffer_size","set_tos","set_tos","set_ttl","set_ttl","set_ttl","shutdown","split","split","take_error","take_error","take_error","take_error","take_error","take_error","tcp","tos","tos","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_io","try_io","try_io","try_io","try_peek_from","try_peek_sender","try_read","try_read","try_read_buf","try_read_buf","try_read_vectored","try_read_vectored","try_recv","try_recv","try_recv_buf","try_recv_buf","try_recv_buf_from","try_recv_buf_from","try_recv_from","try_recv_from","try_send","try_send","try_send_to","try_send_to","try_write","try_write","try_write_vectored","try_write_vectored","ttl","ttl","ttl","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbound","unix","writable","writable","writable","writable","OwnedReadHalf","OwnedWriteHalf","ReadHalf","ReuniteError","WriteHalf","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","drop","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","from","into","into","into","into","into","is_write_vectored","is_write_vectored","local_addr","local_addr","local_addr","local_addr","peek","peek","peer_addr","peer_addr","peer_addr","peer_addr","poll_flush","poll_flush","poll_peek","poll_peek","poll_read","poll_read","poll_shutdown","poll_shutdown","poll_write","poll_write","poll_write_vectored","poll_write_vectored","readable","readable","ready","ready","ready","ready","reunite","reunite","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_read_buf","try_read_buf","try_read_vectored","try_read_vectored","try_write","try_write","try_write_vectored","try_write_vectored","type_id","type_id","type_id","type_id","type_id","writable","writable","OwnedReadHalf","OwnedWriteHalf","ReadHalf","ReuniteError","SocketAddr","UCred","WriteHalf","as_pathname","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","drop","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","from","from","from","gid","gid_t","hash","into","into","into","into","into","into","into","is_unnamed","is_write_vectored","is_write_vectored","local_addr","local_addr","local_addr","local_addr","peer_addr","peer_addr","peer_addr","peer_addr","pid","pid_t","pipe","poll_flush","poll_flush","poll_read","poll_read","poll_shutdown","poll_shutdown","poll_write","poll_write","poll_write_vectored","poll_write_vectored","readable","readable","ready","ready","ready","ready","reunite","reunite","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_read_buf","try_read_buf","try_read_vectored","try_read_vectored","try_write","try_write","try_write_vectored","try_write_vectored","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","uid_t","writable","writable","OpenOptions","Receiver","Sender","as_fd","as_fd","as_raw_fd","as_raw_fd","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","fmt","fmt","fmt","from","from","from","from_file","from_file","from_file_unchecked","from_file_unchecked","from_owned_fd","from_owned_fd","from_owned_fd_unchecked","from_owned_fd_unchecked","into","into","into","into_blocking_fd","into_blocking_fd","into_nonblocking_fd","into_nonblocking_fd","is_write_vectored","new","open_receiver","open_sender","pipe","poll_flush","poll_read","poll_read_ready","poll_shutdown","poll_write","poll_write_ready","poll_write_vectored","read_write","readable","ready","ready","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_read","try_read_buf","try_read_vectored","try_write","try_write_vectored","type_id","type_id","type_id","unchecked","writable","Builder","CurrentThread","EnterGuard","Handle","MultiThread","Runtime","RuntimeFlavor","TryCurrentError","block_on","block_on","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","current","drop","enable_all","enable_io","enable_time","enter","enter","eq","event_interval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","global_queue_interval","handle","into","into","into","into","into","into","is_missing_context","is_thread_local_destroyed","max_blocking_threads","max_io_events_per_tick","new_current_thread","on_thread_park","on_thread_start","on_thread_stop","on_thread_unpark","runtime_flavor","shutdown_background","shutdown_timeout","spawn","spawn","spawn_blocking","spawn_blocking","thread_keep_alive","thread_name","thread_name_fn","thread_stack_size","to_owned","to_string","try_current","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","worker_threads","AbortHandle","JoinError","JoinHandle","JoinSet","LocalEnterGuard","LocalKey","LocalSet","Unconstrained","abort","abort","abort_all","abort_handle","block_on","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","detach_all","drop","drop","drop","drop","drop","enter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","futures","get","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_panic","is_cancelled","is_empty","is_finished","is_finished","is_panic","join_next","len","new","new","poll","poll","poll","poll_join_next","run_until","scope","shutdown","spawn","spawn","spawn_blocking","spawn_blocking","spawn_blocking_on","spawn_local","spawn_local","spawn_local","spawn_local_on","spawn_on","sync_scope","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_panic","try_join_next","try_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unconstrained","with","yield_now","TaskLocalFuture","borrow","borrow_mut","drop","fmt","from","into","into_future","poll","try_from","try_into","type_id","Burst","Delay","Duration","Instant","Interval","MissedTickBehavior","Skip","Sleep","Timeout","add","add_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_duration_since","checked_sub","clone","clone","clone_into","clone_into","cmp","deadline","default","duration_since","elapsed","eq","eq","error","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_std","get_mut","get_ref","hash","interval","interval_at","into","into","into","into","into","into_future","into_future","into_inner","into_std","is_elapsed","missed_tick_behavior","now","partial_cmp","period","poll","poll","poll_tick","reset","reset","reset_after","reset_at","reset_immediately","saturating_duration_since","set_missed_tick_behavior","sleep","sleep_until","sub","sub","sub_assign","tick","timeout","timeout_at","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Elapsed","Error","at_capacity","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","fmt","fmt","from","from","into","into","invalid","is_at_capacity","is_invalid","is_shutdown","shutdown","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"tokio"],[14,"tokio::io"],[497,"tokio::io::unix"],[569,"tokio::net"],[867,"tokio::net::tcp"],[964,"tokio::net::unix"],[1089,"tokio::net::unix::pipe"],[1159,"tokio::runtime"],[1256,"tokio::task"],[1382,"tokio::task::futures"],[1394,"tokio::time"],[1496,"tokio::time::error"],[1528,"bytes::buf::uninit_slice"],[1529,"core::cmp"],[1530,"core::pin"],[1531,"std::io::error"],[1532,"core::marker"],[1533,"core::marker"],[1534,"core::fmt"],[1535,"core::fmt"],[1536,"alloc::string"],[1537,"core::option"],[1538,"alloc::vec"],[1539,"core::task::wake"],[1540,"core::task::poll"],[1541,"std::io"],[1542,"bytes::buf::buf_mut"],[1543,"std::io"],[1544,"bytes::buf::buf_impl"],[1545,"std::os::fd::owned"],[1546,"std::os::fd::raw"],[1547,"std::os::fd::raw"],[1548,"core::ops::function"],[1549,"std::path"],[1550,"core::convert"],[1551,"std::net::tcp"],[1552,"std::net::tcp"],[1553,"std::os::unix::net::datagram"],[1554,"std::os::unix::net::listener"],[1555,"std::os::unix::net::stream"],[1556,"core::net::ip_addr"],[1557,"core::net::ip_addr"],[1558,"core::iter::traits::iterator"],[1559,"std::net"],[1560,"std::io"],[1561,"std::fs"],[1562,"std::os::fd::owned"],[1563,"core::ops::function"],[1564,"std::time"]],"d":["Traits, helpers, and type definitions for asynchronous I/O …","Waits on multiple concurrent branches, returning when <strong>all</strong> …","Marks async function to be executed by selected runtime. …","TCP/UDP/Unix bindings for <code>tokio</code>.","Pins a value on the stack.","The Tokio runtime.","Waits on multiple concurrent branches, returning when the …","","Due to the <code>Stream</code> trait’s inclusion in <code>std</code> landing later …","Asynchronous green-threads.","Declares a new task-local key of type <code>tokio::task::LocalKey</code>…","Marks async function to be executed by runtime, suitable …","Utilities for tracking time.","Waits on multiple concurrent branches, returning when <strong>all</strong> …","Returns a <code>Ready</code> representing readiness for all operations.","Reads bytes asynchronously.","An extension trait which adds utility methods to …","Reads bytes from a source.","Reads bytes from a source.","Seek bytes asynchronously.","An extension trait that adds utility methods to <code>AsyncSeek</code> …","Writes bytes asynchronously.","Writes bytes to a sink.","The <code>BufReader</code> struct adds buffering to any reader.","Wraps a type that is <code>AsyncWrite</code> and <code>AsyncRead</code>, and buffers …","Wraps a writer and buffers its output.","A bidirectional pipe to read and write bytes in memory.","Returns the empty <code>Ready</code> set.","Interest in error events.","Returns a <code>Ready</code> representing error readiness.","<code>Empty</code> ignores any data written via <code>AsyncWrite</code>, and will …","","","Readiness event interest.","Joins two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> …","Reads lines from an <code>AsyncBufRead</code>.","Returns a <code>Interest</code> set representing priority completion …","Returns a <code>Ready</code> representing priority readiness.","Interest in all readable events.","Returns a <code>Ready</code> representing readable readiness.","Returns a <code>Ready</code> representing read closed readiness.","A wrapper around a byte buffer that is incrementally …","The readable half of a value returned from <code>split</code>.","Describes the readiness state of an I/O resources.","An async reader which yields one byte over and over and …","","","An async writer which will move data into the void.","Splitter for the <code>split</code> method.","Stream for the <code>take</code> method.","Interest in all writable events.","Returns a <code>Ready</code> representing writable readiness.","Returns a <code>Ready</code> representing write closed readiness.","The writable half of a value returned from <code>split</code>.","Add together two <code>Interest</code> values.","Advances the size of the filled region of the buffer.","","Asserts that the first <code>n</code> unfilled bytes of the buffer are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the internally buffered data.","Returns a reference to the internally buffered data.","Returns the total capacity of the buffer.","Creates a new <code>AsyncRead</code> instance that chains this stream …","Creates a new <code>AsyncRead</code> instance that chains this stream …","","Clears the buffer, resetting the filled region to empty.","","","","","","Tells this buffer that <code>amt</code> bytes have been consumed from …","Tells this buffer that <code>amt</code> bytes have been consumed from …","Tells this buffer that <code>amt</code> bytes have been consumed from …","","","","","","Asynchronously copies the entire contents of a reader into …","Copies data in both directions between <code>a</code> and <code>b</code>.","Asynchronously copies the entire contents of a reader into …","","Create a new pair of <code>DuplexStream</code>s that act like a pair of …","Creates a value that is always at EOF for reads, and …","","","Returns the contents of the internal buffer, filling it …","Returns the contents of the internal buffer, filling it …","Returns a shared reference to the filled portion of the …","Returns a mutable reference to the filled portion of the …","Flushes this output stream, ensuring that all …","Flushes this output stream, ensuring that all …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Gets a mutable reference to the underlying reader.","Obtains a mutable reference to the underlying reader.","Gets a mutable reference to the underlying writer.","Gets a mutable reference to the underlying I/O object.","Gets a mutable reference to the underlying reader.","Gets a pinned mutable reference to the underlying reader.","Gets a pinned mutable reference to the underlying writer.","Gets a pinned mutable reference to the underlying I/O …","Gets a pinned mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Obtains a reference to the underlying reader.","Gets a reference to the underlying writer.","Gets a reference to the underlying I/O object.","Gets a reference to the underlying reader.","Returns a mutable reference to the unfilled part of the …","Returns a mutable reference to the first <code>n</code> bytes of the …","Returns a shared reference to the initialized portion of …","Returns a mutable reference to the initialized portion of …","Returns a mutable reference to the entire buffer, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Splits this <code>Join</code> back into its <code>AsyncRead</code> and <code>AsyncWrite</code> …","Consumes the <code>Take</code>, returning the wrapped reader.","Unwraps this <code>Lines&lt;R&gt;</code>, returning the underlying reader.","Consumes this <code>BufWriter</code>, returning the underlying writer.","Consumes this <code>BufStream</code>, returning the underlying I/O …","Consumes this <code>BufReader</code>, returning the underlying reader.","Returns true if <code>Ready</code> is the empty set.","Returns true if the value includes error interest.","Returns <code>true</code> if the value includes error <code>readiness</code>.","Checks if this <code>ReadHalf</code> and some <code>WriteHalf</code> were split from …","Checks if this <code>WriteHalf</code> and some <code>ReadHalf</code> were split from …","Returns true if the value includes priority interest.","Returns <code>true</code> if the value includes priority <code>readiness</code>.","Returns <code>true</code> if the value includes read-closed <code>readiness</code>.","Returns true if the value includes readable interest.","Returns <code>true</code> if the value includes <code>readable</code>.","Returns true if the value includes writable interest.","Returns <code>true</code> if the value includes writable <code>readiness</code>.","Returns <code>true</code> if the value includes write-closed <code>readiness</code>.","Determines if this writer has an efficient …","Determines if this writer has an efficient …","","","","","","","","Join two values implementing <code>AsyncRead</code> and <code>AsyncWrite</code> into …","Returns the remaining number of bytes that can be read …","Returns a stream over the lines of this reader. This …","Returns a stream over the lines of this reader. This …","Creates a new <code>ReadBuf</code> from a fully initialized buffer.","Creates a new <code>BufWriter</code> with a default buffer capacity. …","Wraps a type in both <code>BufWriter</code> and <code>BufReader</code>.","Creates a new <code>BufReader</code> with a default buffer capacity. …","Returns the next line in the stream.","Returns the next segment in the stream.","","Waits for a seek operation to complete.","","","","Attempts to return the contents of the internal buffer, …","","","","","","Attempts to flush the object, ensuring that any buffered …","","","","","","","","","Polls for the next line in the stream.","Polls for the next segment in the stream.","Attempts to read from the <code>AsyncRead</code> into <code>buf</code>.","","","","","","","","","","Initiates or attempts to shut down this writer, returning …","","","","","","","","","Attempt to write bytes from <code>buf</code> into the object.","","","","","","","","","Like <code>poll_write</code>, except that it writes from a slice of …","Like <code>poll_write</code>, except that it writes from a slice of …","","","","","","","","Appends data to the buffer, advancing the written position …","Pulls some bytes from this source into the specified …","Pulls some bytes from this source into the specified …","Pulls some bytes from this source into the specified …","Pulls some bytes from this source into the specified …","Reads the exact number of bytes required to fill <code>buf</code>.","Reads the exact number of bytes required to fill <code>buf</code>.","Reads an 32-bit floating point type in big-endian order …","Reads an 32-bit floating point type in big-endian order …","Reads an 32-bit floating point type in little-endian order …","Reads an 32-bit floating point type in little-endian order …","Reads an 64-bit floating point type in big-endian order …","Reads an 64-bit floating point type in big-endian order …","Reads an 64-bit floating point type in little-endian order …","Reads an 64-bit floating point type in little-endian order …","Reads an signed 128-bit integer in big-endian order from …","Reads an signed 128-bit integer in big-endian order from …","Reads an signed 128-bit integer in little-endian order …","Reads an signed 128-bit integer in little-endian order …","Reads a signed 16-bit integer in big-endian order from the …","Reads a signed 16-bit integer in big-endian order from the …","Reads a signed 16-bit integer in little-endian order from …","Reads a signed 16-bit integer in little-endian order from …","Reads a signed 32-bit integer in big-endian order from the …","Reads a signed 32-bit integer in big-endian order from the …","Reads a signed 32-bit integer in little-endian order from …","Reads a signed 32-bit integer in little-endian order from …","Reads an signed 64-bit integer in big-endian order from the","Reads an signed 64-bit integer in big-endian order from the","Reads an signed 64-bit integer in little-endian order from …","Reads an signed 64-bit integer in little-endian order from …","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads all bytes until a newline (the 0xA byte) is reached, …","Reads all bytes until a newline (the 0xA byte) is reached, …","Reads all bytes until EOF in this source, placing them …","Reads all bytes until EOF in this source, placing them …","Reads all bytes until EOF in this source, appending them …","Reads all bytes until EOF in this source, appending them …","Reads an unsigned 128-bit integer in big-endian order from …","Reads an unsigned 128-bit integer in big-endian order from …","Reads an unsigned 128-bit integer in little-endian order …","Reads an unsigned 128-bit integer in little-endian order …","Reads an unsigned 16-bit integer in big-endian order from …","Reads an unsigned 16-bit integer in big-endian order from …","Reads an unsigned 16-bit integer in little-endian order …","Reads an unsigned 16-bit integer in little-endian order …","Reads an unsigned 32-bit integer in big-endian order from …","Reads an unsigned 32-bit integer in big-endian order from …","Reads an unsigned 32-bit integer in little-endian order …","Reads an unsigned 32-bit integer in little-endian order …","Reads an unsigned 64-bit integer in big-endian order from …","Reads an unsigned 64-bit integer in big-endian order from …","Reads an unsigned 64-bit integer in little-endian order …","Reads an unsigned 64-bit integer in little-endian order …","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …","Reads all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF …","Returns a reference to the inner reader.","Returns a mutable reference to the inner reader.","Returns a pinned mutable reference to the inner reader.","Returns the number of bytes at the end of the slice that …","","Remove <code>Interest</code> from <code>self</code>.","Creates an instance of an async reader that infinitely …","Creates a future which will rewind to the beginning of the …","Creates a future which will rewind to the beginning of the …","Creates a future which will seek an IO object, and then …","Creates a future which will seek an IO object, and then …","Sets the size of the filled region of the buffer.","Sets the number of bytes that can be read before this …","Shuts down the output stream, ensuring that the value can …","Shuts down the output stream, ensuring that the value can …","Creates an instance of an async writer which will …","Splits a single value implementing <code>AsyncRead + AsyncWrite</code> …","Returns a stream of the contents of this reader split on …","Returns a stream of the contents of this reader split on …","Attempts to seek to an offset, in bytes, in a stream.","","","","Creates a future which will return the current seek …","Creates a future which will return the current seek …","","Returns a new <code>ReadBuf</code> comprised of the unfilled section up …","Creates an adaptor which reads at most <code>limit</code> bytes from it.","Creates an adaptor which reads at most <code>limit</code> bytes from it.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a mutable reference to the unfilled part of the …","Creates a new <code>ReadBuf</code> from a fully uninitialized buffer.","Asynchronous IO structures specific to Unix-like operating …","Reunites with a previously split <code>WriteHalf</code>.","Creates a new <code>BufWriter</code> with the specified buffer capacity.","Creates a <code>BufStream</code> with the specified <code>BufReader</code> capacity …","Creates a new <code>BufReader</code> with the specified buffer capacity.","Writes a buffer into this writer, returning how many bytes …","Writes a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write an entire buffer into this writer.","Attempts to write an entire buffer into this writer.","Attempts to write an entire buffer into this writer.","Writes a buffer into this writer, advancing the buffer’s …","Writes a buffer into this writer, advancing the buffer’s …","Writes an 32-bit floating point type in big-endian order …","Writes an 32-bit floating point type in big-endian order …","Writes an 32-bit floating point type in little-endian …","Writes an 32-bit floating point type in little-endian …","Writes an 64-bit floating point type in big-endian order …","Writes an 64-bit floating point type in big-endian order …","Writes an 64-bit floating point type in little-endian …","Writes an 64-bit floating point type in little-endian …","Writes an signed 128-bit integer in big-endian order to the","Writes an signed 128-bit integer in big-endian order to the","Writes an signed 128-bit integer in little-endian order to …","Writes an signed 128-bit integer in little-endian order to …","Writes a signed 16-bit integer in big-endian order to the …","Writes a signed 16-bit integer in big-endian order to the …","Writes a signed 16-bit integer in little-endian order to …","Writes a signed 16-bit integer in little-endian order to …","Writes a signed 32-bit integer in big-endian order to the …","Writes a signed 32-bit integer in big-endian order to the …","Writes a signed 32-bit integer in little-endian order to …","Writes a signed 32-bit integer in little-endian order to …","Writes an signed 64-bit integer in big-endian order to the …","Writes an signed 64-bit integer in big-endian order to the …","Writes an signed 64-bit integer in little-endian order to …","Writes an signed 64-bit integer in little-endian order to …","Writes a signed 8-bit integer to the underlying writer.","Writes a signed 8-bit integer to the underlying writer.","Writes an unsigned 128-bit integer in big-endian order to …","Writes an unsigned 128-bit integer in big-endian order to …","Writes an unsigned 128-bit integer in little-endian order …","Writes an unsigned 128-bit integer in little-endian order …","Writes an unsigned 16-bit integer in big-endian order to …","Writes an unsigned 16-bit integer in big-endian order to …","Writes an unsigned 16-bit integer in little-endian order …","Writes an unsigned 16-bit integer in little-endian order …","Writes an unsigned 32-bit integer in big-endian order to …","Writes an unsigned 32-bit integer in big-endian order to …","Writes an unsigned 32-bit integer in little-endian order …","Writes an unsigned 32-bit integer in little-endian order …","Writes an unsigned 64-bit integer in big-endian order to …","Writes an unsigned 64-bit integer in big-endian order to …","Writes an unsigned 64-bit integer in little-endian order …","Writes an unsigned 64-bit integer in little-endian order …","Writes an unsigned 8-bit integer to the underlying writer.","Writes an unsigned 8-bit integer to the underlying writer.","Like <code>write</code>, except that it writes from a slice of buffers.","Like <code>write</code>, except that it writes from a slice of buffers.","Returns a reference to the inner writer.","Returns a mutable reference to the inner writer.","Returns a pinned mutable reference to the inner writer.","Associates an IO object backed by a Unix file descriptor …","Represents an IO-ready event detected on a particular file …","Represents an IO-ready event detected on a particular file …","The error type returned by <code>try_io</code>.","","","Reads or writes from the file descriptor using a …","Reads or writes from the file descriptor using a …","","","","","","","","","Indicates to tokio that the file descriptor is no longer …","Indicates to tokio that the file descriptor is no longer …","Indicates to tokio that the file descriptor no longer has …","Indicates to tokio that the file descriptor no longer has …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a shared reference to the backing object of the …","Returns a shared reference to the backing object of the …","Returns a mutable reference to the backing object of the …","Returns a mutable reference to the backing object of this …","Returns a mutable reference to the inner <code>AsyncFd</code>.","Returns a shared reference to the backing object of this …","Returns a shared reference to the inner <code>AsyncFd</code>.","Returns a shared reference to the inner <code>AsyncFd</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deregisters this file descriptor and returns ownership of …","Creates an <code>AsyncFd</code> backed by (and taking ownership of) an …","Polls for read readiness.","Polls for read readiness.","Polls for write readiness.","Polls for write readiness.","Waits for the file descriptor to become readable, …","Waits for the file descriptor to become readable, …","Waits for any of the requested ready states, returning a …","Get the <code>Ready</code> value associated with this guard.","Get the <code>Ready</code> value associated with this guard.","Waits for any of the requested ready states, returning a …","This method should be invoked when you intentionally want …","This method should be invoked when you intentionally want …","","","","","","","","","Performs the provided IO operation.","Performs the provided IO operation.","","","","","Creates an <code>AsyncFd</code> backed by (and taking ownership of) an …","Waits for the file descriptor to become writable, …","Waits for the file descriptor to become writable, …","A TCP socket server, listening for connections.","A TCP socket that has not yet been converted to a <code>TcpStream</code>…","A TCP stream between a local and a remote socket.","Converts or resolves without blocking to one or more …","A UDP socket.","An I/O object representing a Unix datagram socket.","A Unix socket which can accept connections from other Unix …","A Unix socket that has not yet been converted to a …","A structure representing a connected Unix socket.","Accepts a new incoming connection from this listener.","Accepts a new incoming connection to this listener.","","","","","","","","","","","","","","","","","Reads or writes from the socket using a user-provided IO …","Reads or writes from the socket using a user-provided IO …","Reads or writes from the socket using a user-provided IO …","Reads or writes from the socket using a user-provided IO …","Creates a new <code>TcpListener</code>, which will be bound to the …","Binds the socket to the given address.","This function will create a new UDP socket and attempt to …","Creates a new <code>UnixDatagram</code> bound to the specified path.","Creates a new <code>UnixListener</code> bound to the specified path.","Binds the socket to the given address.","Sets the value for the <code>SO_BINDTODEVICE</code> option on this …","Sets the value for the <code>SO_BINDTODEVICE</code> option on this …","","","","","","","","","","","","","","","","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","Establishes a TCP connection with a peer at the specified …","Opens a TCP connection to a remote host.","Connects the UDP socket setting the default destination …","Connects the socket to the specified address.","Establishes a Unix connection with a peer at the specified …","Connects to the socket named by <code>path</code>.","Converts the socket into a <code>UnixDatagram</code>.","Gets the value for the <code>SO_BINDTODEVICE</code> option on this …","Gets the value for the <code>SO_BINDTODEVICE</code> option on this …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>RawFd</code> to a <code>TcpSocket</code>.","","Creates new <code>TcpListener</code> from a <code>std::net::TcpListener</code>.","Creates new <code>TcpStream</code> from a <code>std::net::TcpStream</code>.","Creates new <code>UdpSocket</code> from a previously bound …","Creates new <code>UnixDatagram</code> from a …","Creates new <code>UnixListener</code> from a …","Creates new <code>UnixStream</code> from a …","Converts a <code>std::net::TcpStream</code> into a <code>TcpSocket</code>. The …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Splits a <code>TcpStream</code> into a read half and a write half, …","Splits a <code>UnixStream</code> into a read half and a write half, …","Turns a <code>tokio::net::TcpListener</code> into a …","Turns a <code>tokio::net::TcpStream</code> into a <code>std::net::TcpStream</code>.","Turns a <code>tokio::net::UdpSocket</code> into a <code>std::net::UdpSocket</code>.","Turns a <code>tokio::net::UnixDatagram</code> into a …","Turns a <code>tokio::net::UnixListener</code> into a …","Turns a <code>tokio::net::UnixStream</code> into a …","","","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Gets the value of the <code>SO_KEEPALIVE</code> option on this socket.","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","Reads the linger duration for this socket by getting the …","Reads the linger duration for this socket by getting the …","Converts the socket into a <code>TcpListener</code>.","Converts the socket into a <code>UnixListener</code>.","Returns the local address that this listener is bound to.","Gets the local address of this socket.","Returns the local address that this stream is bound to.","Returns the local address that this socket is bound to.","Returns the local address that this socket is bound to.","Returns the local socket address of this listener.","Returns the socket address of the local half of this …","Performs a DNS resolution.","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Creates a new Unix datagram socket.","Creates a new Unix stream socket.","Creates a new socket configured for IPv4.","Creates a new socket configured for IPv6.","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Creates an unnamed pair of connected sockets.","Creates an unnamed pair of connected sockets.","Receives data on the socket from the remote address to …","Receives data from the socket, without removing it from …","Retrieve the sender of the data at the head of the input …","Returns the remote address that this stream is connected …","Returns the socket address of the remote peer this socket …","Returns the address of this socket’s peer.","Returns the socket address of the remote half of this …","Returns effective credentials of the process which called …","Polls to accept a new incoming connection to this listener.","Polls to accept a new incoming connection to this listener.","","","Attempts to receive data on the socket, without removing …","Receives data from the socket, without removing it from …","Retrieve the sender of the data at the head of the input …","","","Polls for read readiness.","Polls for read readiness.","Attempts to receive a single datagram message on the …","Attempts to receive a single datagram message on the …","Attempts to receive a single datagram on the socket.","Attempts to receive a single datagram on the specified …","Polls for read/receive readiness.","Polls for read/receive readiness.","Attempts to send data on the socket to the remote address …","Attempts to send data on the socket to the remote address …","Polls for write/send readiness.","Polls for write/send readiness.","Attempts to send data on the socket to a given address.","Attempts to send data to the specified address.","","","","","Polls for write readiness.","Polls for write readiness.","","","Waits for the socket to become readable.","Waits for the socket to become readable.","Waits for the socket to become readable.","Waits for the socket to become readable.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Receives a single datagram message on the socket from the …","Receives data from the socket.","Receives a single datagram message on the socket from the …","Receives data from the socket from the address to which it …","Receives a single datagram message on the socket, …","Receives from the socket, advances the buffer’s internal …","Returns the size of the TCP receive buffer for this socket.","Receives a single datagram message on the socket. On …","Receives data from the socket.","Retrieves the value set for <code>SO_REUSEADDR</code> on this socket.","Allows the socket to bind to an in-use port. Only …","Sends data on the socket to the remote address that the …","Sends data on the socket to the socket’s peer.","Returns the size of the TCP send buffer for this socket.","Sends data on the socket to the given address. On success, …","Sends data on the socket to the specified address.","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets value for the <code>SO_KEEPALIVE</code> option on this socket.","Sets the linger duration of this socket by setting the …","Sets the linger duration of this socket by setting the …","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the size of the TCP receive buffer on this socket.","Allows the socket to bind to an in-use address.","Allows the socket to bind to an in-use port. Only …","Sets the size of the TCP send buffer on this socket.","Sets the value for the <code>IP_TOS</code> option on this socket.","Sets the value for the <code>IP_TOS</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Shuts down the read, write, or both halves of this …","Splits a <code>TcpStream</code> into a read half and a write half, …","Splits a <code>UnixStream</code> into a read half and a write half, …","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","TCP utility types.","Gets the value of the <code>IP_TOS</code> option for this socket.","Gets the value of the <code>IP_TOS</code> option for this socket.","Consumes stream, returning the tokio I/O object.","","","","Consumes stream, returning the tokio I/O object.","","Consumes stream, returning the tokio I/O object.","Consumes stream, returning the Tokio I/O object.","","","Consumes stream, returning the tokio I/O object.","","Consumes stream, returning the tokio I/O object.","","","","","","","","","","Tries to read or write from the socket using a …","Tries to read or write from the socket using a …","Tries to read or write from the socket using a …","Tries to read or write from the socket using a …","Tries to receive data on the socket without removing it …","Try to retrieve the sender of the data at the head of the …","Tries to read data from the stream into the provided …","Try to read data from the stream into the provided buffer, …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to receive a single datagram message on the socket …","Tries to receive a datagram from the peer without waiting.","Tries to receive data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to receive a single datagram message on the socket. …","Tries to receive data from the socket without waiting.","Tries to receive a single datagram message on the socket. …","Tries to receive data from the socket without waiting.","Tries to send data on the socket to the remote address to …","Tries to send a datagram to the peer without waiting.","Tries to send data on the socket to the given address, but …","Tries to send a datagram to the peer without waiting.","Try to write a buffer to the stream, returning how many …","Tries to write a buffer to the stream, returning how many …","Tries to write several buffers to the stream, returning …","Tries to write several buffers to the stream, returning …","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","","","","","","","","","Creates a new <code>UnixDatagram</code> which is not bound to any …","Unix specific network types.","Waits for the socket to become writable.","Waits for the socket to become writable.","Waits for the socket to become writable.","Waits for the socket to become writable.","Owned read half of a <code>TcpStream</code>, created by <code>into_split</code>.","Owned write half of a <code>TcpStream</code>, created by <code>into_split</code>.","Borrowed read half of a <code>TcpStream</code>, created by <code>split</code>.","Error indicating that two halves were not from the same …","Borrowed write half of a <code>TcpStream</code>, created by <code>split</code>.","","","","","","","","","","","","","","","","","","","","","","Destroys the write half, but don’t close the write half …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the local address that this stream is bound to.","Returns the local address that this stream is bound to.","Returns the local address that this stream is bound to.","Returns the local address that this stream is bound to.","Receives data on the socket from the remote address to …","Receives data on the socket from the remote address to …","Returns the remote address that this stream is connected …","Returns the remote address that this stream is connected …","Returns the remote address that this stream is connected …","Returns the remote address that this stream is connected …","","","Attempts to receive data on the socket, without removing …","Attempt to receive data on the socket, without removing …","","","","","","","","","Waits for the socket to become readable.","Waits for the socket to become readable.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Attempts to put the two halves of a <code>TcpStream</code> back …","Attempts to put the two halves of a <code>TcpStream</code> back …","","","","","","","","","","","","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to write a buffer to the stream, returning how many …","Tries to write a buffer to the stream, returning how many …","Tries to write several buffers to the stream, returning …","Tries to write several buffers to the stream, returning …","","","","","","Waits for the socket to become writable.","Waits for the socket to become writable.","Owned read half of a <code>UnixStream</code>, created by <code>into_split</code>.","Owned write half of a <code>UnixStream</code>, created by <code>into_split</code>.","Borrowed read half of a <code>UnixStream</code>, created by <code>split</code>.","Error indicating that two halves were not from the same …","An address associated with a Tokio Unix socket.","Credentials of a process.","Borrowed write half of a <code>UnixStream</code>, created by <code>split</code>.","Returns the contents of this address if it is a <code>pathname</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Destroys the write half, but don’t close the write half …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets GID (group ID) of the process.","A type representing user ID.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the address is unnamed.","","","Returns the socket address of the local half of this …","Returns the socket address of the local half of this …","Returns the socket address of the local half of this …","Returns the socket address of the local half of this …","Returns the socket address of the remote half of this …","Returns the socket address of the remote half of this …","Returns the socket address of the remote half of this …","Returns the socket address of the remote half of this …","Gets PID (process ID) of the process.","A type representing group ID.","Unix pipe types.","","","","","","","","","","","Waits for the socket to become readable.","Waits for the socket to become readable.","Wait for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","Attempts to put the two halves of a <code>UnixStream</code> back …","Attempts to put the two halves of a <code>UnixStream</code> back …","","","","","","","","","","","","","","","","","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to read data from the stream into the provided …","Tries to write a buffer to the stream, returning how many …","Tries to write a buffer to the stream, returning how many …","Tries to write several buffers to the stream, returning …","Tries to write several buffers to the stream, returning …","","","","","","","","Gets UID (user ID) of the process.","A type representing process and process group IDs.","Waits for the socket to become writable.","Waits for the socket to become writable.","Options and flags which can be used to configure how a …","Reading end of a Unix pipe.","Writing end of a Unix pipe.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Sender</code> from a <code>File</code>.","Creates a new <code>Receiver</code> from a <code>File</code>.","Creates a new <code>Sender</code> from a <code>File</code> without checking pipe …","Creates a new <code>Receiver</code> from a <code>File</code> without checking pipe …","Creates a new <code>Sender</code> from an <code>OwnedFd</code>.","Creates a new <code>Receiver</code> from an <code>OwnedFd</code>.","Creates a new <code>Sender</code> from an <code>OwnedFd</code> without checking pipe …","Creates a new <code>Receiver</code> from an <code>OwnedFd</code> without checking …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the pipe into an <code>OwnedFd</code> in blocking mode.","Converts the pipe into an <code>OwnedFd</code> in blocking mode.","Converts the pipe into an <code>OwnedFd</code> in nonblocking mode.","Converts the pipe into an <code>OwnedFd</code> in nonblocking mode.","","Creates a blank new set of options ready for configuration.","Creates a <code>Receiver</code> from a FIFO file with the options …","Creates a <code>Sender</code> from a FIFO file with the options …","Creates a new anonymous Unix pipe.","","","Polls for read readiness.","","","Polls for write readiness.","","Sets the option for read-write access.","Waits for the pipe to become readable.","Waits for any of the requested ready states.","Waits for any of the requested ready states.","","","","","","","","Tries to read data from the pipe into the provided buffer, …","Tries to read data from the pipe into the provided buffer, …","Tries to read data from the pipe into the provided …","Tries to write a buffer to the pipe, returning how many …","Tries to write several buffers to the pipe, returning how …","","","","Sets the option to skip the check for FIFO file type.","Waits for the pipe to become writable.","Builds Tokio Runtime with custom configuration values.","The flavor that executes all tasks on the current thread.","Runtime context guard.","Handle to the runtime.","The flavor that executes tasks across multiple threads.","The Tokio runtime.","The flavor of a <code>Runtime</code>.","Error returned by <code>try_current</code> when no Runtime has been …","Runs a future to completion on this <code>Handle</code>’s associated …","Runs a future to completion on the Tokio runtime. This is …","","","","","","","","","","","","","Creates the configured <code>Runtime</code>.","","","Returns a <code>Handle</code> view over the currently running <code>Runtime</code>.","","Enables both I/O and time drivers.","Enables the I/O driver.","Enables the time driver.","Enters the runtime context. This allows you to construct …","Enters the runtime context.","","Sets the number of scheduler ticks after which the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Sets the number of scheduler ticks after which the …","Returns a handle to the runtime’s spawner.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the call failed because there is currently …","Returns true if the call failed because the Tokio context …","Specifies the limit for additional threads spawned by the …","Enables the I/O driver and configures the max number of …","Returns a new builder with the current thread scheduler …","Executes function <code>f</code> just before a thread is parked (goes …","Executes function <code>f</code> after each thread is started but …","Executes function <code>f</code> before each thread stops.","Executes function <code>f</code> just after a thread unparks (starts …","Returns the flavor of the current <code>Runtime</code>.","Shuts down the runtime, without waiting for any spawned …","Shuts down the runtime, waiting for at most <code>duration</code> for …","Spawns a future onto the Tokio runtime.","Spawns a future onto the Tokio runtime.","Runs the provided function on an executor dedicated to …","Runs the provided function on an executor dedicated to …","Sets a custom timeout for a thread in the blocking pool.","Sets name of threads spawned by the <code>Runtime</code>’s thread …","Sets a function used to generate the name of threads …","Sets the stack size (in bytes) for worker threads.","","","Returns a Handle view over the currently running Runtime","","","","","","","","","","","","","","","","","","","Sets the number of worker threads the <code>Runtime</code> will use.","An owned permission to abort a spawned task, without …","Task failed to execute to completion.","An owned permission to join on a task (await its …","A collection of tasks spawned on a Tokio runtime.","Context guard for <code>LocalSet</code>","A key for task-local data.","A set of tasks which are executed on the same thread.","Future for the <code>unconstrained</code> method.","Abort the task associated with the handle.","Abort the task associated with the handle.","Aborts all tasks on this <code>JoinSet</code>.","Returns a new <code>AbortHandle</code> that can be used to remotely …","Runs a future to completion on the provided runtime, …","","","","","","","","","","","","","","","","","","","Removes all tasks from this <code>JoinSet</code> without aborting them.","","","","","","Enters the context of this <code>LocalSet</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Task-related futures.","Returns a copy of the task-local value if the task-local …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Consumes the join error, returning the object with which …","Returns true if the error was caused by the task being …","Returns whether the <code>JoinSet</code> is empty.","Checks if the task associated with this <code>AbortHandle</code> has …","Checks if the task associated with this <code>JoinHandle</code> has …","Returns true if the error was caused by the task panicking.","Waits until one of the tasks in the set completes and …","Returns the number of tasks currently in the <code>JoinSet</code>.","Create a new <code>JoinSet</code>.","Returns a new local task set.","","","","Polls for one of the tasks in the set to complete.","Runs a future to completion on the local set, returning …","Sets a value <code>T</code> as the task-local value for the future <code>F</code>.","Aborts all tasks and waits for them to finish shutting …","Spawns a new asynchronous task, returning a <code>JoinHandle</code> for …","Spawn the provided task on the <code>JoinSet</code>, returning an …","Runs the provided closure on a thread where blocking is …","Spawn the blocking code on the blocking threadpool and …","Spawn the blocking code on the blocking threadpool of the …","Spawns a <code>!Send</code> future on the current <code>LocalSet</code>.","Spawn the provided task on the current <code>LocalSet</code> and store …","Spawns a <code>!Send</code> task onto the local task set.","Spawn the provided task on the provided <code>LocalSet</code> and store …","Spawn the provided task on the provided runtime and store …","Sets a value <code>T</code> as the task-local value for the closure <code>F</code>.","","","","","","","","","","","","","","","","","","Consumes the join error, returning the object with which …","Tries to join one of the tasks in the set that has …","Accesses the current task-local and runs the provided …","","","","","","","","","Turn off cooperative scheduling for a future. The future …","Accesses the current task-local and runs the provided …","Yields execution back to the Tokio runtime.","A future that sets a value <code>T</code> of a task local for the …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Ticks as fast as possible until caught up.","Tick at multiples of <code>period</code> from when <code>tick</code> was called, …","","A measurement of a monotonically nondecreasing clock. …","Interval returned by <code>interval</code> and <code>interval_at</code>.","Defines the behavior of an <code>Interval</code> when it misses a tick.","Skips missed ticks and tick on the next multiple of <code>period</code> …","Future returned by <code>sleep</code> and <code>sleep_until</code>.","Future returned by <code>timeout</code> and <code>timeout_at</code>.","","","","","","","","","","","","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Returns the amount of time elapsed from another instant to …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","","","","","","Returns the instant at which the future will complete.","Returns <code>MissedTickBehavior::Burst</code>.","Returns the amount of time elapsed from another instant to …","Returns the amount of time elapsed since this instant was …","","","Time error types.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a <code>tokio::time::Instant</code> from a <code>std::time::Instant</code>.","Gets a mutable reference to the underlying value in this …","Gets a reference to the underlying value in this timeout.","","Creates new <code>Interval</code> that yields with interval of <code>period</code>. …","Creates new <code>Interval</code> that yields with interval of <code>period</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes this timeout, returning the underlying value.","Convert the value into a <code>std::time::Instant</code>.","Returns <code>true</code> if <code>Sleep</code> has elapsed.","Returns the <code>MissedTickBehavior</code> strategy currently being …","Returns an instant corresponding to “now”.","","Returns the period of the interval.","","","Polls for the next instant in the interval to be reached.","Resets the interval to complete one period after the …","Resets the <code>Sleep</code> instance to a new deadline.","Resets the interval after the specified <code>std::time::Duration</code>…","Resets the interval to a <code>crate::time::Instant</code> deadline.","Resets the interval immediately.","Returns the amount of time elapsed from another instant to …","Sets the <code>MissedTickBehavior</code> strategy that should be used.","Waits until <code>duration</code> has elapsed.","Waits until <code>deadline</code> is reached.","","","","Completes when the next instant in the interval has been …","Requires a <code>Future</code> to complete before the specified …","Requires a <code>Future</code> to complete before the specified instant …","","","","","","","","","","","","","","","","","","Errors returned by <code>Timeout</code>.","Errors encountered by the timer implementation.","Creates an error representing a timer at capacity.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an error representing a misconfigured timer.","Returns <code>true</code> if the error was caused by the timer being at …","Returns <code>true</code> if the error was caused by the timer being …","Returns <code>true</code> if the error was caused by the timer being …","Creates an error representing a shutdown timer.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,1,5,1,5,5,0,0,0,0,0,0,0,0,0,1,5,5,0,1,2,2,2,5,1,5,1,5,2,1,5,32,34,35,18,27,36,37,19,38,39,6,20,10,2,1,5,32,34,35,18,27,36,37,19,38,39,6,20,10,6,10,2,12,12,2,2,1,5,1,5,5,15,17,17,18,19,6,20,10,0,0,0,27,0,0,1,5,17,17,2,2,29,29,2,1,5,32,34,35,18,27,36,37,19,38,39,6,20,10,2,1,5,32,34,35,18,27,36,37,19,38,39,6,20,20,20,10,19,39,6,20,10,19,6,20,10,19,39,6,20,10,2,2,2,2,2,2,1,5,32,34,35,18,27,36,37,19,38,39,6,20,10,35,19,39,6,20,10,5,1,5,32,34,1,5,5,1,5,1,5,5,9,9,34,35,18,27,6,20,10,0,19,17,17,2,6,20,10,39,38,5,44,6,20,10,15,18,19,6,20,10,9,34,35,18,27,37,6,20,10,39,38,11,32,35,18,27,36,19,6,20,10,9,34,35,18,27,37,6,20,10,9,34,35,18,27,37,6,20,10,9,9,34,35,18,27,6,20,10,2,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,17,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,17,17,35,35,35,2,2,1,0,49,49,49,49,2,19,29,29,0,0,17,17,44,6,20,10,49,49,5,2,12,12,1,5,2,1,5,32,34,35,18,27,36,37,19,38,39,6,20,10,2,1,5,32,34,35,18,27,36,37,19,38,39,6,20,10,2,1,5,32,34,35,18,27,36,37,19,38,39,6,20,10,2,2,0,32,6,20,10,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,35,35,35,0,0,0,0,63,63,63,63,63,69,70,71,63,69,70,71,69,70,69,70,63,63,69,70,71,63,69,70,71,69,70,70,63,70,63,69,70,63,69,70,71,63,63,63,63,63,63,63,63,63,69,70,63,69,70,63,69,70,71,63,69,70,71,69,70,63,69,70,71,63,63,63,0,0,0,0,0,0,0,0,0,73,76,73,79,74,80,81,76,82,77,73,79,74,80,81,76,82,77,74,80,81,77,73,79,80,81,76,82,79,80,73,79,74,80,81,76,82,77,73,79,74,80,81,76,82,77,80,79,74,80,81,82,77,82,79,80,73,79,74,80,81,76,82,77,73,79,74,80,81,76,82,77,79,82,73,74,80,81,76,77,79,73,79,74,80,81,76,82,77,79,82,74,77,73,74,80,81,76,77,74,77,80,80,79,80,80,79,74,79,82,73,79,74,80,81,76,77,0,80,80,80,82,82,79,79,79,74,81,77,74,80,80,74,80,81,77,77,73,76,74,77,74,80,80,74,77,74,77,80,81,80,81,80,81,80,81,80,81,80,81,74,77,74,77,74,77,74,77,74,80,81,77,74,80,81,77,80,81,80,81,80,81,79,80,81,79,79,80,81,79,80,81,80,79,79,74,80,80,80,79,74,79,79,79,79,79,80,73,74,80,81,74,77,79,74,80,81,76,77,0,79,80,73,73,79,74,74,80,80,81,81,76,76,82,77,77,73,79,74,80,81,76,82,77,74,80,81,77,80,80,74,77,74,77,74,77,80,81,80,81,80,81,80,81,80,81,80,81,74,77,74,77,73,74,80,73,79,74,80,81,76,82,77,81,0,74,80,81,77,0,0,0,0,0,103,104,92,93,103,104,92,93,108,103,104,92,93,108,93,103,104,92,93,108,108,93,103,104,92,93,108,103,104,92,93,108,104,93,103,104,92,93,103,92,103,104,92,93,104,93,103,92,103,92,104,93,104,93,104,93,103,92,103,104,92,93,92,93,108,103,104,92,93,108,103,104,92,93,108,103,92,103,92,103,92,104,93,104,93,103,104,92,93,108,104,93,0,0,0,0,0,0,0,78,105,106,94,95,78,105,106,94,95,109,101,78,105,106,94,95,109,101,101,101,95,101,78,105,106,94,95,109,109,101,95,78,105,106,94,95,109,101,101,0,101,78,105,106,94,95,109,101,78,106,95,105,106,94,95,105,106,94,95,101,0,0,106,95,105,94,106,95,106,95,106,95,105,94,105,106,94,95,94,95,101,109,78,105,106,94,95,109,101,78,105,106,94,95,109,101,105,94,105,94,105,94,106,95,106,95,78,105,106,94,95,109,101,101,0,106,95,0,0,0,114,115,114,115,116,114,115,116,114,115,116,116,116,116,114,115,116,114,115,114,115,114,115,114,115,114,115,116,114,115,114,115,114,115,114,116,116,116,0,114,115,115,114,114,114,114,116,115,114,115,116,116,114,115,116,114,115,115,115,115,114,114,116,114,115,116,114,0,124,0,0,124,0,0,0,119,121,122,119,123,125,121,124,122,119,123,125,121,124,122,119,119,119,121,122,122,122,119,121,124,122,122,119,123,125,125,121,124,122,119,123,125,121,124,122,121,122,119,123,125,121,124,125,125,122,122,122,122,122,122,122,119,121,121,119,121,119,121,122,122,122,122,119,125,119,122,119,123,125,121,124,122,119,123,125,121,124,122,119,123,125,121,124,122,0,0,0,0,0,0,0,0,131,129,132,129,133,131,135,129,134,136,132,133,140,131,135,129,134,136,132,133,140,132,133,132,131,129,134,132,133,133,131,135,135,129,134,136,132,133,131,135,129,134,136,132,133,140,0,136,131,135,129,134,136,132,133,140,129,133,140,135,135,132,131,129,135,132,132,132,133,129,133,140,132,133,136,132,0,132,0,132,132,0,132,133,132,132,136,135,131,135,129,134,136,132,133,140,131,135,129,134,136,132,133,140,135,132,136,131,135,129,134,136,132,133,140,0,136,0,0,141,141,141,141,141,141,141,141,141,141,141,143,143,0,0,0,0,143,0,0,142,142,142,143,145,146,144,142,143,145,146,144,142,142,142,142,143,142,143,142,144,143,142,142,142,143,0,142,143,145,146,144,142,142,143,145,146,144,142,146,146,142,0,0,142,143,145,146,144,146,144,146,142,144,145,142,142,145,146,144,145,145,144,145,145,145,142,145,0,0,142,142,142,145,0,0,142,143,142,143,145,146,144,142,143,145,146,144,142,143,145,146,144,0,0,148,148,149,148,149,148,148,149,148,148,149,149,148,149,148,149,148,148,148,148,148,148,148,149,148,149,148,149,148,149],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[2,3],4],[[2,3],4],[[2,3],4],[[5,5],5],[[1,1],1],[[5,5],5],[[1,1],4],[[5,5],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[-1]]],[[8,[7]]],9],[[[10,[-1]]],[[8,[7]]],11],[2,3],[[12,-1],[[0,[12,-1]]],11],[[12,-1],[[0,[12,-1]]],11],[2,13],[2,4],[1,1],[5,5],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[5,5],14],[[[16,[15]],3],4],[[17,3],4],[[17,3],4],[[[16,[18]],3],4],[[[16,[[19,[-1]]]],3],4,15],[[[16,[[6,[-1]]]],3],4,[9,15]],[[[16,[[20,[-1]]]],3],4,[11,9]],[[[16,[[10,[-1]]]],3],4,11],[[-1,-2],[[22,[21]]],[11,23,24],[9,23,24]],[[-1,-2],[[26,[[4,[21,21]],25]]],[11,9,23,24],[11,9,23,24]],[[-1,-2],[[22,[21]]],[15,23,24],[9,23,24]],[27,4],[3,[[4,[27,27]]]],[[],18],[[1,1],28],[[5,5],28],[17,[[0,[17]]]],[17,[[0,[17]]]],[2,[[8,[7]]]],[2,[[8,[7]]]],[29,[[0,[29]]]],[29,[[0,[29]]]],[[2,30],31],[[1,30],31],[[5,30],31],[[[32,[-1]],30],31,33],[[[34,[-1]],30],31,33],[[[35,[-1,-2]],30],31,33,33],[[18,30],31],[[27,30],31],[[36,30],31],[[37,30],31],[[[19,[-1]],30],31,33],[[[38,[-1]],30],31,33],[[[39,[-1]],30],31,33],[[[6,[-1]],30],31,33],[[[20,[-1]],30],31,33],[[[10,[-1]],30],31,33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[10,[[6,[-1]]]]],[[20,[-1]]],[]],[[[6,[[10,[-1]]]]],[[20,[-1]]],[]],[-1,-1,[]],[[[19,[-1]]],-1,11],[[[39,[-1]]],-1,[15,23]],[[[6,[-1]]],-1,9],[[[20,[-1]]],-1,[11,9]],[[[10,[-1]]],-1,11],[[[16,[[19,[-1]]]]],[[16,[-1]]],11],[[[16,[[6,[-1]]]]],[[16,[-1]]],9],[[[16,[[20,[-1]]]]],[[16,[-1]]],[11,9]],[[[16,[[10,[-1]]]]],[[16,[-1]]],11],[[[19,[-1]]],-1,11],[[[39,[-1]]],-1,[15,23]],[[[6,[-1]]],-1,9],[[[20,[-1]]],-1,[11,9]],[[[10,[-1]]],-1,11],[2,[[8,[7]]]],[[2,3],[[8,[7]]]],[2,[[8,[7]]]],[2,[[8,[7]]]],[2,[[8,[[40,[7]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],[[4,[-1,-2]]],11,9],[[[19,[-1]]],-1,11],[[[39,[-1]]],-1,[15,23]],[[[6,[-1]]],-1,9],[[[20,[-1]]],-1,[11,9]],[[[10,[-1]]],-1,11],[5,28],[1,28],[5,28],[[[32,[-1]],[34,[-1]]],28,[]],[[[34,[-1]],[32,[-1]]],28,[]],[1,28],[5,28],[5,28],[1,28],[5,28],[1,28],[5,28],[5,28],[9,28],[9,28],[[[34,[-1]]],28,9],[[[35,[-1,-2]]],28,[],9],[18,28],[27,28],[[[6,[-1]]],28,9],[[[20,[-1]]],28,[11,9]],[[[10,[-1]]],28,[11,9]],[[-1,-2],[[35,[-1,-2]]],11,9],[[[19,[-1]]],21,11],[17,[[39,[17]]]],[17,[[39,[17]]]],[[[8,[7]]],2],[-1,[[6,[-1]]],9],[-1,[[20,[-1]]],[11,9]],[-1,[[10,[-1]]],11],[[[39,[-1]]],[[22,[[42,[41]]]]],[15,23]],[[[38,[-1]]],[[22,[[42,[[43,[7]]]]]]],[15,23]],[[5,5],[[42,[14]]]],[[[16,[44]],45],[[46,[[22,[21]]]]]],[[[16,[[6,[-1]]]],45],[[46,[[22,[21]]]]],[9,44]],[[[16,[[20,[-1]]]],45],[[46,[[22,[21]]]]],[11,9,44]],[[[16,[[10,[-1]]]],45],[[46,[[22,[21]]]]],[11,44]],[[[16,[15]],45],[[46,[[22,[[8,[7]]]]]]]],[[[16,[18]],45],[[46,[[22,[[8,[7]]]]]]]],[[[16,[[19,[-1]]]],45],[[46,[[22,[[8,[7]]]]]]],15],[[[16,[[6,[-1]]]],45],[[46,[[22,[[8,[7]]]]]]],[9,15]],[[[16,[[20,[-1]]]],45],[[46,[[22,[[8,[7]]]]]]],[11,9]],[[[16,[[10,[-1]]]],45],[[46,[[22,[[8,[7]]]]]]],11],[[[16,[9]],45],[[46,[[26,[4,25]]]]]],[[[16,[[34,[-1]]]],45],[[46,[[26,[4,25]]]]],9],[[[16,[[35,[-1,-2]]]],45],[[46,[[26,[4,25]]]]],[],9],[[[16,[18]],45],[[46,[[26,[4,25]]]]]],[[[16,[27]],45],[[46,[[22,[4]]]]]],[[[16,[37]],45],[[46,[[26,[4,25]]]]]],[[[16,[[6,[-1]]]],45],[[46,[[22,[4]]]]],9],[[[16,[[20,[-1]]]],45],[[46,[[22,[4]]]]],[11,9]],[[[16,[[10,[-1]]]],45],[[46,[[22,[4]]]]],[11,9]],[[[16,[[39,[-1]]]],45],[[46,[[22,[[42,[41]]]]]]],15],[[[16,[[38,[-1]]]],45],[[46,[[22,[[42,[[43,[7]]]]]]]]],15],[[[16,[11]],45,2],[[46,[[22,[4]]]]]],[[[16,[[32,[-1]]]],45,2],[[46,[[22,[4]]]]],11],[[[16,[[35,[-1,-2]]]],45,2],[[46,[[26,[4,25]]]]],11,[]],[[[16,[18]],45,2],[[46,[[22,[4]]]]]],[[[16,[27]],45,2],[[46,[[22,[4]]]]]],[[[16,[36]],45,2],[[46,[[22,[4]]]]]],[[[16,[[19,[-1]]]],45,2],[[46,[[26,[4,25]]]]],11],[[[16,[[6,[-1]]]],45,2],[[46,[[22,[4]]]]],[9,11]],[[[16,[[20,[-1]]]],45,2],[[46,[[22,[4]]]]],[11,9]],[[[16,[[10,[-1]]]],45,2],[[46,[[22,[4]]]]],11],[[[16,[9]],45],[[46,[[26,[4,25]]]]]],[[[16,[[34,[-1]]]],45],[[46,[[26,[4,25]]]]],9],[[[16,[[35,[-1,-2]]]],45],[[46,[[26,[4,25]]]]],[],9],[[[16,[18]],45],[[46,[[26,[4,25]]]]]],[[[16,[27]],45],[[46,[[22,[4]]]]]],[[[16,[37]],45],[[46,[[26,[4,25]]]]]],[[[16,[[6,[-1]]]],45],[[46,[[22,[4]]]]],9],[[[16,[[20,[-1]]]],45],[[46,[[22,[4]]]]],[11,9]],[[[16,[[10,[-1]]]],45],[[46,[[22,[4]]]]],[11,9]],[[[16,[9]],45,[8,[7]]],[[46,[[26,[3,25]]]]]],[[[16,[[34,[-1]]]],45,[8,[7]]],[[46,[[26,[3,25]]]]],9],[[[16,[[35,[-1,-2]]]],45,[8,[7]]],[[46,[[26,[3,25]]]]],[],9],[[[16,[18]],45,[8,[7]]],[[46,[[22,[3]]]]]],[[[16,[27]],45,[8,[7]]],[[46,[[22,[3]]]]]],[[[16,[37]],45,[8,[7]]],[[46,[[26,[3,25]]]]]],[[[16,[[6,[-1]]]],45,[8,[7]]],[[46,[[22,[3]]]]],9],[[[16,[[20,[-1]]]],45,[8,[7]]],[[46,[[22,[3]]]]],[11,9]],[[[16,[[10,[-1]]]],45,[8,[7]]],[[46,[[22,[3]]]]],[11,9]],[[[16,[9]],45,[8,[47]]],[[46,[[26,[3,25]]]]]],[[[16,[9]],45,[8,[47]]],[[46,[[26,[3,25]]]]]],[[[16,[[34,[-1]]]],45,[8,[47]]],[[46,[[26,[3,25]]]]],9],[[[16,[[35,[-1,-2]]]],45,[8,[47]]],[[46,[[26,[3,25]]]]],[],9],[[[16,[18]],45,[8,[47]]],[[46,[[26,[3,25]]]]]],[[[16,[27]],45,[8,[47]]],[[46,[[26,[3,25]]]]]],[[[16,[[6,[-1]]]],45,[8,[47]]],[[46,[[22,[3]]]]],9],[[[16,[[20,[-1]]]],45,[8,[47]]],[[46,[[22,[3]]]]],[11,9]],[[[16,[[10,[-1]]]],45,[8,[47]]],[[46,[[22,[3]]]]],[11,9]],[[2,[8,[7]]],4],[[12,[8,[7]]],[[0,[12]]]],[[12,[8,[7]]],[[0,[12]]]],[[12,-1],[[0,[12,-1]]],[48,24]],[[12,-1],[[0,[12,-1]]],[48,24]],[[12,[8,[7]]],[[0,[12]]]],[[12,[8,[7]]],[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[[17,41],[[0,[17]]]],[[17,41],[[0,[17]]]],[[12,[43,[7]]],[[0,[12]]]],[[12,[43,[7]]],[[0,[12]]]],[[12,41],[[0,[12]]]],[[12,41],[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[12,[[0,[12]]]],[[17,7,[43,[7]]],[[0,[17]]]],[[17,7,[43,[7]]],[[0,[17]]]],[[[35,[-1,-2]]],-1,11,9],[[[35,[-1,-2]]],-1,11,9],[[[16,[[35,[-1,-2]]]]],[[16,[-1]]],11,9],[2,3],[2,3],[[1,1],[[42,[1]]]],[7,36],[49,[[0,[49]]]],[49,[[0,[49]]]],[[49,50],[[0,[49]]]],[[49,50],[[0,[49]]]],[[2,3],4],[[[19,[-1]],21],4,11],[29,[[0,[29]]]],[29,[[0,[29]]]],[[],37],[-1,[[4,[[32,[-1]],[34,[-1]]]]],[11,9]],[[17,7],[[38,[17]]]],[[17,7],[[38,[17]]]],[[[16,[44]],50],[[22,[4]]]],[[[16,[[6,[-1]]]],50],[[22,[4]]],[9,44]],[[[16,[[20,[-1]]]],50],[[22,[4]]],[11,9,44]],[[[16,[[10,[-1]]]],50],[[22,[4]]],[11,44]],[49,[[0,[49]]]],[49,[[0,[49]]]],[[5,5],5],[[2,3],2],[[12,21],[[19,[12]]]],[[12,21],[[19,[12]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[2,[[8,[[40,[7]]]]]],[[[8,[[40,[7]]]]],2],0,[[[32,[-1]],[34,[-1]]],-1,23],[[3,-1],[[6,[-1]]],9],[[3,3,-1],[[20,[-1]]],[11,9]],[[3,-1],[[10,[-1]]],11],[[29,[8,[7]]],[[0,[29]]]],[[29,[8,[7]]],[[0,[29]]]],[[29,[8,[7]]],[[0,[29]]]],[[29,[8,[7]]],[[0,[29]]]],[[29,-1],[[0,[29,-1]]],52],[[29,-1],[[0,[29,-1]]],52],[[29,-1],[[0,[29,-1]]],52],[[29,-1],[[0,[29,-1]]],52],[[29,53],[[0,[29]]]],[[29,53],[[0,[29]]]],[[29,53],[[0,[29]]]],[[29,53],[[0,[29]]]],[[29,54],[[0,[29]]]],[[29,54],[[0,[29]]]],[[29,54],[[0,[29]]]],[[29,54],[[0,[29]]]],[[29,55],[[0,[29]]]],[[29,55],[[0,[29]]]],[[29,55],[[0,[29]]]],[[29,55],[[0,[29]]]],[[29,56],[[0,[29]]]],[[29,56],[[0,[29]]]],[[29,56],[[0,[29]]]],[[29,56],[[0,[29]]]],[[29,57],[[0,[29]]]],[[29,57],[[0,[29]]]],[[29,57],[[0,[29]]]],[[29,57],[[0,[29]]]],[[29,58],[[0,[29]]]],[[29,58],[[0,[29]]]],[[29,58],[[0,[29]]]],[[29,58],[[0,[29]]]],[[29,59],[[0,[29]]]],[[29,59],[[0,[29]]]],[[29,60],[[0,[29]]]],[[29,60],[[0,[29]]]],[[29,60],[[0,[29]]]],[[29,60],[[0,[29]]]],[[29,61],[[0,[29]]]],[[29,61],[[0,[29]]]],[[29,61],[[0,[29]]]],[[29,61],[[0,[29]]]],[[29,62],[[0,[29]]]],[[29,62],[[0,[29]]]],[[29,62],[[0,[29]]]],[[29,62],[[0,[29]]]],[[29,21],[[0,[29]]]],[[29,21],[[0,[29]]]],[[29,21],[[0,[29]]]],[[29,21],[[0,[29]]]],[[29,7],[[0,[29]]]],[[29,7],[[0,[29]]]],[[29,[8,[47]]],[[0,[29]]]],[[29,[8,[47]]],[[0,[29]]]],[[[35,[-1,-2]]],-2,11,9],[[[35,[-1,-2]]],-2,11,9],[[[16,[[35,[-1,-2]]]]],[[16,[-2]]],11,9],0,0,0,0,[[[63,[-1]]],64,65],[[[63,[-1]]],66,65],[[[63,[-1]],1,-3],[[22,[-2]]],65,[],[[68,[-1],[[67,[[22,[-2]]]]]]]],[[[63,[-1]],1,-3],[[22,[-2]]],65,[],[[68,[-1],[[67,[[22,[-2]]]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[69,[-1]]],4,65],[[[70,[-1]]],4,65],[[[69,[-1]],5],4,65],[[[70,[-1]],5],4,65],[[[63,[-1]]],4,65],[[[63,[-1]],30],31,[33,65]],[[[69,[-1]],30],31,[33,65]],[[[70,[-1]],30],31,[33,65]],[[71,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[69,[-1]]],-1,65],[[[70,[-1]]],-1,65],[[[70,[-1]]],-1,65],[[[63,[-1]]],-1,65],[[[70,[-1]]],[[63,[-1]]],65],[[[63,[-1]]],-1,65],[[[69,[-1]]],[[63,[-1]]],65],[[[70,[-1]]],[[63,[-1]]],65],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1]]],-1,65],[-1,[[22,[[63,[-1]]]]],[65,65]],[[[63,[-1]],45],[[46,[[22,[[69,[-1]]]]]]],65],[[[63,[-1]],45],[[46,[[22,[[70,[-1]]]]]]],65],[[[63,[-1]],45],[[46,[[22,[[69,[-1]]]]]]],65],[[[63,[-1]],45],[[46,[[22,[[70,[-1]]]]]]],65],[[[63,[-1]]],[[22,[[69,[-1]]]]],65],[[[63,[-1]]],[[22,[[70,[-1]]]]],65],[[[63,[-1]],1],[[22,[[69,[-1]]]]],65],[[[69,[-1]]],5,65],[[[70,[-1]]],5,65],[[[63,[-1]],1],[[22,[[70,[-1]]]]],65],[[[69,[-1]]],4,65],[[[70,[-1]]],4,65],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[[[69,[-1]],-3],[[26,[[22,[-2]],71]]],65,[],[[72,[[63,[-1]]],[[67,[[22,[-2]]]]]]]],[[[70,[-1]],-3],[[26,[[22,[-2]],71]]],65,[],[[72,[[63,[-1]]],[[67,[[22,[-2]]]]]]]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[[-1,1],[[22,[[63,[-1]]]]],[65,65]],[[[63,[-1]]],[[22,[[69,[-1]]]]],65],[[[63,[-1]]],[[22,[[70,[-1]]]]],65],0,0,0,0,0,0,0,0,0,[73,[[22,[[4,[74,75]]]]]],[76,[[22,[[4,[77,78]]]]]],[73,64],[79,64],[74,64],[80,64],[81,64],[76,64],[82,64],[77,64],[73,66],[79,66],[74,66],[80,66],[81,66],[76,66],[82,66],[77,66],[[74,1,-2],[[22,[-1]]],[],[[68,[],[[67,[[22,[-1]]]]]]]],[[80,1,-2],[[22,[-1]]],[],[[68,[],[[67,[[22,[-1]]]]]]]],[[81,1,-2],[[22,[-1]]],[],[[68,[],[[67,[[22,[-1]]]]]]]],[[77,1,-2],[[22,[-1]]],[],[[68,[],[[67,[[22,[-1]]]]]]]],[-1,[[22,[73]]],83],[[79,75],[[22,[4]]]],[-1,[[22,[80]]],83],[-1,[[22,[81]]],[[85,[84]]]],[-1,[[22,[76]]],[[85,[84]]]],[[82,-1],[[22,[4]]],[[85,[84]]]],[[79,[42,[[8,[7]]]]],[[22,[4]]]],[[80,[42,[[8,[7]]]]],[[22,[4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[80,[[22,[28]]]],[[79,75],[[22,[74]]]],[-1,[[22,[74]]],83],[[80,-1],[[22,[4]]],83],[[81,-1],[[22,[4]]],[[85,[84]]]],[[82,-1],[[22,[77]]],[[85,[84]]]],[-1,[[22,[77]]],[[85,[84]]]],[82,[[22,[81]]]],[79,[[22,[[42,[[43,[7]]]]]]]],[80,[[22,[[42,[[43,[7]]]]]]]],[[73,30],31],[[79,30],31],[[74,30],31],[[80,30],31],[[81,30],31],[[76,30],31],[[82,30],31],[[77,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[66,79],[66,82],[86,[[22,[73]]]],[87,[[22,[74]]]],[88,[[22,[80]]]],[89,[[22,[81]]]],[90,[[22,[76]]]],[91,[[22,[77]]]],[87,79],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[79,66],[82,66],[74,[[4,[92,93]]]],[77,[[4,[94,95]]]],[73,[[22,[86]]]],[74,[[22,[87]]]],[80,[[22,[88]]]],[81,[[22,[89]]]],[76,[[22,[90]]]],[77,[[22,[91]]]],[74,28],[77,28],[[80,96,96],[[22,[4]]]],[[80,97,62],[[22,[4]]]],[79,[[22,[28]]]],[[80,96,96],[[22,[4]]]],[[80,97,62],[[22,[4]]]],[79,[[22,[[42,[98]]]]]],[74,[[22,[[42,[98]]]]]],[[79,62],[[22,[73]]]],[[82,62],[[22,[76]]]],[73,[[22,[75]]]],[79,[[22,[75]]]],[74,[[22,[75]]]],[80,[[22,[75]]]],[81,[[22,[78]]]],[76,[[22,[78]]]],[77,[[22,[78]]]],[-1,[[22,[[0,[[100,[],[[99,[75]]]]]]]]],83],[80,[[22,[28]]]],[80,[[22,[28]]]],[80,[[22,[62]]]],[[],[[22,[82]]]],[[],[[22,[82]]]],[[],[[22,[79]]]],[[],[[22,[79]]]],[79,[[22,[28]]]],[74,[[22,[28]]]],[[],[[22,[[4,[81,81]]]]]],[[],[[22,[[4,[77,77]]]]]],[[74,[8,[7]]],[[22,[3]]]],[[80,[8,[7]]],[[22,[[4,[3,75]]]]]],[80,[[22,[75]]]],[74,[[22,[75]]]],[80,[[22,[75]]]],[81,[[22,[78]]]],[77,[[22,[78]]]],[77,[[22,[101]]]],[[73,45],[[46,[[22,[[4,[74,75]]]]]]]],[[76,45],[[46,[[22,[[4,[77,78]]]]]]]],[[[16,[74]],45],[[46,[[22,[4]]]]]],[[[16,[77]],45],[[46,[[22,[4]]]]]],[[74,45,2],[[46,[[22,[3]]]]]],[[80,45,2],[[46,[[22,[75]]]]]],[[80,45],[[46,[[22,[75]]]]]],[[[16,[74]],45,2],[[46,[[22,[4]]]]]],[[[16,[77]],45,2],[[46,[[22,[4]]]]]],[[74,45],[[46,[[22,[4]]]]]],[[77,45],[[46,[[22,[4]]]]]],[[80,45,2],[[46,[[22,[4]]]]]],[[81,45,2],[[46,[[22,[4]]]]]],[[80,45,2],[[46,[[22,[75]]]]]],[[81,45,2],[[46,[[22,[78]]]]]],[[80,45],[[46,[[22,[4]]]]]],[[81,45],[[46,[[22,[4]]]]]],[[80,45,[8,[7]]],[[46,[[22,[3]]]]]],[[81,45,[8,[7]]],[[46,[[22,[3]]]]]],[[80,45],[[46,[[22,[4]]]]]],[[81,45],[[46,[[22,[4]]]]]],[[80,45,[8,[7]],75],[[46,[[22,[3]]]]]],[[81,45,[8,[7]],-1],[[46,[[22,[3]]]]],[[85,[84]]]],[[[16,[74]],45],[[46,[[22,[4]]]]]],[[[16,[77]],45],[[46,[[22,[4]]]]]],[[[16,[74]],45,[8,[7]]],[[46,[[22,[3]]]]]],[[[16,[77]],45,[8,[7]]],[[46,[[22,[3]]]]]],[[74,45],[[46,[[22,[4]]]]]],[[77,45],[[46,[[22,[4]]]]]],[[[16,[74]],45,[8,[47]]],[[46,[[22,[3]]]]]],[[[16,[77]],45,[8,[47]]],[[46,[[22,[3]]]]]],[74,[[22,[4]]]],[80,[[22,[4]]]],[81,[[22,[4]]]],[77,[[22,[4]]]],[[74,1],[[22,[5]]]],[[80,1],[[22,[5]]]],[[81,1],[[22,[5]]]],[[77,1],[[22,[5]]]],[[80,[8,[7]]],[[22,[3]]]],[[81,[8,[7]]],[[22,[3]]]],[[80,-1],[[22,[3]]],48],[[81,-1],[[22,[3]]],48],[[80,-1],[[22,[[4,[3,75]]]]],48],[[81,-1],[[22,[[4,[3,78]]]]],48],[79,[[22,[62]]]],[[80,[8,[7]]],[[22,[[4,[3,75]]]]]],[[81,[8,[7]]],[[22,[[4,[3,78]]]]]],[79,[[22,[28]]]],[79,[[22,[28]]]],[[80,[8,[7]]],[[22,[3]]]],[[81,[8,[7]]],[[22,[3]]]],[79,[[22,[62]]]],[[80,[8,[7]],-1],[[22,[3]]],83],[[81,[8,[7]],-1],[[22,[3]]],[[85,[84]]]],[[80,28],[[22,[4]]]],[[79,28],[[22,[4]]]],[[79,[42,[98]]],[[22,[4]]]],[[74,[42,[98]]],[[22,[4]]]],[[80,28],[[22,[4]]]],[[80,28],[[22,[4]]]],[[80,62],[[22,[4]]]],[[79,28],[[22,[4]]]],[[74,28],[[22,[4]]]],[[79,62],[[22,[4]]]],[[79,28],[[22,[4]]]],[[79,28],[[22,[4]]]],[[79,62],[[22,[4]]]],[[79,62],[[22,[4]]]],[[80,62],[[22,[4]]]],[[73,62],[[22,[4]]]],[[74,62],[[22,[4]]]],[[80,62],[[22,[4]]]],[[81,102],[[22,[4]]]],[74,[[4,[103,104]]]],[77,[[4,[105,106]]]],[79,[[22,[[42,[25]]]]]],[74,[[22,[[42,[25]]]]]],[80,[[22,[[42,[25]]]]]],[81,[[22,[[42,[25]]]]]],[76,[[22,[[42,[25]]]]]],[77,[[22,[[42,[25]]]]]],0,[79,[[22,[62]]]],[80,[[22,[62]]]],[86,[[26,[73,-1]]],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[87,[[26,[74,-1]]],[]],[-1,[[26,[-2]]],[],[]],[88,[[26,[80,-1]]],[]],[89,[[26,[81,-1]]],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[90,[[22,[76]]]],[-1,[[26,[-2]]],[],[]],[91,[[22,[77]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[[74,1,-2],[[22,[-1]]],[],[[72,[],[[67,[[22,[-1]]]]]]]],[[80,1,-2],[[22,[-1]]],[],[[72,[],[[67,[[22,[-1]]]]]]]],[[81,1,-2],[[22,[-1]]],[],[[72,[],[[67,[[22,[-1]]]]]]]],[[77,1,-2],[[22,[-1]]],[],[[72,[],[[67,[[22,[-1]]]]]]]],[[80,[8,[7]]],[[22,[[4,[3,75]]]]]],[80,[[22,[75]]]],[[74,[8,[7]]],[[22,[3]]]],[[77,[8,[7]]],[[22,[3]]]],[[74,-1],[[22,[3]]],48],[[77,-1],[[22,[3]]],48],[[74,[8,[107]]],[[22,[3]]]],[[77,[8,[107]]],[[22,[3]]]],[[80,[8,[7]]],[[22,[3]]]],[[81,[8,[7]]],[[22,[3]]]],[[80,-1],[[22,[3]]],48],[[81,-1],[[22,[3]]],48],[[80,-1],[[22,[[4,[3,75]]]]],48],[[81,-1],[[22,[[4,[3,78]]]]],48],[[80,[8,[7]]],[[22,[[4,[3,75]]]]]],[[81,[8,[7]]],[[22,[[4,[3,78]]]]]],[[80,[8,[7]]],[[22,[3]]]],[[81,[8,[7]]],[[22,[3]]]],[[80,[8,[7]],75],[[22,[3]]]],[[81,[8,[7]],-1],[[22,[3]]],[[85,[84]]]],[[74,[8,[7]]],[[22,[3]]]],[[77,[8,[7]]],[[22,[3]]]],[[74,[8,[47]]],[[22,[3]]]],[[77,[8,[47]]],[[22,[3]]]],[73,[[22,[62]]]],[74,[[22,[62]]]],[80,[[22,[62]]]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[[],[[22,[81]]]],0,[74,[[22,[4]]]],[80,[[22,[4]]]],[81,[[22,[4]]]],[77,[[22,[4]]]],0,0,0,0,0,[103,74],[104,74],[92,74],[93,74],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[93,4],[[103,30],31],[[104,30],31],[[92,30],31],[[93,30],31],[[108,30],31],[[108,30],31],[93,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[104,28],[93,28],[103,[[22,[75]]]],[104,[[22,[75]]]],[92,[[22,[75]]]],[93,[[22,[75]]]],[[103,[8,[7]]],[[22,[3]]]],[[92,[8,[7]]],[[22,[3]]]],[103,[[22,[75]]]],[104,[[22,[75]]]],[92,[[22,[75]]]],[93,[[22,[75]]]],[[[16,[104]],45],[[46,[[22,[4]]]]]],[[[16,[93]],45],[[46,[[22,[4]]]]]],[[103,45,2],[[46,[[22,[3]]]]]],[[92,45,2],[[46,[[22,[3]]]]]],[[[16,[103]],45,2],[[46,[[22,[4]]]]]],[[[16,[92]],45,2],[[46,[[22,[4]]]]]],[[[16,[104]],45],[[46,[[22,[4]]]]]],[[[16,[93]],45],[[46,[[22,[4]]]]]],[[[16,[104]],45,[8,[7]]],[[46,[[22,[3]]]]]],[[[16,[93]],45,[8,[7]]],[[46,[[22,[3]]]]]],[[[16,[104]],45,[8,[47]]],[[46,[[22,[3]]]]]],[[[16,[93]],45,[8,[47]]],[[46,[[22,[3]]]]]],[103,[[22,[4]]]],[92,[[22,[4]]]],[[103,1],[[22,[5]]]],[[104,1],[[22,[5]]]],[[92,1],[[22,[5]]]],[[93,1],[[22,[5]]]],[[92,93],[[26,[74,108]]]],[[93,92],[[26,[74,108]]]],[-1,41,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[[103,[8,[7]]],[[22,[3]]]],[[92,[8,[7]]],[[22,[3]]]],[[103,-1],[[22,[3]]],48],[[92,-1],[[22,[3]]],48],[[103,[8,[107]]],[[22,[3]]]],[[92,[8,[107]]],[[22,[3]]]],[[104,[8,[7]]],[[22,[3]]]],[[93,[8,[7]]],[[22,[3]]]],[[104,[8,[47]]],[[22,[3]]]],[[93,[8,[47]]],[[22,[3]]]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[104,[[22,[4]]]],[93,[[22,[4]]]],0,0,0,0,0,0,0,[78,[[42,[84]]]],[105,77],[106,77],[94,77],[95,77],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[101,101],[[-1,-2],4,[],[]],[95,4],[[101,101],28],[[78,30],31],[[105,30],31],[[106,30],31],[[94,30],31],[[95,30],31],[[109,30],31],[[109,30],31],[[101,30],31],[95,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[101,110],0,[[101,-1],4,111],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[78,28],[106,28],[95,28],[105,[[22,[78]]]],[106,[[22,[78]]]],[94,[[22,[78]]]],[95,[[22,[78]]]],[105,[[22,[78]]]],[106,[[22,[78]]]],[94,[[22,[78]]]],[95,[[22,[78]]]],[101,[[42,[112]]]],0,0,[[[16,[106]],45],[[46,[[22,[4]]]]]],[[[16,[95]],45],[[46,[[22,[4]]]]]],[[[16,[105]],45,2],[[46,[[22,[4]]]]]],[[[16,[94]],45,2],[[46,[[22,[4]]]]]],[[[16,[106]],45],[[46,[[22,[4]]]]]],[[[16,[95]],45],[[46,[[22,[4]]]]]],[[[16,[106]],45,[8,[7]]],[[46,[[22,[3]]]]]],[[[16,[95]],45,[8,[7]]],[[46,[[22,[3]]]]]],[[[16,[106]],45,[8,[47]]],[[46,[[22,[3]]]]]],[[[16,[95]],45,[8,[47]]],[[46,[[22,[3]]]]]],[105,[[22,[4]]]],[94,[[22,[4]]]],[[105,1],[[22,[5]]]],[[106,1],[[22,[5]]]],[[94,1],[[22,[5]]]],[[95,1],[[22,[5]]]],[[94,95],[[26,[77,109]]]],[[95,94],[[26,[77,109]]]],[-1,-2,[],[]],[-1,41,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[[105,[8,[7]]],[[22,[3]]]],[[94,[8,[7]]],[[22,[3]]]],[[105,-1],[[22,[3]]],48],[[94,-1],[[22,[3]]],48],[[105,[8,[107]]],[[22,[3]]]],[[94,[8,[107]]],[[22,[3]]]],[[106,[8,[7]]],[[22,[3]]]],[[95,[8,[7]]],[[22,[3]]]],[[106,[8,[47]]],[[22,[3]]]],[[95,[8,[47]]],[[22,[3]]]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[101,113],0,[106,[[22,[4]]]],[95,[[22,[4]]]],0,0,0,[114,64],[115,64],[114,66],[115,66],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,116],[[-1,-2],4,[],[]],[[],116],[[116,30],31],[[114,30],31],[[115,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[117,[[22,[114]]]],[117,[[22,[115]]]],[117,[[22,[114]]]],[117,[[22,[115]]]],[118,[[22,[114]]]],[118,[[22,[115]]]],[118,[[22,[114]]]],[118,[[22,[115]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[114,[[22,[118]]]],[115,[[22,[118]]]],[114,[[22,[118]]]],[115,[[22,[118]]]],[114,28],[[],116],[[116,-1],[[22,[115]]],[[85,[84]]]],[[116,-1],[[22,[114]]],[[85,[84]]]],[[],[[22,[[4,[114,115]]]]]],[[[16,[114]],45],[[46,[[22,[4]]]]]],[[[16,[115]],45,2],[[46,[[22,[4]]]]]],[[115,45],[[46,[[22,[4]]]]]],[[[16,[114]],45],[[46,[[22,[4]]]]]],[[[16,[114]],45,[8,[7]]],[[46,[[22,[3]]]]]],[[114,45],[[46,[[22,[4]]]]]],[[[16,[114]],45,[8,[47]]],[[46,[[22,[3]]]]]],[[116,28],116],[115,[[22,[4]]]],[[114,1],[[22,[5]]]],[[115,1],[[22,[5]]]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[[115,[8,[7]]],[[22,[3]]]],[[115,-1],[[22,[3]]],48],[[115,[8,[107]]],[[22,[3]]]],[[114,[8,[7]]],[[22,[3]]]],[[114,[8,[47]]],[[22,[3]]]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[[116,28],116],[114,[[22,[4]]]],0,0,0,0,0,0,0,0,[[119,-1],[],120],[[121,-1],[],120],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[122,[[22,[121]]]],[119,119],[[-1,-2],4,[],[]],[[],119],[121,4],[122,122],[122,122],[122,122],[119,123],[121,123],[[124,124],28],[[122,62],122],[[122,30],31],[[119,30],31],[[123,30],31],[[125,30],31],[[125,30],31],[[121,30],31],[[124,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[122,62],122],[121,119],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[125,28],[125,28],[[122,3],122],[[122,3],122],[[],122],[[122,-1],122,[126,127,128]],[[122,-1],122,[126,127,128]],[[122,-1],122,[126,127,128]],[[122,-1],122,[126,127,128]],[119,124],[121,4],[[121,98],4],[[119,-1],129,[120,127]],[[121,-1],129,[120,127]],[[119,-2],[[129,[-1]]],127,[[72,[],[[67,[-1]]]],127]],[[121,-2],[[129,[-1]]],127,[[72,[],[[67,[-1]]]],127]],[[122,98],122],[[122,-1],122,[[130,[41]]]],[[122,-1],122,[[126,[],[[67,[41]]]],127,128]],[[122,3],122],[-1,-2,[],[]],[-1,41,[]],[[],[[26,[119,125]]]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[[122,3],122],0,0,0,0,0,0,0,0,[131,4],[[[129,[-1]]],4,[]],[[[132,[-1]]],4,[]],[[[129,[-1]]],131,[]],[[133,121,-1],[],120],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[132,[-1]]],[]],[[],133],[[[132,[-1]]],4,[]],[131,4],[[[129,[-1]]],4,[]],[134,4],[[[132,[-1]]],4,[]],[133,4],[133,134],[[131,30],31],[[135,30],31],[[135,30],31],[[[129,[-1]],30],31,33],[[134,30],31],[[[136,[-1]],30],31,[]],[[[132,[-1]],30],31,[]],[[133,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[136,[-1]]],-1,137],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[135,[[139,[138]]]],[135,28],[[[132,[-1]]],28,[]],[131,28],[[[129,[-1]]],28,[]],[135,28],[[[132,[-1]]],[[42,[[26,[-1,135]]]]],[]],[[[132,[-1]]],3,[]],[[],[[132,[-1]]],[]],[[],133],[[[16,[[129,[-1]]]],45],[[46,[-2]]],[],[]],[[[16,[133]],45],[[46,[-1]]],[]],[[[16,[[140,[-1]]]],45],[[46,[-2]]],120,[]],[[[132,[-1]],45],[[46,[[42,[[26,[-1,135]]]]]]],[]],[[133,-1],[],120],[[[136,[-1]],-1,-2],[[141,[-1,-2]]],[],120],[[[132,[-1]]],4,[]],[-1,129,[120,127]],[[[132,[-1]],-2],131,127,[[120,[],[[67,[-1]]]],127]],[-2,[[129,[-1]]],127,[[72,[],[[67,[-1]]]],127]],[[[132,[-1]],-2],131,127,[[72,[],[[67,[-1]]]],127]],[[[132,[-1]],-2,119],131,127,[[72,[],[[67,[-1]]]],127]],[-1,129,120],[[[132,[-1]],-2],131,[],[[120,[],[[67,[-1]]]]]],[[133,-1],129,120],[[[132,[-1]],-2,133],131,[],[[120,[],[[67,[-1]]]]]],[[[132,[-1]],-2,119],131,127,[[120,[],[[67,[-1]]]],127]],[[[136,[-1]],-1,-3],-2,[],[],[[72,[],[[67,[-2]]]]]],[-1,41,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[135,[[26,[[139,[138]],135]]]],[[[132,[-1]]],[[42,[[26,[-1,135]]]]],[]],[[[136,[-1]],-3],[[26,[-2,0]]],[],[],[[72,[-1],[[67,[-2]]]]]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[140,[-1]]],[]],[[[136,[-1]],-3],-2,[],[],[[72,[-1],[[67,[-2]]]]]],[[],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[141,[-1,-2]]],4,[],[]],[[[141,[-1,-2]],30],31,33,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[],[]],[[[16,[[141,[-1,-2]]]],45],[[46,[-3]]],[],120,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,51,[]],0,0,0,0,0,0,0,0,0,[[142,98],142],[[142,98],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[142,98],[[42,[142]]]],[[142,142],[[42,[98]]]],[[142,98],[[42,[142]]]],[142,142],[143,143],[[-1,-2],4,[],[]],[[-1,-2],4,[],[]],[[142,142],14],[144,142],[[],143],[[142,142],98],[142,98],[[142,142],28],[[143,143],28],0,[[142,30],31],[[143,30],31],[[145,30],31],[[[146,[-1]],30],31,33],[[144,30],31],[-1,-1,[]],[147,142],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[147,142],[[[146,[-1]]],-1,[]],[[[146,[-1]]],-1,[]],[[142,-1],4,111],[98,145],[[142,98],145],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,[],[]],[[[146,[-1]]],-1,[]],[142,147],[144,28],[145,143],[[],142],[[142,142],[[42,[14]]]],[145,98],[[[16,[[146,[-1]]]],45],[[46,[-2]]],120,[]],[[[16,[144]],45],[[46,[-1]]],[]],[[145,45],[[46,[142]]]],[145,4],[[[16,[144]],142],4],[[145,98],4],[[145,142],4],[145,4],[[142,142],98],[[145,143],4],[98,144],[142,144],[[142,142],98],[[142,98],142],[[142,98],4],[145,142],[[98,-1],[[146,[-1]]],120],[[142,-1],[[146,[-1]]],120],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],0,0,[[],148],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[148,148],[[-1,-2],4,[],[]],[[149,149],28],[[148,30],31],[[148,30],31],[[149,30],31],[[149,30],31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],148],[148,28],[148,28],[148,28],[[],148],[-1,-2,[],[]],[-1,41,[]],[-1,41,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,51,[]],[-1,51,[]]],"c":[],"p":[[5,"Interest",14],[5,"ReadBuf",14],[1,"usize"],[1,"tuple"],[5,"Ready",14],[5,"BufWriter",14],[1,"u8"],[1,"slice"],[10,"AsyncWrite",14],[5,"BufReader",14],[10,"AsyncRead",14],[10,"AsyncReadExt",14],[5,"UninitSlice",1528],[6,"Ordering",1529],[10,"AsyncBufRead",14],[5,"Pin",1530],[10,"AsyncBufReadExt",14],[5,"Empty",14],[5,"Take",14],[5,"BufStream",14],[1,"u64"],[8,"Result",1531],[10,"Unpin",1532],[10,"Sized",1532],[5,"Error",1531],[6,"Result",1533],[5,"DuplexStream",14],[1,"bool"],[10,"AsyncWriteExt",14],[5,"Formatter",1534],[8,"Result",1534],[5,"ReadHalf",14],[10,"Debug",1534],[5,"WriteHalf",14],[5,"Join",14],[5,"Repeat",14],[5,"Sink",14],[5,"Split",14],[5,"Lines",14],[20,"MaybeUninit",1535],[5,"String",1536],[6,"Option",1537],[5,"Vec",1538],[10,"AsyncSeek",14],[5,"Context",1539],[6,"Poll",1540],[5,"IoSlice",1541],[10,"BufMut",1542],[10,"AsyncSeekExt",14],[6,"SeekFrom",1541],[5,"TypeId",1543],[10,"Buf",1544],[1,"f32"],[1,"f64"],[1,"i128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i8"],[1,"u128"],[1,"u16"],[1,"u32"],[5,"AsyncFd",497],[5,"BorrowedFd",1545],[10,"AsRawFd",1546],[8,"RawFd",1546],[17,"Output"],[10,"FnMut",1547],[5,"AsyncFdReadyGuard",497],[5,"AsyncFdReadyMutGuard",497],[5,"TryIoError",497],[10,"FnOnce",1547],[5,"TcpListener",569],[5,"TcpStream",569],[6,"SocketAddr",1548],[5,"UnixListener",569],[5,"UnixStream",569],[5,"SocketAddr",964],[5,"TcpSocket",569],[5,"UdpSocket",569],[5,"UnixDatagram",569],[5,"UnixSocket",569],[10,"ToSocketAddrs",569],[5,"Path",1549],[10,"AsRef",1550],[5,"TcpListener",1551],[5,"TcpStream",1551],[5,"UdpSocket",1552],[5,"UnixDatagram",1553],[5,"UnixListener",1554],[5,"UnixStream",1555],[5,"OwnedReadHalf",867],[5,"OwnedWriteHalf",867],[5,"OwnedReadHalf",964],[5,"OwnedWriteHalf",964],[5,"Ipv4Addr",1556],[5,"Ipv6Addr",1556],[5,"Duration",1557],[17,"Item"],[10,"Iterator",1558],[5,"UCred",964],[6,"Shutdown",1559],[5,"ReadHalf",867],[5,"WriteHalf",867],[5,"ReadHalf",964],[5,"WriteHalf",964],[5,"IoSliceMut",1541],[5,"ReuniteError",867],[5,"ReuniteError",964],[8,"gid_t",964],[10,"Hasher",1560],[8,"pid_t",964],[8,"uid_t",964],[5,"Sender",1089],[5,"Receiver",1089],[5,"OpenOptions",1089],[5,"File",1561],[5,"OwnedFd",1545],[5,"Handle",1159],[10,"Future",1562],[5,"Runtime",1159],[5,"Builder",1159],[5,"EnterGuard",1159],[6,"RuntimeFlavor",1159],[5,"TryCurrentError",1159],[10,"Fn",1547],[10,"Send",1532],[10,"Sync",1532],[5,"JoinHandle",1256],[10,"Into",1550],[5,"AbortHandle",1256],[5,"JoinSet",1256],[5,"LocalSet",1256],[5,"LocalEnterGuard",1256],[5,"JoinError",1256],[5,"LocalKey",1256],[10,"Copy",1532],[10,"Any",1543],[5,"Box",1563],[5,"Unconstrained",1256],[5,"TaskLocalFuture",1382],[5,"Instant",1394],[6,"MissedTickBehavior",1394],[5,"Sleep",1394],[5,"Interval",1394],[5,"Timeout",1394],[5,"Instant",1564],[5,"Error",1496],[5,"Elapsed",1496]],"b":[[160,"impl-From%3CBufReader%3CBufWriter%3CRW%3E%3E%3E-for-BufStream%3CRW%3E"],[161,"impl-From%3CBufWriter%3CBufReader%3CRW%3E%3E%3E-for-BufStream%3CRW%3E"],[891,"impl-Display-for-ReuniteError"],[892,"impl-Debug-for-ReuniteError"],[999,"impl-Display-for-ReuniteError"],[1000,"impl-Debug-for-ReuniteError"],[1196,"impl-Debug-for-TryCurrentError"],[1197,"impl-Display-for-TryCurrentError"],[1295,"impl-Debug-for-JoinError"],[1296,"impl-Display-for-JoinError"],[1473,"impl-Sub-for-Instant"],[1474,"impl-Sub%3CDuration%3E-for-Instant"],[1506,"impl-Display-for-Error"],[1507,"impl-Debug-for-Error"],[1508,"impl-Display-for-Elapsed"],[1509,"impl-Debug-for-Elapsed"]]}],\
["tokio_macros",{"doc":"Macros for use with Tokio","t":"XXXXXX","n":["main","main_fail","main_rt","test","test_fail","test_rt"],"q":[[0,"tokio_macros"]],"d":["Marks async function to be executed by the selected …","Always fails with the error message below.","Marks async function to be executed by selected runtime. …","Marks async function to be executed by runtime, suitable …","Always fails with the error message below.","Marks async function to be executed by runtime, suitable …"],"i":[0,0,0,0,0,0],"f":[0,0,0,0,0,0],"c":[],"p":[],"b":[]}],\
["unicode_ident",{"doc":"github crates-io docs-rs","t":"HH","n":["is_xid_continue","is_xid_start"],"q":[[0,"unicode_ident"]],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"c":[],"p":[[1,"char"],[1,"bool"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
